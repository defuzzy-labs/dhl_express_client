# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dhl_express_client.api_client import ApiClient


class ShipmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exp_api_shipments(self, body, **kwargs):  # noqa: E501
        """Create Shipment  # noqa: E501

        ## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupermodelIoLogisticsExpressCreateShipmentRequest body: Details about the shipment to be created (required)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :param bool strict_validation: If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.
        :param bool bypass_plt_error: Option to bypass PLT - WY service code lane capability validation 
        :return: SupermodelIoLogisticsExpressCreateShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_shipments_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_shipments_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def exp_api_shipments_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Shipment  # noqa: E501

        ## Create Shipment The ShipmentRequest Operation will allow you to generate an AWB number and piece IDs, generate a shipping label, transmit manifest shipment detail to DHL, and optionally book a courier for the pickup of a shipment. The key elements in the response of the Shipment Request will be a base64 encoded PDF label and the Shipment and Piece identification numbers, which you can use for tracking on the DHL web site. While the RateRequest and ShipmentRequest services can be used independently, DHL recommends the use of RateRequest to first validate the products available for the shipper/receiver. The global product codes which are output during the RateResponse can be used directly as input into the Shipment Request, as both perform similar validations in terms of service capability.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupermodelIoLogisticsExpressCreateShipmentRequest body: Details about the shipment to be created (required)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :param bool strict_validation: If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.
        :param bool bypass_plt_error: Option to bypass PLT - WY service code lane capability validation 
        :return: SupermodelIoLogisticsExpressCreateShipmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version', 'strict_validation', 'bypass_plt_error']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_shipments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `exp_api_shipments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'strict_validation' in params:
            query_params.append(('strictValidation', params['strict_validation']))  # noqa: E501
        if 'bypass_plt_error' in params:
            query_params.append(('bypassPLTError', params['bypass_plt_error']))  # noqa: E501

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shipments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupermodelIoLogisticsExpressCreateShipmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exp_api_shipments_documentimage(self, shipment_tracking_number, shipper_account_number, type_code, pickup_year_and_month, **kwargs):  # noqa: E501
        """Get Image  # noqa: E501

        The Get Image service can be used to retrieve customer's own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_documentimage(shipment_tracking_number, shipper_account_number, type_code, pickup_year_and_month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :param str shipper_account_number: DHL Express customer shipper account number (required)
        :param str type_code: Please provide correct document type. (required)
        :param str pickup_year_and_month: Please provide the pickup's date in YYYY-MM format  (required)
        :param str encoding_format: Please provide the document image encoding format in pdf or tiff format 
        :param bool all_in_one_pdf: Option to return all the document images in a single PDF file 
        :param bool compressed_package: Option to return all the document images in a compressed package 
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: SupermodelIoLogisticsExpressDocumentImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_shipments_documentimage_with_http_info(shipment_tracking_number, shipper_account_number, type_code, pickup_year_and_month, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_shipments_documentimage_with_http_info(shipment_tracking_number, shipper_account_number, type_code, pickup_year_and_month, **kwargs)  # noqa: E501
            return data

    def exp_api_shipments_documentimage_with_http_info(self, shipment_tracking_number, shipper_account_number, type_code, pickup_year_and_month, **kwargs):  # noqa: E501
        """Get Image  # noqa: E501

        The Get Image service can be used to retrieve customer's own uploaded Commercial Invoice, Waybill Document  or supporting documents that uploaded during shipment creation.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_documentimage_with_http_info(shipment_tracking_number, shipper_account_number, type_code, pickup_year_and_month, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :param str shipper_account_number: DHL Express customer shipper account number (required)
        :param str type_code: Please provide correct document type. (required)
        :param str pickup_year_and_month: Please provide the pickup's date in YYYY-MM format  (required)
        :param str encoding_format: Please provide the document image encoding format in pdf or tiff format 
        :param bool all_in_one_pdf: Option to return all the document images in a single PDF file 
        :param bool compressed_package: Option to return all the document images in a compressed package 
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: SupermodelIoLogisticsExpressDocumentImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_tracking_number', 'shipper_account_number', 'type_code', 'pickup_year_and_month', 'encoding_format', 'all_in_one_pdf', 'compressed_package', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_shipments_documentimage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_tracking_number' is set
        if ('shipment_tracking_number' not in params or
                params['shipment_tracking_number'] is None):
            raise ValueError("Missing the required parameter `shipment_tracking_number` when calling `exp_api_shipments_documentimage`")  # noqa: E501
        # verify the required parameter 'shipper_account_number' is set
        if ('shipper_account_number' not in params or
                params['shipper_account_number'] is None):
            raise ValueError("Missing the required parameter `shipper_account_number` when calling `exp_api_shipments_documentimage`")  # noqa: E501
        # verify the required parameter 'type_code' is set
        if ('type_code' not in params or
                params['type_code'] is None):
            raise ValueError("Missing the required parameter `type_code` when calling `exp_api_shipments_documentimage`")  # noqa: E501
        # verify the required parameter 'pickup_year_and_month' is set
        if ('pickup_year_and_month' not in params or
                params['pickup_year_and_month'] is None):
            raise ValueError("Missing the required parameter `pickup_year_and_month` when calling `exp_api_shipments_documentimage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_tracking_number' in params:
            path_params['shipmentTrackingNumber'] = params['shipment_tracking_number']  # noqa: E501

        query_params = []
        if 'shipper_account_number' in params:
            query_params.append(('shipperAccountNumber', params['shipper_account_number']))  # noqa: E501
        if 'type_code' in params:
            query_params.append(('typeCode', params['type_code']))  # noqa: E501
        if 'pickup_year_and_month' in params:
            query_params.append(('pickupYearAndMonth', params['pickup_year_and_month']))  # noqa: E501
        if 'encoding_format' in params:
            query_params.append(('encodingFormat', params['encoding_format']))  # noqa: E501
        if 'all_in_one_pdf' in params:
            query_params.append(('allInOnePDF', params['all_in_one_pdf']))  # noqa: E501
        if 'compressed_package' in params:
            query_params.append(('compressedPackage', params['compressed_package']))  # noqa: E501

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentTrackingNumber}/get-image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupermodelIoLogisticsExpressDocumentImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exp_api_shipments_epod(self, shipment_tracking_number, **kwargs):  # noqa: E501
        """Electronic Proof of Delivery  # noqa: E501

        The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_epod(shipment_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :param str shipper_account_number: DHL Express customer shipper account number
        :param str content:
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: SupermodelIoLogisticsExpressEPODResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_shipments_epod_with_http_info(shipment_tracking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_shipments_epod_with_http_info(shipment_tracking_number, **kwargs)  # noqa: E501
            return data

    def exp_api_shipments_epod_with_http_info(self, shipment_tracking_number, **kwargs):  # noqa: E501
        """Electronic Proof of Delivery  # noqa: E501

        The electronic proof of delivery service can be used to retrieve proof of delivery for certain delivered DHL Express shipments   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_epod_with_http_info(shipment_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :param str shipper_account_number: DHL Express customer shipper account number
        :param str content:
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: SupermodelIoLogisticsExpressEPODResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_tracking_number', 'shipper_account_number', 'content', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_shipments_epod" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_tracking_number' is set
        if ('shipment_tracking_number' not in params or
                params['shipment_tracking_number'] is None):
            raise ValueError("Missing the required parameter `shipment_tracking_number` when calling `exp_api_shipments_epod`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_tracking_number' in params:
            path_params['shipmentTrackingNumber'] = params['shipment_tracking_number']  # noqa: E501

        query_params = []
        if 'shipper_account_number' in params:
            query_params.append(('shipperAccountNumber', params['shipper_account_number']))  # noqa: E501
        if 'content' in params:
            query_params.append(('content', params['content']))  # noqa: E501

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentTrackingNumber}/proof-of-delivery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupermodelIoLogisticsExpressEPODResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exp_api_shipments_img_upload(self, body, shipment_tracking_number, **kwargs):  # noqa: E501
        """Upload Paperless Trade shipment (PLT) images of previously created shipment.  # noqa: E501

        The upload-image service can be used to upload PLT images to a previously created shipment.  The PLT images for the shipment can be uploaded before the shipment has been physically  collected by DHL courier. However, the original shipment must contain WY as the special service otherwise,  an error will be returned when the customer wants to use the reupload function in this upload-image service.     IMPORTANT: Please note that at least 10mins must be given between the initial createShipment request and then  the upload-image request (including subsequent upload-image request).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_img_upload(body, shipment_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupermodelIoLogisticsExpressImageUploadRequest body: Details about the shipment images (required)
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_shipments_img_upload_with_http_info(body, shipment_tracking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_shipments_img_upload_with_http_info(body, shipment_tracking_number, **kwargs)  # noqa: E501
            return data

    def exp_api_shipments_img_upload_with_http_info(self, body, shipment_tracking_number, **kwargs):  # noqa: E501
        """Upload Paperless Trade shipment (PLT) images of previously created shipment.  # noqa: E501

        The upload-image service can be used to upload PLT images to a previously created shipment.  The PLT images for the shipment can be uploaded before the shipment has been physically  collected by DHL courier. However, the original shipment must contain WY as the special service otherwise,  an error will be returned when the customer wants to use the reupload function in this upload-image service.     IMPORTANT: Please note that at least 10mins must be given between the initial createShipment request and then  the upload-image request (including subsequent upload-image request).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_img_upload_with_http_info(body, shipment_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupermodelIoLogisticsExpressImageUploadRequest body: Details about the shipment images (required)
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'shipment_tracking_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_shipments_img_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `exp_api_shipments_img_upload`")  # noqa: E501
        # verify the required parameter 'shipment_tracking_number' is set
        if ('shipment_tracking_number' not in params or
                params['shipment_tracking_number'] is None):
            raise ValueError("Missing the required parameter `shipment_tracking_number` when calling `exp_api_shipments_img_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_tracking_number' in params:
            path_params['shipmentTrackingNumber'] = params['shipment_tracking_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentTrackingNumber}/upload-image', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exp_api_shipments_invoice_data_awb(self, body, shipment_tracking_number, **kwargs):  # noqa: E501
        """Upload Commercial Invoice data for your DHL Express shipment  # noqa: E501

        ## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \"PM\" service code is provided in MyDHL API Create Shipment request. \"PM\" service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \"CU\" and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_invoice_data_awb(body, shipment_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupermodelIoLogisticsExpressUploadInvoiceDataRequest body: Details about the invoice data (required)
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_shipments_invoice_data_awb_with_http_info(body, shipment_tracking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_shipments_invoice_data_awb_with_http_info(body, shipment_tracking_number, **kwargs)  # noqa: E501
            return data

    def exp_api_shipments_invoice_data_awb_with_http_info(self, body, shipment_tracking_number, **kwargs):  # noqa: E501
        """Upload Commercial Invoice data for your DHL Express shipment  # noqa: E501

        ## Upload Invoice Data with Shipment ID The upload invoice data service can be used to upload Commerical Invoice data with Shipment Identification Number for your DHL Express shipment.Customer can provide Commercial Invoice data before Shipment Data via Create Shipment flow or vice versa.  Important Note: UploadInvoiceData service is not enabled by default and must be requested per customer. Use of this service is only enabled on exceptional basis and DHL Express recommends to submit shipment requests together with a commercial invoice data.To enable use of UploadInvoiceData service, please contact your DHL Express IT representative. To use UploadInvoiceData service, it is required that \"PM\" service code is provided in MyDHL API Create Shipment request. \"PM\" service code is not enabled by  default for the customers, and needs to be enabled upon request.  When Shipment is created via MyDHL API Create Shipment service before uploading the Commercial Invoice (CIN) data,it is mandatory to provide the Shipment Identification Number as received in MyDHL API Create Shipment service Response. When Commercial Invoice (CIN) data is uploaded prior to creating a shipment via MyDHL API Create Shipment service, it is mandatory to provide Invoice Reference Number with Invoice Reference Type value \"CU\" and Shipper Account Number.   These elements are mandatory to facilitate an effective data merge of the Commercial Invoice (CIN) data with Shipment Data. As an output customer will receive Notification element value '0' on successful upload of Commercial Invoice (CIN) data.  DHL backend application performs the subsequent data merging process of the Shipment Data and Commercial Invoice data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_shipments_invoice_data_awb_with_http_info(body, shipment_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupermodelIoLogisticsExpressUploadInvoiceDataRequest body: Details about the invoice data (required)
        :param str shipment_tracking_number: DHL Express shipment identification number (required)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'shipment_tracking_number', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_shipments_invoice_data_awb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `exp_api_shipments_invoice_data_awb`")  # noqa: E501
        # verify the required parameter 'shipment_tracking_number' is set
        if ('shipment_tracking_number' not in params or
                params['shipment_tracking_number'] is None):
            raise ValueError("Missing the required parameter `shipment_tracking_number` when calling `exp_api_shipments_invoice_data_awb`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shipment_tracking_number' in params:
            path_params['shipmentTrackingNumber'] = params['shipment_tracking_number']  # noqa: E501

        query_params = []

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shipments/{shipmentTrackingNumber}/upload-invoice-data', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
