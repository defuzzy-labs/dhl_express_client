# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IdentifierApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exp_api_identifiers(self, account_number, type, size, x_version, **kwargs):  # noqa: E501
        """Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments  # noqa: E501

        Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments. Requires authorization to use this service from DHL Express.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_identifiers(account_number, type, size, x_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: DHL Express customer account number (required)
        :param str type: Type of DHL Express identifier to retrieve (required)
        :param str size: Number of identifiers to be retrieved (required)
        :param str x_version: Interface version - do not change this field value  (required)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: SupermodelIoLogisticsExpressIdentifierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_identifiers_with_http_info(account_number, type, size, x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_identifiers_with_http_info(account_number, type, size, x_version, **kwargs)  # noqa: E501
            return data

    def exp_api_identifiers_with_http_info(self, account_number, type, size, x_version, **kwargs):  # noqa: E501
        """Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments  # noqa: E501

        Service to allocate identifiers upfront for DHL Express Breakbulk or Loose Break Bulk shipments. Requires authorization to use this service from DHL Express.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_identifiers_with_http_info(account_number, type, size, x_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: DHL Express customer account number (required)
        :param str type: Type of DHL Express identifier to retrieve (required)
        :param str size: Number of identifiers to be retrieved (required)
        :param str x_version: Interface version - do not change this field value  (required)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: SupermodelIoLogisticsExpressIdentifierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'type', 'size', 'x_version', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_identifiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if ('account_number' not in params or
                params['account_number'] is None):
            raise ValueError("Missing the required parameter `account_number` when calling `exp_api_identifiers`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `exp_api_identifiers`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `exp_api_identifiers`")  # noqa: E501
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `exp_api_identifiers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/identifiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupermodelIoLogisticsExpressIdentifierResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
