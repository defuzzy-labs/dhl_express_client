# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServicepointApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exp_api_servicepoints(self, x_version, **kwargs):  # noqa: E501
        """Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments  # noqa: E501

        Get service points based on the given input parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_servicepoints(x_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_version: Interface version - do not change this field value  (required)
        :param str address: The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.
        :param str place_id: To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google
        :param str provider_id: To specify the providerId(provider) for the place ID
        :param str latitude: Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.
        :param str longitude: Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter
        :param str service_point_id: Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.
        :param str country_code: Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) 
        :param str language: Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) 
        :param str language_script_code: Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.
        :param str language_country_code: Language Country Code - can be used to differentiate between linguistic variants of the same Language.
        :param str service_point_results: Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. 
        :param str capability: Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    
        :param str open_before: Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00
        :param str open_after: Service points open After given time e.g.:15:00 will find service points which are open after 15:00
        :param list[str] open_day: Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday 
        :param str weight: Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :param list[str] weight_uom: Weight units – kg or lb. Required if weight is passed in. 
        :param str length: Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)
        :param str width: Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :param str height: Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :param list[str] dimensions_uom: Dimension units – cm or in. Required with any of length, width or height parameter.
        :param list[str] result_uom: Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. 
        :param str service_area_code: Service Area Code of the search address
        :param list[str] service_point_types: Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated
        :param str max_distance: Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. 
        :param str piece_count_limit: Static number, max pieces which can be handled on the service point.
        :param list[str] import_charges: Y/N – indicator whether it is possible to pay import charges on service point. 
        :param str key: Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.
        :param str combine_parameters: Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.
        :param str edd: Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.
        :param list[str] exclude_fully_booked: Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. 
        :param str shipment_id: To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.
        :param str piece_id: Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.
        :param str shipment_origin_service_area_code: To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.
        :param list[str] is_results_specific_capab_required: This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. 
        :param list[str] encrypt: This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. 
        :param list[str] b64: This indicates whether the address parameter contains the base64 encoded value or not. 
        :param list[str] svp_status: ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: ServicePointsRestResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_servicepoints_with_http_info(x_version, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_servicepoints_with_http_info(x_version, **kwargs)  # noqa: E501
            return data

    def exp_api_servicepoints_with_http_info(self, x_version, **kwargs):  # noqa: E501
        """Returns list of service points based on the given postal location address, service point ID or geocode details for DHL Express Service points to pick-up and drop-off shipments  # noqa: E501

        Get service points based on the given input parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_servicepoints_with_http_info(x_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_version: Interface version - do not change this field value  (required)
        :param str address: The address near which Service Points are to be found. If servicePointID is used, address is not needed.     Address can be sent as raw address. However to be GDPR compliant, tokenized address in  request should be sent.
        :param str place_id: To specify the placeID for which the nearest service points have to be searched. PlaceId refers to the ID provided by any provider for particular Address. Ex: Google
        :param str provider_id: To specify the providerId(provider) for the place ID
        :param str latitude: Latitude of user location. If address / servicePointID  parameter used, this parameter is not needed.
        :param str longitude: Longitude of user location. If address / servicePointID  parameter used, this parameter is not needed. It works in combination with the latitude parameter
        :param str service_point_id: Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.     If address is used, id is not possible to use.
        :param str country_code: Only ISO 3166-1 - Alpha-2 for country code can be used, e.g. “NL”, “ES”, “GB”, “US”, “DE”, .... This country code is used for returning matching service points in that country.          When rendering the service point information, the time format (24h or AM/PM), and distance unit (km/miles) are derived from the country information stored in the GSPL database for the country specified via this parameter.     E.g. for countryCode=GB will be time format AM/PM and distance unit will be mi.     E.g. for countryCode=DE will be time format 24h and distance unit will be km.           The CountryCode is also used in the address search by Google/Bing to limit the results to the specified country (f.e. to avoid picking a street with the same name from a different country) 
        :param str language: Language Code - represents the language. Mandatory if Script Code is provided or Language Country Code is provided, else optional. E.g. ‘eng’     Language Code is using ISO 3166-1 alpha-3 (3 letters) 
        :param str language_script_code: Language Script Code - represents the writing system. Mandatory if Language Country Code is provided, else optional.
        :param str language_country_code: Language Country Code - can be used to differentiate between linguistic variants of the same Language.
        :param str service_point_results: Max. number of service points to be returned.      If id or idf is used, this parameter is not needed as this will return searched service point. 
        :param str capability: Comma separated list of physical process capability codes.     81: I have a DHL account or return shipment     82: I have paid online     88: I will pay at the DHL Service Point     73: I will create a DHL shipping label at the DHL Service Point     74: I have printed a DHL label    75,76: I have a QR code    78,79: Im collecting a DHL Express parcel    86,87: I have directed a DHL Express parcel to a DHL Service Point    Possible Combinations : 81,73 | 81,74 | 81,75,76  | 82,74 | 82,75,76 | 88,73 | 78,79 | 86,87    Note: | is just used to represent the seperation of combinations.    
        :param str open_before: Service points open Before given Time. E.g.: 14:00 will find service points which are open before 14:00
        :param str open_after: Service points open After given time e.g.:15:00 will find service points which are open after 15:00
        :param list[str] open_day: Open on Weekday, valid values as follow:     1 - Monday     2 - Tuesday     3 - Wednesday     4 - Thursday     5 - Friday     6 - Saturday     0 – Sunday 
        :param str weight: Max. weight of the shipment. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :param list[str] weight_uom: Weight units – kg or lb. Required if weight is passed in. 
        :param str length: Max. length of the shipment  - the highest dimension     e.g. 30. Decimals are allowed as well (decimal separator either “,” or “.”)
        :param str width: Max. width of the shipment  - the middle dimension     e.g. 20. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :param str height: Max. height of the shipment  - the lowest dimension     e.g. 10. Decimals are allowed as well (decimal separator either “,” or “.”) 
        :param list[str] dimensions_uom: Dimension units – cm or in. Required with any of length, width or height parameter.
        :param list[str] result_uom: Distance uom to be used when returning response, it can be either km or mi. If not provided, default uom set for the country is returned. 
        :param str service_area_code: Service Area Code of the search address
        :param list[str] service_point_types: Comma separated list of service point types, e.g. “CTY,STN,247”.     Allowed Values:     CTY (City) - High street premises. DHL owned and managed. Eg. Downtown    STN (Station) - DHL premises. DHL owned and managed at PUD locations    PRT (Partner) - Partners(External) store. Eg. 7-Eleven, Shell    247 (24/7) - operating 24hours a day, has locker facility.  DHL owned and unmanned or / and automated
        :param str max_distance: Maximum distance in kilometers between the geocoded address and the returned Service Points. Values equal or less than 0 are ignored.     Accuracy of the maxDistance parameter:     The GREF web service uses a search rectangle for  Service Point searches. Therefore the maxDistance value is used to create a square with side length l = maxDistance * 2. This means that the distance of some of the found Service Points may actually be longer as specified by the maxDistance parameter, if the Service Point is located outside the circle with radius r = maxDistance, but still within the search square:     Centre point of the search square is the latitude/longitude pair resulting from a geocoding request to the Bing geocoding API, which in some cases may not represent the actual location of the address. The more precisely the address is specified, the higher is the probability that the geocoded location matches with the search address. 
        :param str piece_count_limit: Static number, max pieces which can be handled on the service point.
        :param list[str] import_charges: Y/N – indicator whether it is possible to pay import charges on service point. 
        :param str key: Unique API key which required separate onboarding request to enable this service.  Please approach your country representative for onboarding. Once approval is granted, API key will be generated and used for authentication.
        :param str combine_parameters: Allows combination of values for parameters servicePointTypes and importChanges. Limitations:- Only 1 level of conditions is allowed (not multiple AND/OR)Applicable only on servicePointTypes and importCharges parameters “,” stands for OR condition “&” stands for AND condition “()” splits multiple conditions.
        :param str edd: Estimated Delivery date:     YYYY-MM-DDThh:mm:ssTZD (for example 2023-06-25T22:59:00Z). This is a Servicepoint Capacity Management System Parameter to receive a capacity data of the found service points additionally calling Servicepoint Capacity Management System service.
        :param list[str] exclude_fully_booked: Parameter which will enable to filter out fully booked services in the Service Point Locator response to client.     Values:     Y - Service Point Locator will not send back service points which are fully booked.     N - Service Point Locator will send back all service points, also those where is no free capacity.     If not provided in request, it will be set up as N by default.      This is a Servicepoint Capacity Management System parameter. 
        :param str shipment_id: To specify the shipment ID. This is used for Servicepoint Capacity Management System parameter.
        :param str piece_id: Piece ID without Data Identifier / Prefix. (for example JD0081105201831337270 instead of JJD0081105201831337270). This is a Servicepoint Capacity Management System parameter.
        :param str shipment_origin_service_area_code: To specify the Shipment Origin Service Area Code. This is a Servicepoint Capacity Management System parameter.
        :param list[str] is_results_specific_capab_required: This is to include preconfigured non UI capability codes(ex. PPC 72) to be considered while sending the request to Reference Data backend service. PPC 72 is applicable only for REST request and not for Service Point Locator UI. 
        :param list[str] encrypt: This 'encrypt' flag is to indicate to Service Point Locator whether the address is tokenized(encrypt=y) or non-tokenized. So that Service Point Locator can detokenize to provide matching Service Point list.          When 'encrypt=y', Service Point Locator clients should mandatorily send tokenized address in the REST request.      When 'encrypt=n' or without 'encrypt' parameter, client should only send non-tokenized address(raw address).     Sample below:            Non-tokenized(raw) address: Sabah, Malaysia           Tokenized address: YmtzOVpTQWdQSGRjSm41bFlDRkZjR0ZKSWc9PQ==          Address Tokenization: Service Point Locator provides additional security to mask the address sent by the client in REST request which will hide raw address visible on the ‘View page Source’ or in ‘Developer tools. 
        :param list[str] b64: This indicates whether the address parameter contains the base64 encoded value or not. 
        :param list[str] svp_status: ServicePoint Status(svpStatus) to be used especially when looking for inactive service points with the svpStatus S,U,X,Y. By default active svpStatus 'A' is considered when this parameter is not sent in the request.   A = Service Available (Open)  S = Service Suspended (Temporarily closed)   U = Service Unavailable (Temporarily closed)   Y = Not Yet Open (Temporarily closed)   X = Closed (Temporarily closed)
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :return: ServicePointsRestResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_version', 'address', 'place_id', 'provider_id', 'latitude', 'longitude', 'service_point_id', 'country_code', 'language', 'language_script_code', 'language_country_code', 'service_point_results', 'capability', 'open_before', 'open_after', 'open_day', 'weight', 'weight_uom', 'length', 'width', 'height', 'dimensions_uom', 'result_uom', 'service_area_code', 'service_point_types', 'max_distance', 'piece_count_limit', 'import_charges', 'key', 'combine_parameters', 'edd', 'exclude_fully_booked', 'shipment_id', 'piece_id', 'shipment_origin_service_area_code', 'is_results_specific_capab_required', 'encrypt', 'b64', 'svp_status', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_servicepoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_version' is set
        if ('x_version' not in params or
                params['x_version'] is None):
            raise ValueError("Missing the required parameter `x_version` when calling `exp_api_servicepoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'place_id' in params:
            query_params.append(('placeId', params['place_id']))  # noqa: E501
        if 'provider_id' in params:
            query_params.append(('providerId', params['provider_id']))  # noqa: E501
        if 'latitude' in params:
            query_params.append(('latitude', params['latitude']))  # noqa: E501
        if 'longitude' in params:
            query_params.append(('longitude', params['longitude']))  # noqa: E501
        if 'service_point_id' in params:
            query_params.append(('servicePointID', params['service_point_id']))  # noqa: E501
        if 'country_code' in params:
            query_params.append(('countryCode', params['country_code']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'language_script_code' in params:
            query_params.append(('languageScriptCode', params['language_script_code']))  # noqa: E501
        if 'language_country_code' in params:
            query_params.append(('languageCountryCode', params['language_country_code']))  # noqa: E501
        if 'service_point_results' in params:
            query_params.append(('servicePointResults', params['service_point_results']))  # noqa: E501
        if 'capability' in params:
            query_params.append(('capability', params['capability']))  # noqa: E501
        if 'open_before' in params:
            query_params.append(('openBefore', params['open_before']))  # noqa: E501
        if 'open_after' in params:
            query_params.append(('openAfter', params['open_after']))  # noqa: E501
        if 'open_day' in params:
            query_params.append(('openDay', params['open_day']))  # noqa: E501
            collection_formats['openDay'] = 'multi'  # noqa: E501
        if 'weight' in params:
            query_params.append(('weight', params['weight']))  # noqa: E501
        if 'weight_uom' in params:
            query_params.append(('weightUom', params['weight_uom']))  # noqa: E501
            collection_formats['weightUom'] = 'multi'  # noqa: E501
        if 'length' in params:
            query_params.append(('length', params['length']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'dimensions_uom' in params:
            query_params.append(('dimensionsUom', params['dimensions_uom']))  # noqa: E501
            collection_formats['dimensionsUom'] = 'multi'  # noqa: E501
        if 'result_uom' in params:
            query_params.append(('resultUom', params['result_uom']))  # noqa: E501
            collection_formats['resultUom'] = 'multi'  # noqa: E501
        if 'service_area_code' in params:
            query_params.append(('serviceAreaCode', params['service_area_code']))  # noqa: E501
        if 'service_point_types' in params:
            query_params.append(('servicePointTypes', params['service_point_types']))  # noqa: E501
            collection_formats['servicePointTypes'] = 'multi'  # noqa: E501
        if 'max_distance' in params:
            query_params.append(('maxDistance', params['max_distance']))  # noqa: E501
        if 'piece_count_limit' in params:
            query_params.append(('pieceCountLimit', params['piece_count_limit']))  # noqa: E501
        if 'import_charges' in params:
            query_params.append(('importCharges', params['import_charges']))  # noqa: E501
            collection_formats['importCharges'] = 'multi'  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'combine_parameters' in params:
            query_params.append(('combineParameters', params['combine_parameters']))  # noqa: E501
        if 'edd' in params:
            query_params.append(('edd', params['edd']))  # noqa: E501
        if 'exclude_fully_booked' in params:
            query_params.append(('excludeFullyBooked', params['exclude_fully_booked']))  # noqa: E501
            collection_formats['excludeFullyBooked'] = 'multi'  # noqa: E501
        if 'shipment_id' in params:
            query_params.append(('shipmentID', params['shipment_id']))  # noqa: E501
        if 'piece_id' in params:
            query_params.append(('pieceID', params['piece_id']))  # noqa: E501
        if 'shipment_origin_service_area_code' in params:
            query_params.append(('shipmentOriginServiceAreaCode', params['shipment_origin_service_area_code']))  # noqa: E501
        if 'is_results_specific_capab_required' in params:
            query_params.append(('isResultsSpecificCapabRequired', params['is_results_specific_capab_required']))  # noqa: E501
            collection_formats['isResultsSpecificCapabRequired'] = 'multi'  # noqa: E501
        if 'encrypt' in params:
            query_params.append(('encrypt', params['encrypt']))  # noqa: E501
            collection_formats['encrypt'] = 'multi'  # noqa: E501
        if 'b64' in params:
            query_params.append(('b64', params['b64']))  # noqa: E501
            collection_formats['b64'] = 'multi'  # noqa: E501
        if 'svp_status' in params:
            query_params.append(('svpStatus', params['svp_status']))  # noqa: E501
            collection_formats['svpStatus'] = 'multi'  # noqa: E501

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501
        if 'x_version' in params:
            header_params['x-version'] = params['x_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/servicepoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServicePointsRestResponseV3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
