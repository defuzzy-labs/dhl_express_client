# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dhl_express_client.api_client import ApiClient


class ProductApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exp_api_products(self, account_number, origin_country_code, origin_city_name, destination_country_code, destination_city_name, weight, length, width, height, planned_shipping_date, is_customs_declarable, unit_of_measurement, **kwargs):  # noqa: E501
        """Retrieve available DHL Express products for a one piece Shipment  # noqa: E501

        The GET Products API will return DHL's product capabilities for a certain set of input data.  Using the shipper and receiver address as well as the dimension and weight of the piece belonging to a shipment, this operation returns the available products.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_products(account_number, origin_country_code, origin_city_name, destination_country_code, destination_city_name, weight, length, width, height, planned_shipping_date, is_customs_declarable, unit_of_measurement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: DHL Express customer account number (required)
        :param str origin_country_code: A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
        :param str origin_city_name: Text specifying the city name (required)
        :param str destination_country_code: A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
        :param str destination_city_name: Text specifying the city name (required)
        :param float weight: Gross weight of the shipment including packaging. (required)
        :param float length: Total length of the shipment including packaging. (required)
        :param float width: Total width of the shipment including packaging. (required)
        :param float height: Total height of the shipment including packaging. (required)
        :param str planned_shipping_date: Timestamp represents the date you plan to ship your prospected shipment  (required)
        :param bool is_customs_declarable: (required)
        :param str unit_of_measurement: The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing.  (required)
        :param str origin_postal_code: Text specifying the postal code for an address. https://gs1.org/voc/postalCode
        :param str destination_postal_code: Text specifying the postal code for an address. https://gs1.org/voc/postalCode
        :param bool next_business_day: When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned 
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :param bool strict_validation: If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.
        :param bool get_all_value_added_services: Option to return list of all value added services and its rule groups if applicable
        :param bool request_estimated_delivery_date: Option to return Estimated Delivery Date in response
        :param str estimated_delivery_date_type: Estimated Delivery Date Type. QDDF: is the fastest 'docs' transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL's service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. 
        :return: SupermodelIoLogisticsExpressProducts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exp_api_products_with_http_info(account_number, origin_country_code, origin_city_name, destination_country_code, destination_city_name, weight, length, width, height, planned_shipping_date, is_customs_declarable, unit_of_measurement, **kwargs)  # noqa: E501
        else:
            (data) = self.exp_api_products_with_http_info(account_number, origin_country_code, origin_city_name, destination_country_code, destination_city_name, weight, length, width, height, planned_shipping_date, is_customs_declarable, unit_of_measurement, **kwargs)  # noqa: E501
            return data

    def exp_api_products_with_http_info(self, account_number, origin_country_code, origin_city_name, destination_country_code, destination_city_name, weight, length, width, height, planned_shipping_date, is_customs_declarable, unit_of_measurement, **kwargs):  # noqa: E501
        """Retrieve available DHL Express products for a one piece Shipment  # noqa: E501

        The GET Products API will return DHL's product capabilities for a certain set of input data.  Using the shipper and receiver address as well as the dimension and weight of the piece belonging to a shipment, this operation returns the available products.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exp_api_products_with_http_info(account_number, origin_country_code, origin_city_name, destination_country_code, destination_city_name, weight, length, width, height, planned_shipping_date, is_customs_declarable, unit_of_measurement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number: DHL Express customer account number (required)
        :param str origin_country_code: A short text string code (see values defined in ISO 3166) specifying the shipment origin country. https://gs1.org/voc/Country, Alpha-2 Code (required)
        :param str origin_city_name: Text specifying the city name (required)
        :param str destination_country_code: A short text string code (see values defined in ISO 3166) specifying the shipment destination country. https://gs1.org/voc/Country, Alpha-2 Code (required)
        :param str destination_city_name: Text specifying the city name (required)
        :param float weight: Gross weight of the shipment including packaging. (required)
        :param float length: Total length of the shipment including packaging. (required)
        :param float width: Total width of the shipment including packaging. (required)
        :param float height: Total height of the shipment including packaging. (required)
        :param str planned_shipping_date: Timestamp represents the date you plan to ship your prospected shipment  (required)
        :param bool is_customs_declarable: (required)
        :param str unit_of_measurement: The UnitOfMeasurement node conveys the unit of measurements used in the operation. This single value corresponds to the units of weight and measurement which are used throughout the message processing.  (required)
        :param str origin_postal_code: Text specifying the postal code for an address. https://gs1.org/voc/postalCode
        :param str destination_postal_code: Text specifying the postal code for an address. https://gs1.org/voc/postalCode
        :param bool next_business_day: When set to true and there are no products available for given plannedShippingDate then products available for the next possible pickup date are returned 
        :param str message_reference: Please provide message reference 
        :param str message_reference_date: Optional reference date in the  HTTP-date format https://tools.ietf.org/html/rfc7231#section-7.1.1.2
        :param str plugin_name: Please provide name of the plugin (applicable to 3PV only) 
        :param str plugin_version: Please provide version of the plugin (applicable to 3PV only) 
        :param str shipping_system_platform_name: Please provide name of the shipping platform(applicable to 3PV only) 
        :param str shipping_system_platform_version: Please provide version of the shipping platform (applicable to 3PV only) 
        :param str webstore_platform_name: Please provide name of the webstore platform (applicable to 3PV only) 
        :param str webstore_platform_version: Please provide version of the webstore platform (applicable to 3PV only) 
        :param bool strict_validation: If set to true, indicate strict DCT validation of address details, and validation of product and service(s) combination provided in request.
        :param bool get_all_value_added_services: Option to return list of all value added services and its rule groups if applicable
        :param bool request_estimated_delivery_date: Option to return Estimated Delivery Date in response
        :param str estimated_delivery_date_type: Estimated Delivery Date Type. QDDF: is the fastest 'docs' transit time as quoted to the customer at booking or shipment creation. No custom clearance is considered. QDDC: constitutes DHL's service commitment as quoted at booking or shipment creation. QDDc builds in clearance time, and potentially other special perational non-transport component(s), when relevant. 
        :return: SupermodelIoLogisticsExpressProducts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number', 'origin_country_code', 'origin_city_name', 'destination_country_code', 'destination_city_name', 'weight', 'length', 'width', 'height', 'planned_shipping_date', 'is_customs_declarable', 'unit_of_measurement', 'origin_postal_code', 'destination_postal_code', 'next_business_day', 'message_reference', 'message_reference_date', 'plugin_name', 'plugin_version', 'shipping_system_platform_name', 'shipping_system_platform_version', 'webstore_platform_name', 'webstore_platform_version', 'strict_validation', 'get_all_value_added_services', 'request_estimated_delivery_date', 'estimated_delivery_date_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exp_api_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number' is set
        if ('account_number' not in params or
                params['account_number'] is None):
            raise ValueError("Missing the required parameter `account_number` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'origin_country_code' is set
        if ('origin_country_code' not in params or
                params['origin_country_code'] is None):
            raise ValueError("Missing the required parameter `origin_country_code` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'origin_city_name' is set
        if ('origin_city_name' not in params or
                params['origin_city_name'] is None):
            raise ValueError("Missing the required parameter `origin_city_name` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'destination_country_code' is set
        if ('destination_country_code' not in params or
                params['destination_country_code'] is None):
            raise ValueError("Missing the required parameter `destination_country_code` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'destination_city_name' is set
        if ('destination_city_name' not in params or
                params['destination_city_name'] is None):
            raise ValueError("Missing the required parameter `destination_city_name` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'weight' is set
        if ('weight' not in params or
                params['weight'] is None):
            raise ValueError("Missing the required parameter `weight` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'length' is set
        if ('length' not in params or
                params['length'] is None):
            raise ValueError("Missing the required parameter `length` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'planned_shipping_date' is set
        if ('planned_shipping_date' not in params or
                params['planned_shipping_date'] is None):
            raise ValueError("Missing the required parameter `planned_shipping_date` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'is_customs_declarable' is set
        if ('is_customs_declarable' not in params or
                params['is_customs_declarable'] is None):
            raise ValueError("Missing the required parameter `is_customs_declarable` when calling `exp_api_products`")  # noqa: E501
        # verify the required parameter 'unit_of_measurement' is set
        if ('unit_of_measurement' not in params or
                params['unit_of_measurement'] is None):
            raise ValueError("Missing the required parameter `unit_of_measurement` when calling `exp_api_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_number' in params:
            query_params.append(('accountNumber', params['account_number']))  # noqa: E501
        if 'origin_country_code' in params:
            query_params.append(('originCountryCode', params['origin_country_code']))  # noqa: E501
        if 'origin_postal_code' in params:
            query_params.append(('originPostalCode', params['origin_postal_code']))  # noqa: E501
        if 'origin_city_name' in params:
            query_params.append(('originCityName', params['origin_city_name']))  # noqa: E501
        if 'destination_country_code' in params:
            query_params.append(('destinationCountryCode', params['destination_country_code']))  # noqa: E501
        if 'destination_postal_code' in params:
            query_params.append(('destinationPostalCode', params['destination_postal_code']))  # noqa: E501
        if 'destination_city_name' in params:
            query_params.append(('destinationCityName', params['destination_city_name']))  # noqa: E501
        if 'weight' in params:
            query_params.append(('weight', params['weight']))  # noqa: E501
        if 'length' in params:
            query_params.append(('length', params['length']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'planned_shipping_date' in params:
            query_params.append(('plannedShippingDate', params['planned_shipping_date']))  # noqa: E501
        if 'is_customs_declarable' in params:
            query_params.append(('isCustomsDeclarable', params['is_customs_declarable']))  # noqa: E501
        if 'unit_of_measurement' in params:
            query_params.append(('unitOfMeasurement', params['unit_of_measurement']))  # noqa: E501
        if 'next_business_day' in params:
            query_params.append(('nextBusinessDay', params['next_business_day']))  # noqa: E501
        if 'strict_validation' in params:
            query_params.append(('strictValidation', params['strict_validation']))  # noqa: E501
        if 'get_all_value_added_services' in params:
            query_params.append(('getAllValueAddedServices', params['get_all_value_added_services']))  # noqa: E501
        if 'request_estimated_delivery_date' in params:
            query_params.append(('requestEstimatedDeliveryDate', params['request_estimated_delivery_date']))  # noqa: E501
        if 'estimated_delivery_date_type' in params:
            query_params.append(('estimatedDeliveryDateType', params['estimated_delivery_date_type']))  # noqa: E501

        header_params = {}
        if 'message_reference' in params:
            header_params['Message-Reference'] = params['message_reference']  # noqa: E501
        if 'message_reference_date' in params:
            header_params['Message-Reference-Date'] = params['message_reference_date']  # noqa: E501
        if 'plugin_name' in params:
            header_params['Plugin-Name'] = params['plugin_name']  # noqa: E501
        if 'plugin_version' in params:
            header_params['Plugin-Version'] = params['plugin_version']  # noqa: E501
        if 'shipping_system_platform_name' in params:
            header_params['Shipping-System-Platform-Name'] = params['shipping_system_platform_name']  # noqa: E501
        if 'shipping_system_platform_version' in params:
            header_params['Shipping-System-Platform-Version'] = params['shipping_system_platform_version']  # noqa: E501
        if 'webstore_platform_name' in params:
            header_params['Webstore-Platform-Name'] = params['webstore_platform_name']  # noqa: E501
        if 'webstore_platform_version' in params:
            header_params['Webstore-Platform-Version'] = params['webstore_platform_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupermodelIoLogisticsExpressProducts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
