# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressBankDetailsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'settlement_local_currency': 'str',
        'settlement_foreign_currency': 'str'
    }

    attribute_map = {
        'name': 'name',
        'settlement_local_currency': 'settlementLocalCurrency',
        'settlement_foreign_currency': 'settlementForeignCurrency'
    }

    def __init__(self, name=None, settlement_local_currency=None, settlement_foreign_currency=None):  # noqa: E501
        """SupermodelIoLogisticsExpressBankDetailsInner - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._settlement_local_currency = None
        self._settlement_foreign_currency = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if settlement_local_currency is not None:
            self.settlement_local_currency = settlement_local_currency
        if settlement_foreign_currency is not None:
            self.settlement_foreign_currency = settlement_foreign_currency

    @property
    def name(self):
        """Gets the name of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501

        To be mapped in commercial Invoice - Russia Bank Name field  # noqa: E501

        :return: The name of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupermodelIoLogisticsExpressBankDetailsInner.

        To be mapped in commercial Invoice - Russia Bank Name field  # noqa: E501

        :param name: The name of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def settlement_local_currency(self):
        """Gets the settlement_local_currency of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501

        To be mapped in commercial Invoice - Russia Bank Settlement Account Number in RUR field  # noqa: E501

        :return: The settlement_local_currency of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501
        :rtype: str
        """
        return self._settlement_local_currency

    @settlement_local_currency.setter
    def settlement_local_currency(self, settlement_local_currency):
        """Sets the settlement_local_currency of this SupermodelIoLogisticsExpressBankDetailsInner.

        To be mapped in commercial Invoice - Russia Bank Settlement Account Number in RUR field  # noqa: E501

        :param settlement_local_currency: The settlement_local_currency of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501
        :type: str
        """

        self._settlement_local_currency = settlement_local_currency

    @property
    def settlement_foreign_currency(self):
        """Gets the settlement_foreign_currency of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501

        To be mapped in commercial Invoice - Russia Bank Settlement Account Number in RUR field  # noqa: E501

        :return: The settlement_foreign_currency of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501
        :rtype: str
        """
        return self._settlement_foreign_currency

    @settlement_foreign_currency.setter
    def settlement_foreign_currency(self, settlement_foreign_currency):
        """Sets the settlement_foreign_currency of this SupermodelIoLogisticsExpressBankDetailsInner.

        To be mapped in commercial Invoice - Russia Bank Settlement Account Number in RUR field  # noqa: E501

        :param settlement_foreign_currency: The settlement_foreign_currency of this SupermodelIoLogisticsExpressBankDetailsInner.  # noqa: E501
        :type: str
        """

        self._settlement_foreign_currency = settlement_foreign_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressBankDetailsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressBankDetailsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
