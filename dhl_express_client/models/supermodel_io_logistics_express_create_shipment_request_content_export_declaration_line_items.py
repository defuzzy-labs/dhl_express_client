# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'description': 'str',
        'price': 'float',
        'quantity': 'SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationQuantity',
        'commodity_codes': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCommodityCodes]',
        'export_reason_type': 'str',
        'manufacturer_country': 'str',
        'export_control_classification_number': 'str',
        'weight': 'SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationWeight',
        'is_taxes_paid': 'bool',
        'additional_information': 'list[str]',
        'customer_references': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomerReferences]',
        'customs_documents': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocuments]'
    }

    attribute_map = {
        'number': 'number',
        'description': 'description',
        'price': 'price',
        'quantity': 'quantity',
        'commodity_codes': 'commodityCodes',
        'export_reason_type': 'exportReasonType',
        'manufacturer_country': 'manufacturerCountry',
        'export_control_classification_number': 'exportControlClassificationNumber',
        'weight': 'weight',
        'is_taxes_paid': 'isTaxesPaid',
        'additional_information': 'additionalInformation',
        'customer_references': 'customerReferences',
        'customs_documents': 'customsDocuments'
    }

    def __init__(self, number=None, description=None, price=None, quantity=None, commodity_codes=None, export_reason_type=None, manufacturer_country=None, export_control_classification_number=None, weight=None, is_taxes_paid=None, additional_information=None, customer_references=None, customs_documents=None):  # noqa: E501
        """SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._description = None
        self._price = None
        self._quantity = None
        self._commodity_codes = None
        self._export_reason_type = None
        self._manufacturer_country = None
        self._export_control_classification_number = None
        self._weight = None
        self._is_taxes_paid = None
        self._additional_information = None
        self._customer_references = None
        self._customs_documents = None
        self.discriminator = None
        self.number = number
        self.description = description
        self.price = price
        self.quantity = quantity
        if commodity_codes is not None:
            self.commodity_codes = commodity_codes
        if export_reason_type is not None:
            self.export_reason_type = export_reason_type
        self.manufacturer_country = manufacturer_country
        if export_control_classification_number is not None:
            self.export_control_classification_number = export_control_classification_number
        self.weight = weight
        if is_taxes_paid is not None:
            self.is_taxes_paid = is_taxes_paid
        if additional_information is not None:
            self.additional_information = additional_information
        if customer_references is not None:
            self.customer_references = customer_references
        if customs_documents is not None:
            self.customs_documents = customs_documents

    @property
    def number(self):
        """Gets the number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide line item number  # noqa: E501

        :return: The number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide line item number  # noqa: E501

        :param number: The number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def description(self):
        """Gets the description of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide description of the line item  # noqa: E501

        :return: The description of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide description of the line item  # noqa: E501

        :param description: The description of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def price(self):
        """Gets the price of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide unit or article price line item value  # noqa: E501

        :return: The price of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide unit or article price line item value  # noqa: E501

        :param price: The price of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501


        :return: The quantity of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationQuantity
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.


        :param quantity: The quantity of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationQuantity
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def commodity_codes(self):
        """Gets the commodity_codes of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide Commodity codes for the shipment at item line level  # noqa: E501

        :return: The commodity_codes of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCommodityCodes]
        """
        return self._commodity_codes

    @commodity_codes.setter
    def commodity_codes(self, commodity_codes):
        """Sets the commodity_codes of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide Commodity codes for the shipment at item line level  # noqa: E501

        :param commodity_codes: The commodity_codes of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCommodityCodes]
        """

        self._commodity_codes = commodity_codes

    @property
    def export_reason_type(self):
        """Gets the export_reason_type of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide the reason for export  # noqa: E501

        :return: The export_reason_type of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._export_reason_type

    @export_reason_type.setter
    def export_reason_type(self, export_reason_type):
        """Sets the export_reason_type of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide the reason for export  # noqa: E501

        :param export_reason_type: The export_reason_type of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["permanent", "temporary", "return", "used_exhibition_goods_to_origin", "intercompany_use", "commercial_purpose_or_sale", "personal_belongings_or_personal_use", "sample", "gift", "return_to_origin", "warranty_replacement", "diplomatic_goods", "defence_material"]  # noqa: E501
        if export_reason_type not in allowed_values:
            raise ValueError(
                "Invalid value for `export_reason_type` ({0}), must be one of {1}"  # noqa: E501
                .format(export_reason_type, allowed_values)
            )

        self._export_reason_type = export_reason_type

    @property
    def manufacturer_country(self):
        """Gets the manufacturer_country of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please enter two letter ISO manufacturer country code  # noqa: E501

        :return: The manufacturer_country of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_country

    @manufacturer_country.setter
    def manufacturer_country(self, manufacturer_country):
        """Sets the manufacturer_country of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please enter two letter ISO manufacturer country code  # noqa: E501

        :param manufacturer_country: The manufacturer_country of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: str
        """
        if manufacturer_country is None:
            raise ValueError("Invalid value for `manufacturer_country`, must not be `None`")  # noqa: E501

        self._manufacturer_country = manufacturer_country

    @property
    def export_control_classification_number(self):
        """Gets the export_control_classification_number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please enter Export Control Classification Number info<BR>                    This is required for EEI filing US country usage  # noqa: E501

        :return: The export_control_classification_number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._export_control_classification_number

    @export_control_classification_number.setter
    def export_control_classification_number(self, export_control_classification_number):
        """Sets the export_control_classification_number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please enter Export Control Classification Number info<BR>                    This is required for EEI filing US country usage  # noqa: E501

        :param export_control_classification_number: The export_control_classification_number of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: str
        """

        self._export_control_classification_number = export_control_classification_number

    @property
    def weight(self):
        """Gets the weight of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501


        :return: The weight of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationWeight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.


        :param weight: The weight of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationWeight
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def is_taxes_paid(self):
        """Gets the is_taxes_paid of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide if the Taxes is paid for the line item  # noqa: E501

        :return: The is_taxes_paid of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_taxes_paid

    @is_taxes_paid.setter
    def is_taxes_paid(self, is_taxes_paid):
        """Sets the is_taxes_paid of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide if the Taxes is paid for the line item  # noqa: E501

        :param is_taxes_paid: The is_taxes_paid of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: bool
        """

        self._is_taxes_paid = is_taxes_paid

    @property
    def additional_information(self):
        """Gets the additional_information of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide the additional information  # noqa: E501

        :return: The additional_information of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide the additional information  # noqa: E501

        :param additional_information: The additional_information of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: list[str]
        """

        self._additional_information = additional_information

    @property
    def customer_references(self):
        """Gets the customer_references of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide the Customer References for the line item  # noqa: E501

        :return: The customer_references of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomerReferences]
        """
        return self._customer_references

    @customer_references.setter
    def customer_references(self, customer_references):
        """Sets the customer_references of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide the Customer References for the line item  # noqa: E501

        :param customer_references: The customer_references of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomerReferences]
        """

        self._customer_references = customer_references

    @property
    def customs_documents(self):
        """Gets the customs_documents of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501

        Please provide the customs documents details  # noqa: E501

        :return: The customs_documents of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocuments]
        """
        return self._customs_documents

    @customs_documents.setter
    def customs_documents(self, customs_documents):
        """Sets the customs_documents of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.

        Please provide the customs documents details  # noqa: E501

        :param customs_documents: The customs_documents of this SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCustomsDocuments]
        """

        self._customs_documents = customs_documents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationLineItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
