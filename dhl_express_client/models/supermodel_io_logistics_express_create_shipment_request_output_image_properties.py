# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'printer_dpi': 'float',
        'customer_barcodes': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodes]',
        'customer_logos': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogos]',
        'encoding_format': 'str',
        'image_options': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptions]',
        'split_transport_and_waybill_doc_labels': 'bool',
        'all_documents_in_one_image': 'bool',
        'split_documents_by_pages': 'bool',
        'split_invoice_and_receipt': 'bool',
        'receipt_and_labels_in_one_image': 'bool'
    }

    attribute_map = {
        'printer_dpi': 'printerDPI',
        'customer_barcodes': 'customerBarcodes',
        'customer_logos': 'customerLogos',
        'encoding_format': 'encodingFormat',
        'image_options': 'imageOptions',
        'split_transport_and_waybill_doc_labels': 'splitTransportAndWaybillDocLabels',
        'all_documents_in_one_image': 'allDocumentsInOneImage',
        'split_documents_by_pages': 'splitDocumentsByPages',
        'split_invoice_and_receipt': 'splitInvoiceAndReceipt',
        'receipt_and_labels_in_one_image': 'receiptAndLabelsInOneImage'
    }

    def __init__(self, printer_dpi=None, customer_barcodes=None, customer_logos=None, encoding_format='pdf', image_options=None, split_transport_and_waybill_doc_labels=None, all_documents_in_one_image=None, split_documents_by_pages=None, split_invoice_and_receipt=None, receipt_and_labels_in_one_image=None):  # noqa: E501
        """SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties - a model defined in Swagger"""  # noqa: E501
        self._printer_dpi = None
        self._customer_barcodes = None
        self._customer_logos = None
        self._encoding_format = None
        self._image_options = None
        self._split_transport_and_waybill_doc_labels = None
        self._all_documents_in_one_image = None
        self._split_documents_by_pages = None
        self._split_invoice_and_receipt = None
        self._receipt_and_labels_in_one_image = None
        self.discriminator = None
        if printer_dpi is not None:
            self.printer_dpi = printer_dpi
        if customer_barcodes is not None:
            self.customer_barcodes = customer_barcodes
        if customer_logos is not None:
            self.customer_logos = customer_logos
        if encoding_format is not None:
            self.encoding_format = encoding_format
        if image_options is not None:
            self.image_options = image_options
        if split_transport_and_waybill_doc_labels is not None:
            self.split_transport_and_waybill_doc_labels = split_transport_and_waybill_doc_labels
        if all_documents_in_one_image is not None:
            self.all_documents_in_one_image = all_documents_in_one_image
        if split_documents_by_pages is not None:
            self.split_documents_by_pages = split_documents_by_pages
        if split_invoice_and_receipt is not None:
            self.split_invoice_and_receipt = split_invoice_and_receipt
        if receipt_and_labels_in_one_image is not None:
            self.receipt_and_labels_in_one_image = receipt_and_labels_in_one_image

    @property
    def printer_dpi(self):
        """Gets the printer_dpi of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        Printer DPI Resolution for X-axis and Y-axis (in DPI) for transport label and waybill document output  # noqa: E501

        :return: The printer_dpi of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: float
        """
        return self._printer_dpi

    @printer_dpi.setter
    def printer_dpi(self, printer_dpi):
        """Sets the printer_dpi of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        Printer DPI Resolution for X-axis and Y-axis (in DPI) for transport label and waybill document output  # noqa: E501

        :param printer_dpi: The printer_dpi of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: float
        """
        allowed_values = [200, 300]  # noqa: E501
        if printer_dpi not in allowed_values:
            raise ValueError(
                "Invalid value for `printer_dpi` ({0}), must be one of {1}"  # noqa: E501
                .format(printer_dpi, allowed_values)
            )

        self._printer_dpi = printer_dpi

    @property
    def customer_barcodes(self):
        """Gets the customer_barcodes of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        Customer barcodes to be printed on supported transport label templates  # noqa: E501

        :return: The customer_barcodes of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodes]
        """
        return self._customer_barcodes

    @customer_barcodes.setter
    def customer_barcodes(self, customer_barcodes):
        """Sets the customer_barcodes of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        Customer barcodes to be printed on supported transport label templates  # noqa: E501

        :param customer_barcodes: The customer_barcodes of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerBarcodes]
        """

        self._customer_barcodes = customer_barcodes

    @property
    def customer_logos(self):
        """Gets the customer_logos of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        Customer Logo Image to be printed on transport label  # noqa: E501

        :return: The customer_logos of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogos]
        """
        return self._customer_logos

    @customer_logos.setter
    def customer_logos(self, customer_logos):
        """Sets the customer_logos of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        Customer Logo Image to be printed on transport label  # noqa: E501

        :param customer_logos: The customer_logos of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesCustomerLogos]
        """

        self._customer_logos = customer_logos

    @property
    def encoding_format(self):
        """Gets the encoding_format of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        Please provide the format of the output documents. Note that invoice and receipt will always come back as PDF  # noqa: E501

        :return: The encoding_format of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: str
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format):
        """Sets the encoding_format of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        Please provide the format of the output documents. Note that invoice and receipt will always come back as PDF  # noqa: E501

        :param encoding_format: The encoding_format of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["pdf", "zpl", "lp2", "epl"]  # noqa: E501
        if encoding_format not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_format` ({0}), must be one of {1}"  # noqa: E501
                .format(encoding_format, allowed_values)
            )

        self._encoding_format = encoding_format

    @property
    def image_options(self):
        """Gets the image_options of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        Here the image options are defined for label, waybillDoc, invoice, receipt and QRcode  # noqa: E501

        :return: The image_options of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptions]
        """
        return self._image_options

    @image_options.setter
    def image_options(self, image_options):
        """Sets the image_options of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        Here the image options are defined for label, waybillDoc, invoice, receipt and QRcode  # noqa: E501

        :param image_options: The image_options of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestOutputImagePropertiesImageOptions]
        """

        self._image_options = image_options

    @property
    def split_transport_and_waybill_doc_labels(self):
        """Gets the split_transport_and_waybill_doc_labels of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        When set to true it will generate a single PDF or thermal output file for the Transport Label, a single PDF or thermal output file for the Waybill document and a single PDF file consisting of Commercial Invoice and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.  # noqa: E501

        :return: The split_transport_and_waybill_doc_labels of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: bool
        """
        return self._split_transport_and_waybill_doc_labels

    @split_transport_and_waybill_doc_labels.setter
    def split_transport_and_waybill_doc_labels(self, split_transport_and_waybill_doc_labels):
        """Sets the split_transport_and_waybill_doc_labels of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        When set to true it will generate a single PDF or thermal output file for the Transport Label, a single PDF or thermal output file for the Waybill document and a single PDF file consisting of Commercial Invoice and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.  # noqa: E501

        :param split_transport_and_waybill_doc_labels: The split_transport_and_waybill_doc_labels of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: bool
        """

        self._split_transport_and_waybill_doc_labels = split_transport_and_waybill_doc_labels

    @property
    def all_documents_in_one_image(self):
        """Gets the all_documents_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        When set to true it will generate a single PDF or thermal output image file consists of Transport Label, Waybill Document, Shipment Receipt and Commercial Invoice.<BR>          The default value is false, where a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned.  # noqa: E501

        :return: The all_documents_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: bool
        """
        return self._all_documents_in_one_image

    @all_documents_in_one_image.setter
    def all_documents_in_one_image(self, all_documents_in_one_image):
        """Sets the all_documents_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        When set to true it will generate a single PDF or thermal output image file consists of Transport Label, Waybill Document, Shipment Receipt and Commercial Invoice.<BR>          The default value is false, where a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned.  # noqa: E501

        :param all_documents_in_one_image: The all_documents_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: bool
        """

        self._all_documents_in_one_image = all_documents_in_one_image

    @property
    def split_documents_by_pages(self):
        """Gets the split_documents_by_pages of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        When set to true it will generate a single PDF or thermal output image file for each page for the Transport Label and single PDF or thermal output image file for Waybill Document will be returned in the create shipment response. The default value is false, a single PDF or thermal output image file for each page for Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.  # noqa: E501

        :return: The split_documents_by_pages of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: bool
        """
        return self._split_documents_by_pages

    @split_documents_by_pages.setter
    def split_documents_by_pages(self, split_documents_by_pages):
        """Sets the split_documents_by_pages of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        When set to true it will generate a single PDF or thermal output image file for each page for the Transport Label and single PDF or thermal output image file for Waybill Document will be returned in the create shipment response. The default value is false, a single PDF or thermal output image file for each page for Transport Label and single PDF or thermal output image file for Waybill Document will be returned in create shipment response.  # noqa: E501

        :param split_documents_by_pages: The split_documents_by_pages of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: bool
        """

        self._split_documents_by_pages = split_documents_by_pages

    @property
    def split_invoice_and_receipt(self):
        """Gets the split_invoice_and_receipt of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        When set to true it will generate a single PDF or thermal output image file consisting of Transport Label + Waybill Document, a single file consist of Commercial Invoice and a single file consist of Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned in create shipment response.  # noqa: E501

        :return: The split_invoice_and_receipt of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: bool
        """
        return self._split_invoice_and_receipt

    @split_invoice_and_receipt.setter
    def split_invoice_and_receipt(self, split_invoice_and_receipt):
        """Sets the split_invoice_and_receipt of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        When set to true it will generate a single PDF or thermal output image file consisting of Transport Label + Waybill Document, a single file consist of Commercial Invoice and a single file consist of Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF or thermal output image file for Shipment Receipt and Customs Invoice will be returned in create shipment response.  # noqa: E501

        :param split_invoice_and_receipt: The split_invoice_and_receipt of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: bool
        """

        self._split_invoice_and_receipt = split_invoice_and_receipt

    @property
    def receipt_and_labels_in_one_image(self):
        """Gets the receipt_and_labels_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501

        When set to true it will generate a single PDF file consisting of Transport Label, Waybill Document and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF file for Shipment Receipt will be returned in create shipment response.  Applicable only when #/outputImageProperties/imageOptions/0/typeCode is 'receipt' and #/outputImageProperties/encodingFormat is PDF.  # noqa: E501

        :return: The receipt_and_labels_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :rtype: bool
        """
        return self._receipt_and_labels_in_one_image

    @receipt_and_labels_in_one_image.setter
    def receipt_and_labels_in_one_image(self, receipt_and_labels_in_one_image):
        """Sets the receipt_and_labels_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.

        When set to true it will generate a single PDF file consisting of Transport Label, Waybill Document and Shipment Receipt. The default value is false, a single PDF or thermal output image file consists of Transport Label + Waybill Document and single PDF file for Shipment Receipt will be returned in create shipment response.  Applicable only when #/outputImageProperties/imageOptions/0/typeCode is 'receipt' and #/outputImageProperties/encodingFormat is PDF.  # noqa: E501

        :param receipt_and_labels_in_one_image: The receipt_and_labels_in_one_image of this SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties.  # noqa: E501
        :type: bool
        """

        self._receipt_and_labels_in_one_image = receipt_and_labels_in_one_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressCreateShipmentRequestOutputImageProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
