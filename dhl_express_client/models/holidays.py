# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Holidays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'open': 'list[OpenDatesTime]',
        'closed': 'list[ClosedDates]'
    }

    attribute_map = {
        'open': 'open',
        'closed': 'closed'
    }

    def __init__(self, open=None, closed=None):  # noqa: E501
        """Holidays - a model defined in Swagger"""  # noqa: E501
        self._open = None
        self._closed = None
        self.discriminator = None
        if open is not None:
            self.open = open
        if closed is not None:
            self.closed = closed

    @property
    def open(self):
        """Gets the open of this Holidays.  # noqa: E501

        Array of objects: {date, from, to}, where date is date and from and to is time  # noqa: E501

        :return: The open of this Holidays.  # noqa: E501
        :rtype: list[OpenDatesTime]
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this Holidays.

        Array of objects: {date, from, to}, where date is date and from and to is time  # noqa: E501

        :param open: The open of this Holidays.  # noqa: E501
        :type: list[OpenDatesTime]
        """

        self._open = open

    @property
    def closed(self):
        """Gets the closed of this Holidays.  # noqa: E501

        Array of dates:{from, to} when is closed.  # noqa: E501

        :return: The closed of this Holidays.  # noqa: E501
        :rtype: list[ClosedDates]
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Holidays.

        Array of dates:{from, to} when is closed.  # noqa: E501

        :param closed: The closed of this Holidays.  # noqa: E501
        :type: list[ClosedDates]
        """

        self._closed = closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Holidays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Holidays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
