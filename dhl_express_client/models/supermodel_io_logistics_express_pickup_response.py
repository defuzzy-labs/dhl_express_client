# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressPickupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dispatch_confirmation_numbers': 'list[str]',
        'ready_by_time': 'str',
        'next_pickup_date': 'str',
        'warnings': 'list[str]'
    }

    attribute_map = {
        'dispatch_confirmation_numbers': 'dispatchConfirmationNumbers',
        'ready_by_time': 'readyByTime',
        'next_pickup_date': 'nextPickupDate',
        'warnings': 'warnings'
    }

    def __init__(self, dispatch_confirmation_numbers=None, ready_by_time=None, next_pickup_date=None, warnings=None):  # noqa: E501
        """SupermodelIoLogisticsExpressPickupResponse - a model defined in Swagger"""  # noqa: E501
        self._dispatch_confirmation_numbers = None
        self._ready_by_time = None
        self._next_pickup_date = None
        self._warnings = None
        self.discriminator = None
        if dispatch_confirmation_numbers is not None:
            self.dispatch_confirmation_numbers = dispatch_confirmation_numbers
        if ready_by_time is not None:
            self.ready_by_time = ready_by_time
        if next_pickup_date is not None:
            self.next_pickup_date = next_pickup_date
        if warnings is not None:
            self.warnings = warnings

    @property
    def dispatch_confirmation_numbers(self):
        """Gets the dispatch_confirmation_numbers of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501

        List of Dispatch Confirmation Numbers which identifies the scheduled pickup  # noqa: E501

        :return: The dispatch_confirmation_numbers of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._dispatch_confirmation_numbers

    @dispatch_confirmation_numbers.setter
    def dispatch_confirmation_numbers(self, dispatch_confirmation_numbers):
        """Sets the dispatch_confirmation_numbers of this SupermodelIoLogisticsExpressPickupResponse.

        List of Dispatch Confirmation Numbers which identifies the scheduled pickup  # noqa: E501

        :param dispatch_confirmation_numbers: The dispatch_confirmation_numbers of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :type: list[str]
        """

        self._dispatch_confirmation_numbers = dispatch_confirmation_numbers

    @property
    def ready_by_time(self):
        """Gets the ready_by_time of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501


        :return: The ready_by_time of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :rtype: str
        """
        return self._ready_by_time

    @ready_by_time.setter
    def ready_by_time(self, ready_by_time):
        """Sets the ready_by_time of this SupermodelIoLogisticsExpressPickupResponse.


        :param ready_by_time: The ready_by_time of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :type: str
        """

        self._ready_by_time = ready_by_time

    @property
    def next_pickup_date(self):
        """Gets the next_pickup_date of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501


        :return: The next_pickup_date of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_pickup_date

    @next_pickup_date.setter
    def next_pickup_date(self, next_pickup_date):
        """Sets the next_pickup_date of this SupermodelIoLogisticsExpressPickupResponse.


        :param next_pickup_date: The next_pickup_date of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :type: str
        """

        self._next_pickup_date = next_pickup_date

    @property
    def warnings(self):
        """Gets the warnings of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501


        :return: The warnings of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SupermodelIoLogisticsExpressPickupResponse.


        :param warnings: The warnings of this SupermodelIoLogisticsExpressPickupResponse.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressPickupResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressPickupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
