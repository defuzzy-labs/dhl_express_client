# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'str',
        'email': 'str',
        'link_uri': 'str',
        'service_point_id': 'str',
        'html': 'str'
    }

    attribute_map = {
        'phone_number': 'phoneNumber',
        'email': 'email',
        'link_uri': 'linkUri',
        'service_point_id': 'servicePointId',
        'html': 'html'
    }

    def __init__(self, phone_number=None, email=None, link_uri=None, service_point_id=None, html=None):  # noqa: E501
        """ContactDetails - a model defined in Swagger"""  # noqa: E501
        self._phone_number = None
        self._email = None
        self._link_uri = None
        self._service_point_id = None
        self._html = None
        self.discriminator = None
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email
        if link_uri is not None:
            self.link_uri = link_uri
        if service_point_id is not None:
            self.service_point_id = service_point_id
        if html is not None:
            self.html = html

    @property
    def phone_number(self):
        """Gets the phone_number of this ContactDetails.  # noqa: E501

        Phone number of the Service Point  # noqa: E501

        :return: The phone_number of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ContactDetails.

        Phone number of the Service Point  # noqa: E501

        :param phone_number: The phone_number of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this ContactDetails.  # noqa: E501

        E-Mail address of the Service Point  # noqa: E501

        :return: The email of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDetails.

        E-Mail address of the Service Point  # noqa: E501

        :param email: The email of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def link_uri(self):
        """Gets the link_uri of this ContactDetails.  # noqa: E501

        Link to website of the Service Point  # noqa: E501

        :return: The link_uri of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._link_uri

    @link_uri.setter
    def link_uri(self, link_uri):
        """Sets the link_uri of this ContactDetails.

        Link to website of the Service Point  # noqa: E501

        :param link_uri: The link_uri of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._link_uri = link_uri

    @property
    def service_point_id(self):
        """Gets the service_point_id of this ContactDetails.  # noqa: E501

        Service Point ID  # noqa: E501

        :return: The service_point_id of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._service_point_id

    @service_point_id.setter
    def service_point_id(self, service_point_id):
        """Sets the service_point_id of this ContactDetails.

        Service Point ID  # noqa: E501

        :param service_point_id: The service_point_id of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._service_point_id = service_point_id

    @property
    def html(self):
        """Gets the html of this ContactDetails.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The html of this ContactDetails.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ContactDetails.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param html: The html of this ContactDetails.  # noqa: E501
        :type: str
        """

        self._html = html

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
