# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpeningHours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opening_hours': 'list[OpeningTime]',
        'holiday_dates': 'list[date]',
        'holidays_dates': 'dict(str, list[date])',
        'html': 'str',
        'holiday_opening_hours_html': 'str',
        'holidays': 'Holidays'
    }

    attribute_map = {
        'opening_hours': 'openingHours',
        'holiday_dates': 'holidayDates',
        'holidays_dates': 'holidaysDates',
        'html': 'html',
        'holiday_opening_hours_html': 'holidayOpeningHoursHtml',
        'holidays': 'holidays'
    }

    def __init__(self, opening_hours=None, holiday_dates=None, holidays_dates=None, html=None, holiday_opening_hours_html=None, holidays=None):  # noqa: E501
        """OpeningHours - a model defined in Swagger"""  # noqa: E501
        self._opening_hours = None
        self._holiday_dates = None
        self._holidays_dates = None
        self._html = None
        self._holiday_opening_hours_html = None
        self._holidays = None
        self.discriminator = None
        self.opening_hours = opening_hours
        if holiday_dates is not None:
            self.holiday_dates = holiday_dates
        if holidays_dates is not None:
            self.holidays_dates = holidays_dates
        if html is not None:
            self.html = html
        if holiday_opening_hours_html is not None:
            self.holiday_opening_hours_html = holiday_opening_hours_html
        if holidays is not None:
            self.holidays = holidays

    @property
    def opening_hours(self):
        """Gets the opening_hours of this OpeningHours.  # noqa: E501

        Multiple opening hours entities can exist for the same week day.  # noqa: E501

        :return: The opening_hours of this OpeningHours.  # noqa: E501
        :rtype: list[OpeningTime]
        """
        return self._opening_hours

    @opening_hours.setter
    def opening_hours(self, opening_hours):
        """Sets the opening_hours of this OpeningHours.

        Multiple opening hours entities can exist for the same week day.  # noqa: E501

        :param opening_hours: The opening_hours of this OpeningHours.  # noqa: E501
        :type: list[OpeningTime]
        """
        if opening_hours is None:
            raise ValueError("Invalid value for `opening_hours`, must not be `None`")  # noqa: E501

        self._opening_hours = opening_hours

    @property
    def holiday_dates(self):
        """Gets the holiday_dates of this OpeningHours.  # noqa: E501

        Holiday details with date  # noqa: E501

        :return: The holiday_dates of this OpeningHours.  # noqa: E501
        :rtype: list[date]
        """
        return self._holiday_dates

    @holiday_dates.setter
    def holiday_dates(self, holiday_dates):
        """Sets the holiday_dates of this OpeningHours.

        Holiday details with date  # noqa: E501

        :param holiday_dates: The holiday_dates of this OpeningHours.  # noqa: E501
        :type: list[date]
        """

        self._holiday_dates = holiday_dates

    @property
    def holidays_dates(self):
        """Gets the holidays_dates of this OpeningHours.  # noqa: E501

        Holiday details with date  # noqa: E501

        :return: The holidays_dates of this OpeningHours.  # noqa: E501
        :rtype: dict(str, list[date])
        """
        return self._holidays_dates

    @holidays_dates.setter
    def holidays_dates(self, holidays_dates):
        """Sets the holidays_dates of this OpeningHours.

        Holiday details with date  # noqa: E501

        :param holidays_dates: The holidays_dates of this OpeningHours.  # noqa: E501
        :type: dict(str, list[date])
        """

        self._holidays_dates = holidays_dates

    @property
    def html(self):
        """Gets the html of this OpeningHours.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The html of this OpeningHours.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this OpeningHours.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param html: The html of this OpeningHours.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def holiday_opening_hours_html(self):
        """Gets the holiday_opening_hours_html of this OpeningHours.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The holiday_opening_hours_html of this OpeningHours.  # noqa: E501
        :rtype: str
        """
        return self._holiday_opening_hours_html

    @holiday_opening_hours_html.setter
    def holiday_opening_hours_html(self, holiday_opening_hours_html):
        """Sets the holiday_opening_hours_html of this OpeningHours.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param holiday_opening_hours_html: The holiday_opening_hours_html of this OpeningHours.  # noqa: E501
        :type: str
        """

        self._holiday_opening_hours_html = holiday_opening_hours_html

    @property
    def holidays(self):
        """Gets the holidays of this OpeningHours.  # noqa: E501


        :return: The holidays of this OpeningHours.  # noqa: E501
        :rtype: Holidays
        """
        return self._holidays

    @holidays.setter
    def holidays(self, holidays):
        """Sets the holidays of this OpeningHours.


        :param holidays: The holidays of this OpeningHours.  # noqa: E501
        :type: Holidays
        """

        self._holidays = holidays

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpeningHours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpeningHours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
