# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressRateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_details': 'SupermodelIoLogisticsExpressRateRequestCustomerDetails',
        'accounts': 'list[SupermodelIoLogisticsExpressAccount]',
        'product_code': 'str',
        'local_product_code': 'str',
        'value_added_services': 'list[SupermodelIoLogisticsExpressValueAddedServicesRates]',
        'products_and_services': 'list[SupermodelIoLogisticsExpressRateRequestProductsAndServices]',
        'payer_country_code': 'str',
        'planned_shipping_date_and_time': 'str',
        'unit_of_measurement': 'str',
        'is_customs_declarable': 'bool',
        'monetary_amount': 'list[SupermodelIoLogisticsExpressRateRequestMonetaryAmount]',
        'request_all_value_added_services': 'bool',
        'estimated_delivery_date': 'EstimatedDeliveryDate1',
        'get_additional_information': 'list[SupermodelIoLogisticsExpressRateRequestGetAdditionalInformation]',
        'return_standard_products_only': 'bool',
        'next_business_day': 'bool',
        'product_type_code': 'str',
        'packages': 'list[SupermodelIoLogisticsExpressPackageRR]'
    }

    attribute_map = {
        'customer_details': 'customerDetails',
        'accounts': 'accounts',
        'product_code': 'productCode',
        'local_product_code': 'localProductCode',
        'value_added_services': 'valueAddedServices',
        'products_and_services': 'productsAndServices',
        'payer_country_code': 'payerCountryCode',
        'planned_shipping_date_and_time': 'plannedShippingDateAndTime',
        'unit_of_measurement': 'unitOfMeasurement',
        'is_customs_declarable': 'isCustomsDeclarable',
        'monetary_amount': 'monetaryAmount',
        'request_all_value_added_services': 'requestAllValueAddedServices',
        'estimated_delivery_date': 'estimatedDeliveryDate',
        'get_additional_information': 'getAdditionalInformation',
        'return_standard_products_only': 'returnStandardProductsOnly',
        'next_business_day': 'nextBusinessDay',
        'product_type_code': 'productTypeCode',
        'packages': 'packages'
    }

    def __init__(self, customer_details=None, accounts=None, product_code=None, local_product_code=None, value_added_services=None, products_and_services=None, payer_country_code=None, planned_shipping_date_and_time=None, unit_of_measurement=None, is_customs_declarable=None, monetary_amount=None, request_all_value_added_services=None, estimated_delivery_date=None, get_additional_information=None, return_standard_products_only=None, next_business_day=False, product_type_code=None, packages=None):  # noqa: E501
        """SupermodelIoLogisticsExpressRateRequest - a model defined in Swagger"""  # noqa: E501
        self._customer_details = None
        self._accounts = None
        self._product_code = None
        self._local_product_code = None
        self._value_added_services = None
        self._products_and_services = None
        self._payer_country_code = None
        self._planned_shipping_date_and_time = None
        self._unit_of_measurement = None
        self._is_customs_declarable = None
        self._monetary_amount = None
        self._request_all_value_added_services = None
        self._estimated_delivery_date = None
        self._get_additional_information = None
        self._return_standard_products_only = None
        self._next_business_day = None
        self._product_type_code = None
        self._packages = None
        self.discriminator = None
        self.customer_details = customer_details
        if accounts is not None:
            self.accounts = accounts
        if product_code is not None:
            self.product_code = product_code
        if local_product_code is not None:
            self.local_product_code = local_product_code
        if value_added_services is not None:
            self.value_added_services = value_added_services
        if products_and_services is not None:
            self.products_and_services = products_and_services
        if payer_country_code is not None:
            self.payer_country_code = payer_country_code
        self.planned_shipping_date_and_time = planned_shipping_date_and_time
        self.unit_of_measurement = unit_of_measurement
        self.is_customs_declarable = is_customs_declarable
        if monetary_amount is not None:
            self.monetary_amount = monetary_amount
        if request_all_value_added_services is not None:
            self.request_all_value_added_services = request_all_value_added_services
        if estimated_delivery_date is not None:
            self.estimated_delivery_date = estimated_delivery_date
        if get_additional_information is not None:
            self.get_additional_information = get_additional_information
        if return_standard_products_only is not None:
            self.return_standard_products_only = return_standard_products_only
        if next_business_day is not None:
            self.next_business_day = next_business_day
        if product_type_code is not None:
            self.product_type_code = product_type_code
        self.packages = packages

    @property
    def customer_details(self):
        """Gets the customer_details of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501


        :return: The customer_details of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: SupermodelIoLogisticsExpressRateRequestCustomerDetails
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this SupermodelIoLogisticsExpressRateRequest.


        :param customer_details: The customer_details of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: SupermodelIoLogisticsExpressRateRequestCustomerDetails
        """
        if customer_details is None:
            raise ValueError("Invalid value for `customer_details`, must not be `None`")  # noqa: E501

        self._customer_details = customer_details

    @property
    def accounts(self):
        """Gets the accounts of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please enter all the DHL Express accounts and types to be used for this shipment  # noqa: E501

        :return: The accounts of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressAccount]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SupermodelIoLogisticsExpressRateRequest.

        Please enter all the DHL Express accounts and types to be used for this shipment  # noqa: E501

        :param accounts: The accounts of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressAccount]
        """

        self._accounts = accounts

    @property
    def product_code(self):
        """Gets the product_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please enter DHL Express Global Product code  # noqa: E501

        :return: The product_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this SupermodelIoLogisticsExpressRateRequest.

        Please enter DHL Express Global Product code  # noqa: E501

        :param product_code: The product_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def local_product_code(self):
        """Gets the local_product_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please enter DHL Express Local Product code  # noqa: E501

        :return: The local_product_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: str
        """
        return self._local_product_code

    @local_product_code.setter
    def local_product_code(self, local_product_code):
        """Sets the local_product_code of this SupermodelIoLogisticsExpressRateRequest.

        Please enter DHL Express Local Product code  # noqa: E501

        :param local_product_code: The local_product_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: str
        """

        self._local_product_code = local_product_code

    @property
    def value_added_services(self):
        """Gets the value_added_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please use if you wish to filter the response by value added services  # noqa: E501

        :return: The value_added_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressValueAddedServicesRates]
        """
        return self._value_added_services

    @value_added_services.setter
    def value_added_services(self, value_added_services):
        """Sets the value_added_services of this SupermodelIoLogisticsExpressRateRequest.

        Please use if you wish to filter the response by value added services  # noqa: E501

        :param value_added_services: The value_added_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressValueAddedServicesRates]
        """

        self._value_added_services = value_added_services

    @property
    def products_and_services(self):
        """Gets the products_and_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please use if you wish to filter the response by product(s) and/or value added services  # noqa: E501

        :return: The products_and_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressRateRequestProductsAndServices]
        """
        return self._products_and_services

    @products_and_services.setter
    def products_and_services(self, products_and_services):
        """Sets the products_and_services of this SupermodelIoLogisticsExpressRateRequest.

        Please use if you wish to filter the response by product(s) and/or value added services  # noqa: E501

        :param products_and_services: The products_and_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressRateRequestProductsAndServices]
        """

        self._products_and_services = products_and_services

    @property
    def payer_country_code(self):
        """Gets the payer_country_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        payerCountryCode is to be provided if your profile has been enabled to view rates without an account number (this will provide DHL Express published rates for the payer country)  # noqa: E501

        :return: The payer_country_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: str
        """
        return self._payer_country_code

    @payer_country_code.setter
    def payer_country_code(self, payer_country_code):
        """Sets the payer_country_code of this SupermodelIoLogisticsExpressRateRequest.

        payerCountryCode is to be provided if your profile has been enabled to view rates without an account number (this will provide DHL Express published rates for the payer country)  # noqa: E501

        :param payer_country_code: The payer_country_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: str
        """

        self._payer_country_code = payer_country_code

    @property
    def planned_shipping_date_and_time(self):
        """Gets the planned_shipping_date_and_time of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Identifies the date and time the package is tendered. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).  # noqa: E501

        :return: The planned_shipping_date_and_time of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: str
        """
        return self._planned_shipping_date_and_time

    @planned_shipping_date_and_time.setter
    def planned_shipping_date_and_time(self, planned_shipping_date_and_time):
        """Sets the planned_shipping_date_and_time of this SupermodelIoLogisticsExpressRateRequest.

        Identifies the date and time the package is tendered. Both the date and time portions of the string are expected to be used. The date should not be a past date or a date more than 10 days in the future. The time is the local time of the shipment based on the shipper's time zone. The date component must be in the format: YYYY-MM-DD; the time component must be in the format: HH:MM:SS using a 24 hour clock. The date and time parts are separated by the letter T (e.g. 2006-06-26T17:00:00 GMT+01:00).  # noqa: E501

        :param planned_shipping_date_and_time: The planned_shipping_date_and_time of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: str
        """
        if planned_shipping_date_and_time is None:
            raise ValueError("Invalid value for `planned_shipping_date_and_time`, must not be `None`")  # noqa: E501

        self._planned_shipping_date_and_time = planned_shipping_date_and_time

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please enter Unit of measurement - metric,imperial  # noqa: E501

        :return: The unit_of_measurement of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this SupermodelIoLogisticsExpressRateRequest.

        Please enter Unit of measurement - metric,imperial  # noqa: E501

        :param unit_of_measurement: The unit_of_measurement of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: str
        """
        if unit_of_measurement is None:
            raise ValueError("Invalid value for `unit_of_measurement`, must not be `None`")  # noqa: E501
        allowed_values = ["metric", "imperial"]  # noqa: E501
        if unit_of_measurement not in allowed_values:
            raise ValueError(
                "Invalid value for `unit_of_measurement` ({0}), must be one of {1}"  # noqa: E501
                .format(unit_of_measurement, allowed_values)
            )

        self._unit_of_measurement = unit_of_measurement

    @property
    def is_customs_declarable(self):
        """Gets the is_customs_declarable of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)  # noqa: E501

        :return: The is_customs_declarable of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_customs_declarable

    @is_customs_declarable.setter
    def is_customs_declarable(self, is_customs_declarable):
        """Sets the is_customs_declarable of this SupermodelIoLogisticsExpressRateRequest.

        For customs purposes please advise if your shipment is dutiable (true) or non dutiable (false)  # noqa: E501

        :param is_customs_declarable: The is_customs_declarable of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: bool
        """
        if is_customs_declarable is None:
            raise ValueError("Invalid value for `is_customs_declarable`, must not be `None`")  # noqa: E501

        self._is_customs_declarable = is_customs_declarable

    @property
    def monetary_amount(self):
        """Gets the monetary_amount of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please provide monetary amount related to your shipment, for example shipment declared value  # noqa: E501

        :return: The monetary_amount of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressRateRequestMonetaryAmount]
        """
        return self._monetary_amount

    @monetary_amount.setter
    def monetary_amount(self, monetary_amount):
        """Sets the monetary_amount of this SupermodelIoLogisticsExpressRateRequest.

        Please provide monetary amount related to your shipment, for example shipment declared value  # noqa: E501

        :param monetary_amount: The monetary_amount of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressRateRequestMonetaryAmount]
        """

        self._monetary_amount = monetary_amount

    @property
    def request_all_value_added_services(self):
        """Gets the request_all_value_added_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Legacy field and replaced by newer field getAdditionalInformation. Please set this to true to receive all value added services for each product available  # noqa: E501

        :return: The request_all_value_added_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._request_all_value_added_services

    @request_all_value_added_services.setter
    def request_all_value_added_services(self, request_all_value_added_services):
        """Sets the request_all_value_added_services of this SupermodelIoLogisticsExpressRateRequest.

        Legacy field and replaced by newer field getAdditionalInformation. Please set this to true to receive all value added services for each product available  # noqa: E501

        :param request_all_value_added_services: The request_all_value_added_services of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: bool
        """

        self._request_all_value_added_services = request_all_value_added_services

    @property
    def estimated_delivery_date(self):
        """Gets the estimated_delivery_date of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501


        :return: The estimated_delivery_date of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: EstimatedDeliveryDate1
        """
        return self._estimated_delivery_date

    @estimated_delivery_date.setter
    def estimated_delivery_date(self, estimated_delivery_date):
        """Sets the estimated_delivery_date of this SupermodelIoLogisticsExpressRateRequest.


        :param estimated_delivery_date: The estimated_delivery_date of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: EstimatedDeliveryDate1
        """

        self._estimated_delivery_date = estimated_delivery_date

    @property
    def get_additional_information(self):
        """Gets the get_additional_information of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Provides additional information in the response like all value added services, and rule groups  # noqa: E501

        :return: The get_additional_information of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressRateRequestGetAdditionalInformation]
        """
        return self._get_additional_information

    @get_additional_information.setter
    def get_additional_information(self, get_additional_information):
        """Sets the get_additional_information of this SupermodelIoLogisticsExpressRateRequest.

        Provides additional information in the response like all value added services, and rule groups  # noqa: E501

        :param get_additional_information: The get_additional_information of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressRateRequestGetAdditionalInformation]
        """

        self._get_additional_information = get_additional_information

    @property
    def return_standard_products_only(self):
        """Gets the return_standard_products_only of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please set this to true to filter out all products which needs DHL Express special customer agreement  # noqa: E501

        :return: The return_standard_products_only of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_standard_products_only

    @return_standard_products_only.setter
    def return_standard_products_only(self, return_standard_products_only):
        """Sets the return_standard_products_only of this SupermodelIoLogisticsExpressRateRequest.

        Please set this to true to filter out all products which needs DHL Express special customer agreement  # noqa: E501

        :param return_standard_products_only: The return_standard_products_only of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: bool
        """

        self._return_standard_products_only = return_standard_products_only

    @property
    def next_business_day(self):
        """Gets the next_business_day of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please set this to true in case you want to receive products which are not available on planned shipping date but next available day  # noqa: E501

        :return: The next_business_day of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._next_business_day

    @next_business_day.setter
    def next_business_day(self, next_business_day):
        """Sets the next_business_day of this SupermodelIoLogisticsExpressRateRequest.

        Please set this to true in case you want to receive products which are not available on planned shipping date but next available day  # noqa: E501

        :param next_business_day: The next_business_day of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: bool
        """

        self._next_business_day = next_business_day

    @property
    def product_type_code(self):
        """Gets the product_type_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Please select which type of priducts you are interested in  # noqa: E501

        :return: The product_type_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_type_code

    @product_type_code.setter
    def product_type_code(self, product_type_code):
        """Sets the product_type_code of this SupermodelIoLogisticsExpressRateRequest.

        Please select which type of priducts you are interested in  # noqa: E501

        :param product_type_code: The product_type_code of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["all", "dayDefinite", "timeDefinite"]  # noqa: E501
        if product_type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type_code, allowed_values)
            )

        self._product_type_code = product_type_code

    @property
    def packages(self):
        """Gets the packages of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501

        Here you can define properties per package  # noqa: E501

        :return: The packages of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressPackageRR]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this SupermodelIoLogisticsExpressRateRequest.

        Here you can define properties per package  # noqa: E501

        :param packages: The packages of this SupermodelIoLogisticsExpressRateRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressPackageRR]
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501

        self._packages = packages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressRateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressRateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
