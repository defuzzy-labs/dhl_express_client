# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DateTimeField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'DateTimeFieldType',
        'supported': 'bool',
        'lenient': 'bool',
        'minimum_value': 'int',
        'maximum_value': 'int',
        'duration_field': 'DurationField',
        'range_duration_field': 'DurationField',
        'leap_duration_field': 'DurationField'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'supported': 'supported',
        'lenient': 'lenient',
        'minimum_value': 'minimumValue',
        'maximum_value': 'maximumValue',
        'duration_field': 'durationField',
        'range_duration_field': 'rangeDurationField',
        'leap_duration_field': 'leapDurationField'
    }

    def __init__(self, name=None, type=None, supported=None, lenient=None, minimum_value=None, maximum_value=None, duration_field=None, range_duration_field=None, leap_duration_field=None):  # noqa: E501
        """DateTimeField - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._supported = None
        self._lenient = None
        self._minimum_value = None
        self._maximum_value = None
        self._duration_field = None
        self._range_duration_field = None
        self._leap_duration_field = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if supported is not None:
            self.supported = supported
        if lenient is not None:
            self.lenient = lenient
        if minimum_value is not None:
            self.minimum_value = minimum_value
        if maximum_value is not None:
            self.maximum_value = maximum_value
        if duration_field is not None:
            self.duration_field = duration_field
        if range_duration_field is not None:
            self.range_duration_field = range_duration_field
        if leap_duration_field is not None:
            self.leap_duration_field = leap_duration_field

    @property
    def name(self):
        """Gets the name of this DateTimeField.  # noqa: E501


        :return: The name of this DateTimeField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DateTimeField.


        :param name: The name of this DateTimeField.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DateTimeField.  # noqa: E501


        :return: The type of this DateTimeField.  # noqa: E501
        :rtype: DateTimeFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DateTimeField.


        :param type: The type of this DateTimeField.  # noqa: E501
        :type: DateTimeFieldType
        """

        self._type = type

    @property
    def supported(self):
        """Gets the supported of this DateTimeField.  # noqa: E501


        :return: The supported of this DateTimeField.  # noqa: E501
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this DateTimeField.


        :param supported: The supported of this DateTimeField.  # noqa: E501
        :type: bool
        """

        self._supported = supported

    @property
    def lenient(self):
        """Gets the lenient of this DateTimeField.  # noqa: E501


        :return: The lenient of this DateTimeField.  # noqa: E501
        :rtype: bool
        """
        return self._lenient

    @lenient.setter
    def lenient(self, lenient):
        """Sets the lenient of this DateTimeField.


        :param lenient: The lenient of this DateTimeField.  # noqa: E501
        :type: bool
        """

        self._lenient = lenient

    @property
    def minimum_value(self):
        """Gets the minimum_value of this DateTimeField.  # noqa: E501


        :return: The minimum_value of this DateTimeField.  # noqa: E501
        :rtype: int
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        """Sets the minimum_value of this DateTimeField.


        :param minimum_value: The minimum_value of this DateTimeField.  # noqa: E501
        :type: int
        """

        self._minimum_value = minimum_value

    @property
    def maximum_value(self):
        """Gets the maximum_value of this DateTimeField.  # noqa: E501


        :return: The maximum_value of this DateTimeField.  # noqa: E501
        :rtype: int
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """Sets the maximum_value of this DateTimeField.


        :param maximum_value: The maximum_value of this DateTimeField.  # noqa: E501
        :type: int
        """

        self._maximum_value = maximum_value

    @property
    def duration_field(self):
        """Gets the duration_field of this DateTimeField.  # noqa: E501


        :return: The duration_field of this DateTimeField.  # noqa: E501
        :rtype: DurationField
        """
        return self._duration_field

    @duration_field.setter
    def duration_field(self, duration_field):
        """Sets the duration_field of this DateTimeField.


        :param duration_field: The duration_field of this DateTimeField.  # noqa: E501
        :type: DurationField
        """

        self._duration_field = duration_field

    @property
    def range_duration_field(self):
        """Gets the range_duration_field of this DateTimeField.  # noqa: E501


        :return: The range_duration_field of this DateTimeField.  # noqa: E501
        :rtype: DurationField
        """
        return self._range_duration_field

    @range_duration_field.setter
    def range_duration_field(self, range_duration_field):
        """Sets the range_duration_field of this DateTimeField.


        :param range_duration_field: The range_duration_field of this DateTimeField.  # noqa: E501
        :type: DurationField
        """

        self._range_duration_field = range_duration_field

    @property
    def leap_duration_field(self):
        """Gets the leap_duration_field of this DateTimeField.  # noqa: E501


        :return: The leap_duration_field of this DateTimeField.  # noqa: E501
        :rtype: DurationField
        """
        return self._leap_duration_field

    @leap_duration_field.setter
    def leap_duration_field(self, leap_duration_field):
        """Sets the leap_duration_field of this DateTimeField.


        :param leap_duration_field: The leap_duration_field of this DateTimeField.  # noqa: E501
        :type: DurationField
        """

        self._leap_duration_field = leap_duration_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateTimeField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTimeField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
