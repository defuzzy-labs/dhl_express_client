# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_id': 'str',
        'dry_ice_total_net_weight': 'float',
        'custom_description': 'str',
        'un_codes': 'list[str]'
    }

    attribute_map = {
        'content_id': 'contentId',
        'dry_ice_total_net_weight': 'dryIceTotalNetWeight',
        'custom_description': 'customDescription',
        'un_codes': 'unCodes'
    }

    def __init__(self, content_id=None, dry_ice_total_net_weight=None, custom_description=None, un_codes=None):  # noqa: E501
        """SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods - a model defined in Swagger"""  # noqa: E501
        self._content_id = None
        self._dry_ice_total_net_weight = None
        self._custom_description = None
        self._un_codes = None
        self.discriminator = None
        self.content_id = content_id
        if dry_ice_total_net_weight is not None:
            self.dry_ice_total_net_weight = dry_ice_total_net_weight
        if custom_description is not None:
            self.custom_description = custom_description
        if un_codes is not None:
            self.un_codes = un_codes

    @property
    def content_id(self):
        """Gets the content_id of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501

        Please enter valid DHL Express Dangerous good content id (please contact your DHL Express IT representative for the relevant content ID code if you are shipping Dan  # noqa: E501

        :return: The content_id of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.

        Please enter valid DHL Express Dangerous good content id (please contact your DHL Express IT representative for the relevant content ID code if you are shipping Dan  # noqa: E501

        :param content_id: The content_id of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :type: str
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")  # noqa: E501

        self._content_id = content_id

    @property
    def dry_ice_total_net_weight(self):
        """Gets the dry_ice_total_net_weight of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501

        Please enter dry ice total net weight when shipping dry ice  # noqa: E501

        :return: The dry_ice_total_net_weight of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :rtype: float
        """
        return self._dry_ice_total_net_weight

    @dry_ice_total_net_weight.setter
    def dry_ice_total_net_weight(self, dry_ice_total_net_weight):
        """Sets the dry_ice_total_net_weight of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.

        Please enter dry ice total net weight when shipping dry ice  # noqa: E501

        :param dry_ice_total_net_weight: The dry_ice_total_net_weight of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :type: float
        """

        self._dry_ice_total_net_weight = dry_ice_total_net_weight

    @property
    def custom_description(self):
        """Gets the custom_description of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501

        The customDescription node contains the customized Dangerous Goods statement to declare contents accurately. The customDescription node value will be displayed in the Transport Label and Waybill Document, replacing the default IATA Dangerous Goods statement constructed based on contentId node.<BR>            Multiple customDescription nodes from multiple dangerousGoods nodes will be concatenated using comma separator with combined maximum limit of 200 characters.<BR>            <BR>            It is recommended to use customDescription for entire shipment for each dangerousGoods to fully utilize customDescription printout in Transport Label and Waybill Document.<BR>            <BR>            Note: For 'customDescription' usage, ensure all 'dangerousGoods' segments are including the 'customDescription' field value. Any of the dangerousGoods does not provide with customDescription field value will be ignored from printing in Transport Label and Waybill Document.    # noqa: E501

        :return: The custom_description of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :rtype: str
        """
        return self._custom_description

    @custom_description.setter
    def custom_description(self, custom_description):
        """Sets the custom_description of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.

        The customDescription node contains the customized Dangerous Goods statement to declare contents accurately. The customDescription node value will be displayed in the Transport Label and Waybill Document, replacing the default IATA Dangerous Goods statement constructed based on contentId node.<BR>            Multiple customDescription nodes from multiple dangerousGoods nodes will be concatenated using comma separator with combined maximum limit of 200 characters.<BR>            <BR>            It is recommended to use customDescription for entire shipment for each dangerousGoods to fully utilize customDescription printout in Transport Label and Waybill Document.<BR>            <BR>            Note: For 'customDescription' usage, ensure all 'dangerousGoods' segments are including the 'customDescription' field value. Any of the dangerousGoods does not provide with customDescription field value will be ignored from printing in Transport Label and Waybill Document.    # noqa: E501

        :param custom_description: The custom_description of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :type: str
        """

        self._custom_description = custom_description

    @property
    def un_codes(self):
        """Gets the un_codes of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501

        Please enter UN code(s)  # noqa: E501

        :return: The un_codes of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :rtype: list[str]
        """
        return self._un_codes

    @un_codes.setter
    def un_codes(self, un_codes):
        """Sets the un_codes of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.

        Please enter UN code(s)  # noqa: E501

        :param un_codes: The un_codes of this SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods.  # noqa: E501
        :type: list[str]
        """

        self._un_codes = un_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
