# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressPackageLabelBarcodes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'str',
        'symbology_code': 'str',
        'content': 'str',
        'text_below_barcode': 'str'
    }

    attribute_map = {
        'position': 'position',
        'symbology_code': 'symbologyCode',
        'content': 'content',
        'text_below_barcode': 'textBelowBarcode'
    }

    def __init__(self, position=None, symbology_code=None, content=None, text_below_barcode=None):  # noqa: E501
        """SupermodelIoLogisticsExpressPackageLabelBarcodes - a model defined in Swagger"""  # noqa: E501
        self._position = None
        self._symbology_code = None
        self._content = None
        self._text_below_barcode = None
        self.discriminator = None
        self.position = position
        self.symbology_code = symbology_code
        self.content = content
        self.text_below_barcode = text_below_barcode

    @property
    def position(self):
        """Gets the position of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501

        Position of the bespoke barcode  # noqa: E501

        :return: The position of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SupermodelIoLogisticsExpressPackageLabelBarcodes.

        Position of the bespoke barcode  # noqa: E501

        :param position: The position of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :type: str
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501
        allowed_values = ["left", "right"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"  # noqa: E501
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def symbology_code(self):
        """Gets the symbology_code of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501

        Please enter valid Symbology code  # noqa: E501

        :return: The symbology_code of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :rtype: str
        """
        return self._symbology_code

    @symbology_code.setter
    def symbology_code(self, symbology_code):
        """Sets the symbology_code of this SupermodelIoLogisticsExpressPackageLabelBarcodes.

        Please enter valid Symbology code  # noqa: E501

        :param symbology_code: The symbology_code of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :type: str
        """
        if symbology_code is None:
            raise ValueError("Invalid value for `symbology_code`, must not be `None`")  # noqa: E501
        allowed_values = ["93", "39", "128"]  # noqa: E501
        if symbology_code not in allowed_values:
            raise ValueError(
                "Invalid value for `symbology_code` ({0}), must be one of {1}"  # noqa: E501
                .format(symbology_code, allowed_values)
            )

        self._symbology_code = symbology_code

    @property
    def content(self):
        """Gets the content of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501

        Please enter barcode content  # noqa: E501

        :return: The content of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SupermodelIoLogisticsExpressPackageLabelBarcodes.

        Please enter barcode content  # noqa: E501

        :param content: The content of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def text_below_barcode(self):
        """Gets the text_below_barcode of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501

        Please enter text below customer barcode  # noqa: E501

        :return: The text_below_barcode of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :rtype: str
        """
        return self._text_below_barcode

    @text_below_barcode.setter
    def text_below_barcode(self, text_below_barcode):
        """Sets the text_below_barcode of this SupermodelIoLogisticsExpressPackageLabelBarcodes.

        Please enter text below customer barcode  # noqa: E501

        :param text_below_barcode: The text_below_barcode of this SupermodelIoLogisticsExpressPackageLabelBarcodes.  # noqa: E501
        :type: str
        """
        if text_below_barcode is None:
            raise ValueError("Invalid value for `text_below_barcode`, must not be `None`")  # noqa: E501

        self._text_below_barcode = text_below_barcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressPackageLabelBarcodes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressPackageLabelBarcodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
