# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Partner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'partner_id': 'str',
        'partner_name': 'str',
        'partner_type_code': 'str',
        'promotion': 'Promotion'
    }

    attribute_map = {
        'partner_id': 'partnerId',
        'partner_name': 'partnerName',
        'partner_type_code': 'partnerTypeCode',
        'promotion': 'promotion'
    }

    def __init__(self, partner_id=None, partner_name=None, partner_type_code=None, promotion=None):  # noqa: E501
        """Partner - a model defined in Swagger"""  # noqa: E501
        self._partner_id = None
        self._partner_name = None
        self._partner_type_code = None
        self._promotion = None
        self.discriminator = None
        if partner_id is not None:
            self.partner_id = partner_id
        if partner_name is not None:
            self.partner_name = partner_name
        if partner_type_code is not None:
            self.partner_type_code = partner_type_code
        if promotion is not None:
            self.promotion = promotion

    @property
    def partner_id(self):
        """Gets the partner_id of this Partner.  # noqa: E501

        ID of a partner  # noqa: E501

        :return: The partner_id of this Partner.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this Partner.

        ID of a partner  # noqa: E501

        :param partner_id: The partner_id of this Partner.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def partner_name(self):
        """Gets the partner_name of this Partner.  # noqa: E501

        Name of a partner  # noqa: E501

        :return: The partner_name of this Partner.  # noqa: E501
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this Partner.

        Name of a partner  # noqa: E501

        :param partner_name: The partner_name of this Partner.  # noqa: E501
        :type: str
        """

        self._partner_name = partner_name

    @property
    def partner_type_code(self):
        """Gets the partner_type_code of this Partner.  # noqa: E501

        Code of a partner  # noqa: E501

        :return: The partner_type_code of this Partner.  # noqa: E501
        :rtype: str
        """
        return self._partner_type_code

    @partner_type_code.setter
    def partner_type_code(self, partner_type_code):
        """Sets the partner_type_code of this Partner.

        Code of a partner  # noqa: E501

        :param partner_type_code: The partner_type_code of this Partner.  # noqa: E501
        :type: str
        """

        self._partner_type_code = partner_type_code

    @property
    def promotion(self):
        """Gets the promotion of this Partner.  # noqa: E501


        :return: The promotion of this Partner.  # noqa: E501
        :rtype: Promotion
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """Sets the promotion of this Partner.


        :param promotion: The promotion of this Partner.  # noqa: E501
        :type: Promotion
        """

        self._promotion = promotion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Partner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Partner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
