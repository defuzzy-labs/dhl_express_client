# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressIdentifierResponseIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_code': 'str',
        'list': 'list[str]'
    }

    attribute_map = {
        'type_code': 'typeCode',
        'list': 'list'
    }

    def __init__(self, type_code=None, list=None):  # noqa: E501
        """SupermodelIoLogisticsExpressIdentifierResponseIdentifiers - a model defined in Swagger"""  # noqa: E501
        self._type_code = None
        self._list = None
        self.discriminator = None
        self.type_code = type_code
        self.list = list

    @property
    def type_code(self):
        """Gets the type_code of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.  # noqa: E501

        Type of identifier  # noqa: E501

        :return: The type_code of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.

        Type of identifier  # noqa: E501

        :param type_code: The type_code of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.  # noqa: E501
        :type: str
        """
        if type_code is None:
            raise ValueError("Invalid value for `type_code`, must not be `None`")  # noqa: E501

        self._type_code = type_code

    @property
    def list(self):
        """Gets the list of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.  # noqa: E501

        List of identifers  # noqa: E501

        :return: The list of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.  # noqa: E501
        :rtype: list[str]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.

        List of identifers  # noqa: E501

        :param list: The list of this SupermodelIoLogisticsExpressIdentifierResponseIdentifiers.  # noqa: E501
        :type: list[str]
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")  # noqa: E501

        self._list = list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressIdentifierResponseIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressIdentifierResponseIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
