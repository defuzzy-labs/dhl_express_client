# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'import_customs_duty_value': 'float',
        'import_taxes_value': 'float',
        'total_with_import_duties_and_taxes': 'float'
    }

    attribute_map = {
        'import_customs_duty_value': 'importCustomsDutyValue',
        'import_taxes_value': 'importTaxesValue',
        'total_with_import_duties_and_taxes': 'totalWithImportDutiesAndTaxes'
    }

    def __init__(self, import_customs_duty_value=None, import_taxes_value=None, total_with_import_duties_and_taxes=None):  # noqa: E501
        """SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues - a model defined in Swagger"""  # noqa: E501
        self._import_customs_duty_value = None
        self._import_taxes_value = None
        self._total_with_import_duties_and_taxes = None
        self.discriminator = None
        if import_customs_duty_value is not None:
            self.import_customs_duty_value = import_customs_duty_value
        if import_taxes_value is not None:
            self.import_taxes_value = import_taxes_value
        if total_with_import_duties_and_taxes is not None:
            self.total_with_import_duties_and_taxes = total_with_import_duties_and_taxes

    @property
    def import_customs_duty_value(self):
        """Gets the import_customs_duty_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501

        Please provide the pre-calculated import customs duties value for the shipment  # noqa: E501

        :return: The import_customs_duty_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501
        :rtype: float
        """
        return self._import_customs_duty_value

    @import_customs_duty_value.setter
    def import_customs_duty_value(self, import_customs_duty_value):
        """Sets the import_customs_duty_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.

        Please provide the pre-calculated import customs duties value for the shipment  # noqa: E501

        :param import_customs_duty_value: The import_customs_duty_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501
        :type: float
        """

        self._import_customs_duty_value = import_customs_duty_value

    @property
    def import_taxes_value(self):
        """Gets the import_taxes_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501

        Please provide the pre-calculated import taxes (VAT/GST) value for the shipment  # noqa: E501

        :return: The import_taxes_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501
        :rtype: float
        """
        return self._import_taxes_value

    @import_taxes_value.setter
    def import_taxes_value(self, import_taxes_value):
        """Sets the import_taxes_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.

        Please provide the pre-calculated import taxes (VAT/GST) value for the shipment  # noqa: E501

        :param import_taxes_value: The import_taxes_value of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501
        :type: float
        """

        self._import_taxes_value = import_taxes_value

    @property
    def total_with_import_duties_and_taxes(self):
        """Gets the total_with_import_duties_and_taxes of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501

        Please provide pre-calculated total of all line items plus additional charges plus indicativeCustomsValues  # noqa: E501

        :return: The total_with_import_duties_and_taxes of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501
        :rtype: float
        """
        return self._total_with_import_duties_and_taxes

    @total_with_import_duties_and_taxes.setter
    def total_with_import_duties_and_taxes(self, total_with_import_duties_and_taxes):
        """Sets the total_with_import_duties_and_taxes of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.

        Please provide pre-calculated total of all line items plus additional charges plus indicativeCustomsValues  # noqa: E501

        :param total_with_import_duties_and_taxes: The total_with_import_duties_and_taxes of this SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues.  # noqa: E501
        :type: float
        """

        self._total_with_import_duties_and_taxes = total_with_import_duties_and_taxes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressExportDeclarationInvoiceIndicativeCustomsValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
