# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Suggestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'value': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'country_code': 'str',
        'place_id': 'str',
        'provider_id': 'str'
    }

    attribute_map = {
        'label': 'label',
        'value': 'value',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'country_code': 'countryCode',
        'place_id': 'placeId',
        'provider_id': 'providerId'
    }

    def __init__(self, label=None, value=None, latitude=None, longitude=None, country_code=None, place_id=None, provider_id=None):  # noqa: E501
        """Suggestion - a model defined in Swagger"""  # noqa: E501
        self._label = None
        self._value = None
        self._latitude = None
        self._longitude = None
        self._country_code = None
        self._place_id = None
        self._provider_id = None
        self.discriminator = None
        if label is not None:
            self.label = label
        if value is not None:
            self.value = value
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if country_code is not None:
            self.country_code = country_code
        if place_id is not None:
            self.place_id = place_id
        if provider_id is not None:
            self.provider_id = provider_id

    @property
    def label(self):
        """Gets the label of this Suggestion.  # noqa: E501

        Always holds null value  # noqa: E501

        :return: The label of this Suggestion.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Suggestion.

        Always holds null value  # noqa: E501

        :param label: The label of this Suggestion.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def value(self):
        """Gets the value of this Suggestion.  # noqa: E501

        Always holds null value  # noqa: E501

        :return: The value of this Suggestion.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Suggestion.

        Always holds null value  # noqa: E501

        :param value: The value of this Suggestion.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def latitude(self):
        """Gets the latitude of this Suggestion.  # noqa: E501

        Latitude of the geocoded search address (used for GREF web service search)  # noqa: E501

        :return: The latitude of this Suggestion.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Suggestion.

        Latitude of the geocoded search address (used for GREF web service search)  # noqa: E501

        :param latitude: The latitude of this Suggestion.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Suggestion.  # noqa: E501

        Longitude of the geocoded search address (used for GREF web service search)  # noqa: E501

        :return: The longitude of this Suggestion.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Suggestion.

        Longitude of the geocoded search address (used for GREF web service search)  # noqa: E501

        :param longitude: The longitude of this Suggestion.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def country_code(self):
        """Gets the country_code of this Suggestion.  # noqa: E501

        Country code of the search address  # noqa: E501

        :return: The country_code of this Suggestion.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Suggestion.

        Country code of the search address  # noqa: E501

        :param country_code: The country_code of this Suggestion.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def place_id(self):
        """Gets the place_id of this Suggestion.  # noqa: E501

        Place id of the search address  # noqa: E501

        :return: The place_id of this Suggestion.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this Suggestion.

        Place id of the search address  # noqa: E501

        :param place_id: The place_id of this Suggestion.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def provider_id(self):
        """Gets the provider_id of this Suggestion.  # noqa: E501

        Provider id of the search address  # noqa: E501

        :return: The provider_id of this Suggestion.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Suggestion.

        Provider id of the search address  # noqa: E501

        :param provider_id: The provider_id of this Suggestion.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Suggestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Suggestion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
