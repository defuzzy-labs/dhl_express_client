# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressValueAddedServices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_code': 'str',
        'value': 'float',
        'currency': 'str',
        'method': 'str',
        'dangerous_goods': 'list[SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods]'
    }

    attribute_map = {
        'service_code': 'serviceCode',
        'value': 'value',
        'currency': 'currency',
        'method': 'method',
        'dangerous_goods': 'dangerousGoods'
    }

    def __init__(self, service_code=None, value=None, currency=None, method=None, dangerous_goods=None):  # noqa: E501
        """SupermodelIoLogisticsExpressValueAddedServices - a model defined in Swagger"""  # noqa: E501
        self._service_code = None
        self._value = None
        self._currency = None
        self._method = None
        self._dangerous_goods = None
        self.discriminator = None
        self.service_code = service_code
        if value is not None:
            self.value = value
        if currency is not None:
            self.currency = currency
        if method is not None:
            self.method = method
        if dangerous_goods is not None:
            self.dangerous_goods = dangerous_goods

    @property
    def service_code(self):
        """Gets the service_code of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501

        Please enter DHL Express value added service code. For detailed list of all available service codes for your prospect shipment please invoke GET /products or GET /rates  # noqa: E501

        :return: The service_code of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this SupermodelIoLogisticsExpressValueAddedServices.

        Please enter DHL Express value added service code. For detailed list of all available service codes for your prospect shipment please invoke GET /products or GET /rates  # noqa: E501

        :param service_code: The service_code of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def value(self):
        """Gets the value of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501

        Please enter monetary value of service (e.g. Insured Value)  # noqa: E501

        :return: The value of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SupermodelIoLogisticsExpressValueAddedServices.

        Please enter monetary value of service (e.g. Insured Value)  # noqa: E501

        :param value: The value of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501

        Please enter currency code (e.g. Insured Value currency code)  # noqa: E501

        :return: The currency of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SupermodelIoLogisticsExpressValueAddedServices.

        Please enter currency code (e.g. Insured Value currency code)  # noqa: E501

        :param currency: The currency of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def method(self):
        """Gets the method of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501

        Payment method code (e.g. Cash)  # noqa: E501

        :return: The method of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SupermodelIoLogisticsExpressValueAddedServices.

        Payment method code (e.g. Cash)  # noqa: E501

        :param method: The method of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def dangerous_goods(self):
        """Gets the dangerous_goods of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501

        The DangerousGoods section indicates if there is dangerous good content within the shipment. <BR> The ContentID node contains the Content ID for Dangerous Good classification. <BR> It is required to provide the dangerous good Content ID for every dangerous good special service provided, and vice versa. <BR> For the complete list of dangerous goods Content IDs and dangerous goods special services combinations, refer to Reference Data Guide section 5. valueAddedServicesDefinition\\\\dangerousGoods. <BR> Note: Please contact your DHL Express IT representative if additional assistance is required.<BR><BR> For dangerous goods shipment with Dry Ice example: UN1845 (Content ID: 901), additional node must be populated 'dryIceTotalNetWeight.'<BR> For dangerous goods shipment with 'Excepted Quantities', additional node must be populated 'unCodes'. Few scenarios guideline to prepare a Dangerous Goods shipment for:<BR><BR> A) Dry Ice: <BR> 1.'serviceCode' element must contain value of 'HC'<BR> 2.'contentID' element consists of '901'<BR> 3.'dryIceTotalNetWeight' element consists of the total net weight of the dry ice in 'unitofMeasurement' <BR><BR> B) Lithium Battery: <BR> 1.'serviceType' element must contain value of 'HD', 'HM', 'HV' or 'HW'<BR> 2.'contentID' element consists of '966', '969', '967', '970' respectively<BR><BR> C) Excepted Quantities:<BR> 1.'serviceCode' element must contain value of 'HH'<BR> 2.'contentID' element consists of 'E01<BR> 3.'unCodes' element consists of the UN code associate with it.<BR>  # noqa: E501

        :return: The dangerous_goods of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods]
        """
        return self._dangerous_goods

    @dangerous_goods.setter
    def dangerous_goods(self, dangerous_goods):
        """Sets the dangerous_goods of this SupermodelIoLogisticsExpressValueAddedServices.

        The DangerousGoods section indicates if there is dangerous good content within the shipment. <BR> The ContentID node contains the Content ID for Dangerous Good classification. <BR> It is required to provide the dangerous good Content ID for every dangerous good special service provided, and vice versa. <BR> For the complete list of dangerous goods Content IDs and dangerous goods special services combinations, refer to Reference Data Guide section 5. valueAddedServicesDefinition\\\\dangerousGoods. <BR> Note: Please contact your DHL Express IT representative if additional assistance is required.<BR><BR> For dangerous goods shipment with Dry Ice example: UN1845 (Content ID: 901), additional node must be populated 'dryIceTotalNetWeight.'<BR> For dangerous goods shipment with 'Excepted Quantities', additional node must be populated 'unCodes'. Few scenarios guideline to prepare a Dangerous Goods shipment for:<BR><BR> A) Dry Ice: <BR> 1.'serviceCode' element must contain value of 'HC'<BR> 2.'contentID' element consists of '901'<BR> 3.'dryIceTotalNetWeight' element consists of the total net weight of the dry ice in 'unitofMeasurement' <BR><BR> B) Lithium Battery: <BR> 1.'serviceType' element must contain value of 'HD', 'HM', 'HV' or 'HW'<BR> 2.'contentID' element consists of '966', '969', '967', '970' respectively<BR><BR> C) Excepted Quantities:<BR> 1.'serviceCode' element must contain value of 'HH'<BR> 2.'contentID' element consists of 'E01<BR> 3.'unCodes' element consists of the UN code associate with it.<BR>  # noqa: E501

        :param dangerous_goods: The dangerous_goods of this SupermodelIoLogisticsExpressValueAddedServices.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressValueAddedServicesDangerousGoods]
        """

        self._dangerous_goods = dangerous_goods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressValueAddedServices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressValueAddedServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
