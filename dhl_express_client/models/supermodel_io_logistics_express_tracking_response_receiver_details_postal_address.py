# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city_name': 'str',
        'county_name': 'str',
        'postal_code': 'str',
        'province_code': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'city_name': 'cityName',
        'county_name': 'countyName',
        'postal_code': 'postalCode',
        'province_code': 'provinceCode',
        'country_code': 'countryCode'
    }

    def __init__(self, city_name=None, county_name=None, postal_code=None, province_code=None, country_code=None):  # noqa: E501
        """SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress - a model defined in Swagger"""  # noqa: E501
        self._city_name = None
        self._county_name = None
        self._postal_code = None
        self._province_code = None
        self._country_code = None
        self.discriminator = None
        if city_name is not None:
            self.city_name = city_name
        if county_name is not None:
            self.county_name = county_name
        if postal_code is not None:
            self.postal_code = postal_code
        if province_code is not None:
            self.province_code = province_code
        if country_code is not None:
            self.country_code = country_code

    @property
    def city_name(self):
        """Gets the city_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.  # noqa: E501

        :return: The city_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.  # noqa: E501

        :param city_name: The city_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :type: str
        """

        self._city_name = city_name

    @property
    def county_name(self):
        """Gets the county_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.  # noqa: E501

        :return: The county_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._county_name

    @county_name.setter
    def county_name(self, county_name):
        """Sets the county_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.  # noqa: E501

        :param county_name: The county_name of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :type: str
        """

        self._county_name = county_name

    @property
    def postal_code(self):
        """Gets the postal_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.  # noqa: E501

        :return: The postal_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.  # noqa: E501

        :param postal_code: The postal_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def province_code(self):
        """Gets the province_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.          # noqa: E501

        :return: The province_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._province_code

    @province_code.setter
    def province_code(self, province_code):
        """Sets the province_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.

        Note: This field may be intentionally left empty in accordance with the General Data Protection Regulation (GDPR) requirements.          # noqa: E501

        :param province_code: The province_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :type: str
        """

        self._province_code = province_code

    @property
    def country_code(self):
        """Gets the country_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501


        :return: The country_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.


        :param country_code: The country_code of this SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressTrackingResponseReceiverDetailsPostalAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
