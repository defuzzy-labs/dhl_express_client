# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DateTimeFieldType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'duration_type': 'DurationFieldType',
        'range_duration_type': 'DurationFieldType'
    }

    attribute_map = {
        'name': 'name',
        'duration_type': 'durationType',
        'range_duration_type': 'rangeDurationType'
    }

    def __init__(self, name=None, duration_type=None, range_duration_type=None):  # noqa: E501
        """DateTimeFieldType - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._duration_type = None
        self._range_duration_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if duration_type is not None:
            self.duration_type = duration_type
        if range_duration_type is not None:
            self.range_duration_type = range_duration_type

    @property
    def name(self):
        """Gets the name of this DateTimeFieldType.  # noqa: E501


        :return: The name of this DateTimeFieldType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DateTimeFieldType.


        :param name: The name of this DateTimeFieldType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def duration_type(self):
        """Gets the duration_type of this DateTimeFieldType.  # noqa: E501


        :return: The duration_type of this DateTimeFieldType.  # noqa: E501
        :rtype: DurationFieldType
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this DateTimeFieldType.


        :param duration_type: The duration_type of this DateTimeFieldType.  # noqa: E501
        :type: DurationFieldType
        """

        self._duration_type = duration_type

    @property
    def range_duration_type(self):
        """Gets the range_duration_type of this DateTimeFieldType.  # noqa: E501


        :return: The range_duration_type of this DateTimeFieldType.  # noqa: E501
        :rtype: DurationFieldType
        """
        return self._range_duration_type

    @range_duration_type.setter
    def range_duration_type(self, range_duration_type):
        """Sets the range_duration_type of this DateTimeFieldType.


        :param range_duration_type: The range_duration_type of this DateTimeFieldType.  # noqa: E501
        :type: DurationFieldType
        """

        self._range_duration_type = range_duration_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DateTimeFieldType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTimeFieldType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
