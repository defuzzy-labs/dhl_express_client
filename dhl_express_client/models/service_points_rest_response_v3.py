# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicePointsRestResponseV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'RestResponseStatus',
        'search_address': 'str',
        'search_location': 'GeoLocation',
        'map_culture': 'str',
        'map_language': 'str',
        'service_points': 'list[ServicePoint]',
        'messages': 'list[str]',
        'translations': 'Translations',
        'lite_mode': 'bool',
        'promotion': 'Promotion'
    }

    attribute_map = {
        'status': 'status',
        'search_address': 'searchAddress',
        'search_location': 'searchLocation',
        'map_culture': 'mapCulture',
        'map_language': 'mapLanguage',
        'service_points': 'servicePoints',
        'messages': 'messages',
        'translations': 'translations',
        'lite_mode': 'liteMode',
        'promotion': 'promotion'
    }

    def __init__(self, status=None, search_address=None, search_location=None, map_culture=None, map_language=None, service_points=None, messages=None, translations=None, lite_mode=None, promotion=None):  # noqa: E501
        """ServicePointsRestResponseV3 - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._search_address = None
        self._search_location = None
        self._map_culture = None
        self._map_language = None
        self._service_points = None
        self._messages = None
        self._translations = None
        self._lite_mode = None
        self._promotion = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if search_address is not None:
            self.search_address = search_address
        if search_location is not None:
            self.search_location = search_location
        if map_culture is not None:
            self.map_culture = map_culture
        if map_language is not None:
            self.map_language = map_language
        if service_points is not None:
            self.service_points = service_points
        if messages is not None:
            self.messages = messages
        if translations is not None:
            self.translations = translations
        if lite_mode is not None:
            self.lite_mode = lite_mode
        if promotion is not None:
            self.promotion = promotion

    @property
    def status(self):
        """Gets the status of this ServicePointsRestResponseV3.  # noqa: E501


        :return: The status of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: RestResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServicePointsRestResponseV3.


        :param status: The status of this ServicePointsRestResponseV3.  # noqa: E501
        :type: RestResponseStatus
        """

        self._status = status

    @property
    def search_address(self):
        """Gets the search_address of this ServicePointsRestResponseV3.  # noqa: E501

        The address used for the search (value of request parameter 'address')  # noqa: E501

        :return: The search_address of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._search_address

    @search_address.setter
    def search_address(self, search_address):
        """Sets the search_address of this ServicePointsRestResponseV3.

        The address used for the search (value of request parameter 'address')  # noqa: E501

        :param search_address: The search_address of this ServicePointsRestResponseV3.  # noqa: E501
        :type: str
        """

        self._search_address = search_address

    @property
    def search_location(self):
        """Gets the search_location of this ServicePointsRestResponseV3.  # noqa: E501


        :return: The search_location of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: GeoLocation
        """
        return self._search_location

    @search_location.setter
    def search_location(self, search_location):
        """Sets the search_location of this ServicePointsRestResponseV3.


        :param search_location: The search_location of this ServicePointsRestResponseV3.  # noqa: E501
        :type: GeoLocation
        """

        self._search_location = search_location

    @property
    def map_culture(self):
        """Gets the map_culture of this ServicePointsRestResponseV3.  # noqa: E501

        The culture parameter for Bing Maps API (derived from the country parameter in the request)  # noqa: E501

        :return: The map_culture of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._map_culture

    @map_culture.setter
    def map_culture(self, map_culture):
        """Sets the map_culture of this ServicePointsRestResponseV3.

        The culture parameter for Bing Maps API (derived from the country parameter in the request)  # noqa: E501

        :param map_culture: The map_culture of this ServicePointsRestResponseV3.  # noqa: E501
        :type: str
        """

        self._map_culture = map_culture

    @property
    def map_language(self):
        """Gets the map_language of this ServicePointsRestResponseV3.  # noqa: E501

        Map Culture Used for Third party Maps  # noqa: E501

        :return: The map_language of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._map_language

    @map_language.setter
    def map_language(self, map_language):
        """Sets the map_language of this ServicePointsRestResponseV3.

        Map Culture Used for Third party Maps  # noqa: E501

        :param map_language: The map_language of this ServicePointsRestResponseV3.  # noqa: E501
        :type: str
        """

        self._map_language = map_language

    @property
    def service_points(self):
        """Gets the service_points of this ServicePointsRestResponseV3.  # noqa: E501

        Array of the found Service Points. Each Service Point entity contains details about the service point.  # noqa: E501

        :return: The service_points of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: list[ServicePoint]
        """
        return self._service_points

    @service_points.setter
    def service_points(self, service_points):
        """Sets the service_points of this ServicePointsRestResponseV3.

        Array of the found Service Points. Each Service Point entity contains details about the service point.  # noqa: E501

        :param service_points: The service_points of this ServicePointsRestResponseV3.  # noqa: E501
        :type: list[ServicePoint]
        """

        self._service_points = service_points

    @property
    def messages(self):
        """Gets the messages of this ServicePointsRestResponseV3.  # noqa: E501

        Array of strings. Contains information messages  - e.g. required language is not available, result was filtered due to incoming holidays.  # noqa: E501

        :return: The messages of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ServicePointsRestResponseV3.

        Array of strings. Contains information messages  - e.g. required language is not available, result was filtered due to incoming holidays.  # noqa: E501

        :param messages: The messages of this ServicePointsRestResponseV3.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def translations(self):
        """Gets the translations of this ServicePointsRestResponseV3.  # noqa: E501


        :return: The translations of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: Translations
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this ServicePointsRestResponseV3.


        :param translations: The translations of this ServicePointsRestResponseV3.  # noqa: E501
        :type: Translations
        """

        self._translations = translations

    @property
    def lite_mode(self):
        """Gets the lite_mode of this ServicePointsRestResponseV3.  # noqa: E501

        Indicates whether lite mode is acitvated or not.  # noqa: E501

        :return: The lite_mode of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: bool
        """
        return self._lite_mode

    @lite_mode.setter
    def lite_mode(self, lite_mode):
        """Sets the lite_mode of this ServicePointsRestResponseV3.

        Indicates whether lite mode is acitvated or not.  # noqa: E501

        :param lite_mode: The lite_mode of this ServicePointsRestResponseV3.  # noqa: E501
        :type: bool
        """

        self._lite_mode = lite_mode

    @property
    def promotion(self):
        """Gets the promotion of this ServicePointsRestResponseV3.  # noqa: E501


        :return: The promotion of this ServicePointsRestResponseV3.  # noqa: E501
        :rtype: Promotion
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """Sets the promotion of this ServicePointsRestResponseV3.


        :param promotion: The promotion of this ServicePointsRestResponseV3.  # noqa: E501
        :type: Promotion
        """

        self._promotion = promotion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePointsRestResponseV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePointsRestResponseV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
