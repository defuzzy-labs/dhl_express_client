# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressDocumentImagesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_code': 'str',
        'image_format': 'str',
        'content': 'str'
    }

    attribute_map = {
        'type_code': 'typeCode',
        'image_format': 'imageFormat',
        'content': 'content'
    }

    def __init__(self, type_code='INV', image_format='PDF', content=None):  # noqa: E501
        """SupermodelIoLogisticsExpressDocumentImagesInner - a model defined in Swagger"""  # noqa: E501
        self._type_code = None
        self._image_format = None
        self._content = None
        self.discriminator = None
        if type_code is not None:
            self.type_code = type_code
        if image_format is not None:
            self.image_format = image_format
        self.content = content

    @property
    def type_code(self):
        """Gets the type_code of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501

        Please provide correct document type you wish to upload<BR>        <BR>        Possible values;<BR>        INV, Invoice<BR>        PNV, Proforma<BR>        COO, Certificate of Origin<BR>        NAF, Nafta Certificate of Origin<BR>        CIN, Commercial Invoice<BR>        DCL, Custom Declaration<BR>        AWB, Air Waybill and Waybill Document  # noqa: E501

        :return: The type_code of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this SupermodelIoLogisticsExpressDocumentImagesInner.

        Please provide correct document type you wish to upload<BR>        <BR>        Possible values;<BR>        INV, Invoice<BR>        PNV, Proforma<BR>        COO, Certificate of Origin<BR>        NAF, Nafta Certificate of Origin<BR>        CIN, Commercial Invoice<BR>        DCL, Custom Declaration<BR>        AWB, Air Waybill and Waybill Document  # noqa: E501

        :param type_code: The type_code of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501
        :type: str
        """
        allowed_values = ["INV", "PNV", "COO", "CIN", "DCL", "AWB", "NAF"]  # noqa: E501
        if type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(type_code, allowed_values)
            )

        self._type_code = type_code

    @property
    def image_format(self):
        """Gets the image_format of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501

        Please provide the image file format for the document you want to upload  # noqa: E501

        :return: The image_format of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501
        :rtype: str
        """
        return self._image_format

    @image_format.setter
    def image_format(self, image_format):
        """Sets the image_format of this SupermodelIoLogisticsExpressDocumentImagesInner.

        Please provide the image file format for the document you want to upload  # noqa: E501

        :param image_format: The image_format of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501
        :type: str
        """
        allowed_values = ["PDF", "PNG", "GIF", "TIFF", "JPEG"]  # noqa: E501
        if image_format not in allowed_values:
            raise ValueError(
                "Invalid value for `image_format` ({0}), must be one of {1}"  # noqa: E501
                .format(image_format, allowed_values)
            )

        self._image_format = image_format

    @property
    def content(self):
        """Gets the content of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501

        Please provide the base64 encoded document  # noqa: E501

        :return: The content of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SupermodelIoLogisticsExpressDocumentImagesInner.

        Please provide the base64 encoded document  # noqa: E501

        :param content: The content of this SupermodelIoLogisticsExpressDocumentImagesInner.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressDocumentImagesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressDocumentImagesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
