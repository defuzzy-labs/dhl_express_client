# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'address_line3': 'str',
        'street': 'str',
        'house_number': 'str',
        'additional_info': 'str',
        'city': 'str',
        'zip_code': 'str',
        'state': 'str',
        'country': 'str',
        'dhl_country': 'str',
        'country_division_code': 'str',
        'country_division_code_type': 'str',
        'html': 'str'
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'address_line3': 'addressLine3',
        'street': 'street',
        'house_number': 'houseNumber',
        'additional_info': 'additionalInfo',
        'city': 'city',
        'zip_code': 'zipCode',
        'state': 'state',
        'country': 'country',
        'dhl_country': 'dhlCountry',
        'country_division_code': 'countryDivisionCode',
        'country_division_code_type': 'countryDivisionCodeType',
        'html': 'html'
    }

    def __init__(self, address_line1=None, address_line2=None, address_line3=None, street=None, house_number=None, additional_info=None, city=None, zip_code=None, state=None, country=None, dhl_country=None, country_division_code=None, country_division_code_type=None, html=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._address_line1 = None
        self._address_line2 = None
        self._address_line3 = None
        self._street = None
        self._house_number = None
        self._additional_info = None
        self._city = None
        self._zip_code = None
        self._state = None
        self._country = None
        self._dhl_country = None
        self._country_division_code = None
        self._country_division_code_type = None
        self._html = None
        self.discriminator = None
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if address_line3 is not None:
            self.address_line3 = address_line3
        if street is not None:
            self.street = street
        if house_number is not None:
            self.house_number = house_number
        if additional_info is not None:
            self.additional_info = additional_info
        if city is not None:
            self.city = city
        if zip_code is not None:
            self.zip_code = zip_code
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if dhl_country is not None:
            self.dhl_country = dhl_country
        if country_division_code is not None:
            self.country_division_code = country_division_code
        if country_division_code_type is not None:
            self.country_division_code_type = country_division_code_type
        if html is not None:
            self.html = html

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501

        First line of the facility address  # noqa: E501

        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        First line of the facility address  # noqa: E501

        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501

        Second line of the facility address (only present if field is filled in GREF database)  # noqa: E501

        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        Second line of the facility address (only present if field is filled in GREF database)  # noqa: E501

        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.  # noqa: E501

        Third line of the facility address (only present if field is filled in GREF database)  # noqa: E501

        :return: The address_line3 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.

        Third line of the facility address (only present if field is filled in GREF database)  # noqa: E501

        :param address_line3: The address_line3 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def street(self):
        """Gets the street of this Address.  # noqa: E501

        Street details in facility address  # noqa: E501

        :return: The street of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Street details in facility address  # noqa: E501

        :param street: The street of this Address.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def house_number(self):
        """Gets the house_number of this Address.  # noqa: E501

        House number in facility address  # noqa: E501

        :return: The house_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this Address.

        House number in facility address  # noqa: E501

        :param house_number: The house_number of this Address.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    @property
    def additional_info(self):
        """Gets the additional_info of this Address.  # noqa: E501

        Additional details in facility address  # noqa: E501

        :return: The additional_info of this Address.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Address.

        Additional details in facility address  # noqa: E501

        :param additional_info: The additional_info of this Address.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

        Facility city  # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Facility city  # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip_code(self):
        """Gets the zip_code of this Address.  # noqa: E501

        Zip code of the facility  # noqa: E501

        :return: The zip_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Address.

        Zip code of the facility  # noqa: E501

        :param zip_code: The zip_code of this Address.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def state(self):
        """Gets the state of this Address.  # noqa: E501

        State  # noqa: E501

        :return: The state of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        State  # noqa: E501

        :param state: The state of this Address.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501

        Country  # noqa: E501

        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Country  # noqa: E501

        :param country: The country of this Address.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def dhl_country(self):
        """Gets the dhl_country of this Address.  # noqa: E501

        DHL country  # noqa: E501

        :return: The dhl_country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._dhl_country

    @dhl_country.setter
    def dhl_country(self, dhl_country):
        """Sets the dhl_country of this Address.

        DHL country  # noqa: E501

        :param dhl_country: The dhl_country of this Address.  # noqa: E501
        :type: str
        """

        self._dhl_country = dhl_country

    @property
    def country_division_code(self):
        """Gets the country_division_code of this Address.  # noqa: E501

        Country Division Code  # noqa: E501

        :return: The country_division_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_division_code

    @country_division_code.setter
    def country_division_code(self, country_division_code):
        """Sets the country_division_code of this Address.

        Country Division Code  # noqa: E501

        :param country_division_code: The country_division_code of this Address.  # noqa: E501
        :type: str
        """

        self._country_division_code = country_division_code

    @property
    def country_division_code_type(self):
        """Gets the country_division_code_type of this Address.  # noqa: E501

        Enumeration (State, Province)  # noqa: E501

        :return: The country_division_code_type of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_division_code_type

    @country_division_code_type.setter
    def country_division_code_type(self, country_division_code_type):
        """Sets the country_division_code_type of this Address.

        Enumeration (State, Province)  # noqa: E501

        :param country_division_code_type: The country_division_code_type of this Address.  # noqa: E501
        :type: str
        """

        self._country_division_code_type = country_division_code_type

    @property
    def html(self):
        """Gets the html of this Address.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The html of this Address.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Address.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param html: The html of this Address.  # noqa: E501
        :type: str
        """

        self._html = html

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
