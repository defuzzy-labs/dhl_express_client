# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestResponseStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_code': 'int',
        'status_message': 'str',
        'ok': 'bool',
        'warning': 'bool',
        'error_status': 'bool'
    }

    attribute_map = {
        'status_code': 'statusCode',
        'status_message': 'statusMessage',
        'ok': 'ok',
        'warning': 'warning',
        'error_status': 'errorStatus'
    }

    def __init__(self, status_code=None, status_message=None, ok=None, warning=None, error_status=None):  # noqa: E501
        """RestResponseStatus - a model defined in Swagger"""  # noqa: E501
        self._status_code = None
        self._status_message = None
        self._ok = None
        self._warning = None
        self._error_status = None
        self.discriminator = None
        if status_code is not None:
            self.status_code = status_code
        if status_message is not None:
            self.status_message = status_message
        if ok is not None:
            self.ok = ok
        if warning is not None:
            self.warning = warning
        if error_status is not None:
            self.error_status = error_status

    @property
    def status_code(self):
        """Gets the status_code of this RestResponseStatus.  # noqa: E501

        Status/error code of the response  # noqa: E501

        :return: The status_code of this RestResponseStatus.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this RestResponseStatus.

        Status/error code of the response  # noqa: E501

        :param status_code: The status_code of this RestResponseStatus.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this RestResponseStatus.  # noqa: E501

        Status/error message text of the response  # noqa: E501

        :return: The status_message of this RestResponseStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this RestResponseStatus.

        Status/error message text of the response  # noqa: E501

        :param status_message: The status_message of this RestResponseStatus.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def ok(self):
        """Gets the ok of this RestResponseStatus.  # noqa: E501


        :return: The ok of this RestResponseStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this RestResponseStatus.


        :param ok: The ok of this RestResponseStatus.  # noqa: E501
        :type: bool
        """

        self._ok = ok

    @property
    def warning(self):
        """Gets the warning of this RestResponseStatus.  # noqa: E501


        :return: The warning of this RestResponseStatus.  # noqa: E501
        :rtype: bool
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this RestResponseStatus.


        :param warning: The warning of this RestResponseStatus.  # noqa: E501
        :type: bool
        """

        self._warning = warning

    @property
    def error_status(self):
        """Gets the error_status of this RestResponseStatus.  # noqa: E501


        :return: The error_status of this RestResponseStatus.  # noqa: E501
        :rtype: bool
        """
        return self._error_status

    @error_status.setter
    def error_status(self, error_status):
        """Sets the error_status of this RestResponseStatus.


        :param error_status: The error_status of this RestResponseStatus.  # noqa: E501
        :type: bool
        """

        self._error_status = error_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestResponseStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestResponseStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
