# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressProductsBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'service_code': 'str',
        'local_service_code': 'str',
        'type_code': 'str',
        'service_type_code': 'str',
        'is_customer_agreement': 'bool',
        'is_marketed_service': 'bool',
        'is_billing_service_indicator': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'service_code': 'serviceCode',
        'local_service_code': 'localServiceCode',
        'type_code': 'typeCode',
        'service_type_code': 'serviceTypeCode',
        'is_customer_agreement': 'isCustomerAgreement',
        'is_marketed_service': 'isMarketedService',
        'is_billing_service_indicator': 'isBillingServiceIndicator'
    }

    def __init__(self, name=None, service_code=None, local_service_code=None, type_code=None, service_type_code=None, is_customer_agreement=None, is_marketed_service=None, is_billing_service_indicator=None):  # noqa: E501
        """SupermodelIoLogisticsExpressProductsBreakdown - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._service_code = None
        self._local_service_code = None
        self._type_code = None
        self._service_type_code = None
        self._is_customer_agreement = None
        self._is_marketed_service = None
        self._is_billing_service_indicator = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if service_code is not None:
            self.service_code = service_code
        if local_service_code is not None:
            self.local_service_code = local_service_code
        if type_code is not None:
            self.type_code = type_code
        if service_type_code is not None:
            self.service_type_code = service_type_code
        if is_customer_agreement is not None:
            self.is_customer_agreement = is_customer_agreement
        if is_marketed_service is not None:
            self.is_marketed_service = is_marketed_service
        if is_billing_service_indicator is not None:
            self.is_billing_service_indicator = is_billing_service_indicator

    @property
    def name(self):
        """Gets the name of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Breakdown Name. <BR> name within the first occurrence of breakdown will be the Global Product Name.  # noqa: E501

        :return: The name of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupermodelIoLogisticsExpressProductsBreakdown.

        Breakdown Name. <BR> name within the first occurrence of breakdown will be the Global Product Name.  # noqa: E501

        :param name: The name of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service_code(self):
        """Gets the service_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Special service or extra charge code.  This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery  # noqa: E501

        :return: The service_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this SupermodelIoLogisticsExpressProductsBreakdown.

        Special service or extra charge code.  This is the code you would have to use in the /shipment service if you wish to add an optional Service such as Saturday delivery  # noqa: E501

        :param service_code: The service_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: str
        """

        self._service_code = service_code

    @property
    def local_service_code(self):
        """Gets the local_service_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Local service code  # noqa: E501

        :return: The local_service_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._local_service_code

    @local_service_code.setter
    def local_service_code(self, local_service_code):
        """Sets the local_service_code of this SupermodelIoLogisticsExpressProductsBreakdown.

        Local service code  # noqa: E501

        :param local_service_code: The local_service_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: str
        """

        self._local_service_code = local_service_code

    @property
    def type_code(self):
        """Gets the type_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Breakdown type code. <BR> typeCode within the first occurrence of breakdown will be the Local Product Name.  # noqa: E501

        :return: The type_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this SupermodelIoLogisticsExpressProductsBreakdown.

        Breakdown type code. <BR> typeCode within the first occurrence of breakdown will be the Local Product Name.  # noqa: E501

        :param type_code: The type_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: str
        """

        self._type_code = type_code

    @property
    def service_type_code(self):
        """Gets the service_type_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Special service charge code type for service.  # noqa: E501

        :return: The service_type_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: str
        """
        return self._service_type_code

    @service_type_code.setter
    def service_type_code(self, service_type_code):
        """Sets the service_type_code of this SupermodelIoLogisticsExpressProductsBreakdown.

        Special service charge code type for service.  # noqa: E501

        :param service_type_code: The service_type_code of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: str
        """

        self._service_type_code = service_type_code

    @property
    def is_customer_agreement(self):
        """Gets the is_customer_agreement of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Customer agreement indicator for product and services, if service is offered with prior customer agreement  # noqa: E501

        :return: The is_customer_agreement of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: bool
        """
        return self._is_customer_agreement

    @is_customer_agreement.setter
    def is_customer_agreement(self, is_customer_agreement):
        """Sets the is_customer_agreement of this SupermodelIoLogisticsExpressProductsBreakdown.

        Customer agreement indicator for product and services, if service is offered with prior customer agreement  # noqa: E501

        :param is_customer_agreement: The is_customer_agreement of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: bool
        """

        self._is_customer_agreement = is_customer_agreement

    @property
    def is_marketed_service(self):
        """Gets the is_marketed_service of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Indicator if the special service is marketed service  # noqa: E501

        :return: The is_marketed_service of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: bool
        """
        return self._is_marketed_service

    @is_marketed_service.setter
    def is_marketed_service(self, is_marketed_service):
        """Sets the is_marketed_service of this SupermodelIoLogisticsExpressProductsBreakdown.

        Indicator if the special service is marketed service  # noqa: E501

        :param is_marketed_service: The is_marketed_service of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: bool
        """

        self._is_marketed_service = is_marketed_service

    @property
    def is_billing_service_indicator(self):
        """Gets the is_billing_service_indicator of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501

        Indicator if there is any discount allowed  # noqa: E501

        :return: The is_billing_service_indicator of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :rtype: bool
        """
        return self._is_billing_service_indicator

    @is_billing_service_indicator.setter
    def is_billing_service_indicator(self, is_billing_service_indicator):
        """Sets the is_billing_service_indicator of this SupermodelIoLogisticsExpressProductsBreakdown.

        Indicator if there is any discount allowed  # noqa: E501

        :param is_billing_service_indicator: The is_billing_service_indicator of this SupermodelIoLogisticsExpressProductsBreakdown.  # noqa: E501
        :type: bool
        """

        self._is_billing_service_indicator = is_billing_service_indicator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressProductsBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressProductsBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
