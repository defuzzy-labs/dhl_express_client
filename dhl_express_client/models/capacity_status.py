# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CapacityStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sev': 'str',
        'msg_clg': 'str',
        'msg_c_igd': 'str',
        'dsc': 'str',
        'dtl_dsc': 'str'
    }

    attribute_map = {
        'sev': 'sev',
        'msg_clg': 'msgClg',
        'msg_c_igd': 'msgCIgd',
        'dsc': 'dsc',
        'dtl_dsc': 'dtlDsc'
    }

    def __init__(self, sev=None, msg_clg=None, msg_c_igd=None, dsc=None, dtl_dsc=None):  # noqa: E501
        """CapacityStatus - a model defined in Swagger"""  # noqa: E501
        self._sev = None
        self._msg_clg = None
        self._msg_c_igd = None
        self._dsc = None
        self._dtl_dsc = None
        self.discriminator = None
        if sev is not None:
            self.sev = sev
        if msg_clg is not None:
            self.msg_clg = msg_clg
        if msg_c_igd is not None:
            self.msg_c_igd = msg_c_igd
        if dsc is not None:
            self.dsc = dsc
        if dtl_dsc is not None:
            self.dtl_dsc = dtl_dsc

    @property
    def sev(self):
        """Gets the sev of this CapacityStatus.  # noqa: E501

        Severity code  # noqa: E501

        :return: The sev of this CapacityStatus.  # noqa: E501
        :rtype: str
        """
        return self._sev

    @sev.setter
    def sev(self, sev):
        """Sets the sev of this CapacityStatus.

        Severity code  # noqa: E501

        :param sev: The sev of this CapacityStatus.  # noqa: E501
        :type: str
        """

        self._sev = sev

    @property
    def msg_clg(self):
        """Gets the msg_clg of this CapacityStatus.  # noqa: E501

        SCMS  # noqa: E501

        :return: The msg_clg of this CapacityStatus.  # noqa: E501
        :rtype: str
        """
        return self._msg_clg

    @msg_clg.setter
    def msg_clg(self, msg_clg):
        """Sets the msg_clg of this CapacityStatus.

        SCMS  # noqa: E501

        :param msg_clg: The msg_clg of this CapacityStatus.  # noqa: E501
        :type: str
        """

        self._msg_clg = msg_clg

    @property
    def msg_c_igd(self):
        """Gets the msg_c_igd of this CapacityStatus.  # noqa: E501

        SCMS Status code  # noqa: E501

        :return: The msg_c_igd of this CapacityStatus.  # noqa: E501
        :rtype: str
        """
        return self._msg_c_igd

    @msg_c_igd.setter
    def msg_c_igd(self, msg_c_igd):
        """Sets the msg_c_igd of this CapacityStatus.

        SCMS Status code  # noqa: E501

        :param msg_c_igd: The msg_c_igd of this CapacityStatus.  # noqa: E501
        :type: str
        """

        self._msg_c_igd = msg_c_igd

    @property
    def dsc(self):
        """Gets the dsc of this CapacityStatus.  # noqa: E501

        SCMS Description of status code  # noqa: E501

        :return: The dsc of this CapacityStatus.  # noqa: E501
        :rtype: str
        """
        return self._dsc

    @dsc.setter
    def dsc(self, dsc):
        """Sets the dsc of this CapacityStatus.

        SCMS Description of status code  # noqa: E501

        :param dsc: The dsc of this CapacityStatus.  # noqa: E501
        :type: str
        """

        self._dsc = dsc

    @property
    def dtl_dsc(self):
        """Gets the dtl_dsc of this CapacityStatus.  # noqa: E501

        SCMS detailed description  # noqa: E501

        :return: The dtl_dsc of this CapacityStatus.  # noqa: E501
        :rtype: str
        """
        return self._dtl_dsc

    @dtl_dsc.setter
    def dtl_dsc(self, dtl_dsc):
        """Sets the dtl_dsc of this CapacityStatus.

        SCMS detailed description  # noqa: E501

        :param dtl_dsc: The dtl_dsc of this CapacityStatus.  # noqa: E501
        :type: str
        """

        self._dtl_dsc = dtl_dsc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CapacityStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
