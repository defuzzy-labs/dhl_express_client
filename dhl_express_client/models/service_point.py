# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicePoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'facility_id': 'str',
        'facility_type_code': 'str',
        'service_area_code': 'str',
        'service_point_name': 'str',
        'service_point_name_formatted': 'str',
        'local_name': 'str',
        'service_point_type': 'str',
        'address': 'Address',
        'geo_location': 'GeoLocation',
        'distance': 'str',
        'shipping_cut_off_time': 'str',
        'opening_hours': 'OpeningHours',
        'service_point_capabilities': 'ServicePointCapabilities',
        'contact_details': 'ContactDetails',
        'shipping_cut_off_time_html': 'str',
        'distance_value': 'str',
        'distance_metric': 'float',
        'language': 'Language',
        'shipment_limitations': 'ShipmentLimitations',
        'shipment_limitations_by_piece': 'ShipmentLimitationsByPiece',
        'charge_code': 'str',
        'partner': 'Partner',
        'promotion': 'Promotion',
        'capacity_status': 'CapacityStatus',
        'svp_status': 'str',
        'work_week_start': 'int',
        'located_at': 'str',
        'time_zone': 'DateTimeZone'
    }

    attribute_map = {
        'id': 'id',
        'facility_id': 'facilityId',
        'facility_type_code': 'facilityTypeCode',
        'service_area_code': 'serviceAreaCode',
        'service_point_name': 'servicePointName',
        'service_point_name_formatted': 'servicePointNameFormatted',
        'local_name': 'localName',
        'service_point_type': 'servicePointType',
        'address': 'address',
        'geo_location': 'geoLocation',
        'distance': 'distance',
        'shipping_cut_off_time': 'shippingCutOffTime',
        'opening_hours': 'openingHours',
        'service_point_capabilities': 'servicePointCapabilities',
        'contact_details': 'contactDetails',
        'shipping_cut_off_time_html': 'shippingCutOffTimeHtml',
        'distance_value': 'distanceValue',
        'distance_metric': 'distanceMetric',
        'language': 'language',
        'shipment_limitations': 'shipmentLimitations',
        'shipment_limitations_by_piece': 'shipmentLimitationsByPiece',
        'charge_code': 'chargeCode',
        'partner': 'partner',
        'promotion': 'promotion',
        'capacity_status': 'capacityStatus',
        'svp_status': 'svpStatus',
        'work_week_start': 'workWeekStart',
        'located_at': 'locatedAt',
        'time_zone': 'timeZone'
    }

    def __init__(self, id=None, facility_id=None, facility_type_code=None, service_area_code=None, service_point_name=None, service_point_name_formatted=None, local_name=None, service_point_type=None, address=None, geo_location=None, distance=None, shipping_cut_off_time=None, opening_hours=None, service_point_capabilities=None, contact_details=None, shipping_cut_off_time_html=None, distance_value=None, distance_metric=None, language=None, shipment_limitations=None, shipment_limitations_by_piece=None, charge_code=None, partner=None, promotion=None, capacity_status=None, svp_status=None, work_week_start=None, located_at=None, time_zone=None):  # noqa: E501
        """ServicePoint - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._facility_id = None
        self._facility_type_code = None
        self._service_area_code = None
        self._service_point_name = None
        self._service_point_name_formatted = None
        self._local_name = None
        self._service_point_type = None
        self._address = None
        self._geo_location = None
        self._distance = None
        self._shipping_cut_off_time = None
        self._opening_hours = None
        self._service_point_capabilities = None
        self._contact_details = None
        self._shipping_cut_off_time_html = None
        self._distance_value = None
        self._distance_metric = None
        self._language = None
        self._shipment_limitations = None
        self._shipment_limitations_by_piece = None
        self._charge_code = None
        self._partner = None
        self._promotion = None
        self._capacity_status = None
        self._svp_status = None
        self._work_week_start = None
        self._located_at = None
        self._time_zone = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if facility_id is not None:
            self.facility_id = facility_id
        if facility_type_code is not None:
            self.facility_type_code = facility_type_code
        if service_area_code is not None:
            self.service_area_code = service_area_code
        if service_point_name is not None:
            self.service_point_name = service_point_name
        if service_point_name_formatted is not None:
            self.service_point_name_formatted = service_point_name_formatted
        if local_name is not None:
            self.local_name = local_name
        if service_point_type is not None:
            self.service_point_type = service_point_type
        if address is not None:
            self.address = address
        if geo_location is not None:
            self.geo_location = geo_location
        if distance is not None:
            self.distance = distance
        if shipping_cut_off_time is not None:
            self.shipping_cut_off_time = shipping_cut_off_time
        if opening_hours is not None:
            self.opening_hours = opening_hours
        if service_point_capabilities is not None:
            self.service_point_capabilities = service_point_capabilities
        if contact_details is not None:
            self.contact_details = contact_details
        if shipping_cut_off_time_html is not None:
            self.shipping_cut_off_time_html = shipping_cut_off_time_html
        if distance_value is not None:
            self.distance_value = distance_value
        if distance_metric is not None:
            self.distance_metric = distance_metric
        if language is not None:
            self.language = language
        if shipment_limitations is not None:
            self.shipment_limitations = shipment_limitations
        if shipment_limitations_by_piece is not None:
            self.shipment_limitations_by_piece = shipment_limitations_by_piece
        if charge_code is not None:
            self.charge_code = charge_code
        if partner is not None:
            self.partner = partner
        if promotion is not None:
            self.promotion = promotion
        if capacity_status is not None:
            self.capacity_status = capacity_status
        if svp_status is not None:
            self.svp_status = svp_status
        if work_week_start is not None:
            self.work_week_start = work_week_start
        if located_at is not None:
            self.located_at = located_at
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def id(self):
        """Gets the id of this ServicePoint.  # noqa: E501

        The facility ID from GREF database  # noqa: E501

        :return: The id of this ServicePoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServicePoint.

        The facility ID from GREF database  # noqa: E501

        :param id: The id of this ServicePoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def facility_id(self):
        """Gets the facility_id of this ServicePoint.  # noqa: E501

        Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.  If address is used id not possible to use.    # noqa: E501

        :return: The facility_id of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this ServicePoint.

        Service Point ID is a unique key with 6 characters, consisting of Service Area for first 3 characters (e.g. BRU) and the last 3 characters is the Facility code (e.g. 001); Service point ID = BRU001.  If address is used id not possible to use.    # noqa: E501

        :param facility_id: The facility_id of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._facility_id = facility_id

    @property
    def facility_type_code(self):
        """Gets the facility_type_code of this ServicePoint.  # noqa: E501

        The facility type code from GREF database  # noqa: E501

        :return: The facility_type_code of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._facility_type_code

    @facility_type_code.setter
    def facility_type_code(self, facility_type_code):
        """Sets the facility_type_code of this ServicePoint.

        The facility type code from GREF database  # noqa: E501

        :param facility_type_code: The facility_type_code of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._facility_type_code = facility_type_code

    @property
    def service_area_code(self):
        """Gets the service_area_code of this ServicePoint.  # noqa: E501

        The service point’s Service Area Code  # noqa: E501

        :return: The service_area_code of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._service_area_code

    @service_area_code.setter
    def service_area_code(self, service_area_code):
        """Sets the service_area_code of this ServicePoint.

        The service point’s Service Area Code  # noqa: E501

        :param service_area_code: The service_area_code of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._service_area_code = service_area_code

    @property
    def service_point_name(self):
        """Gets the service_point_name of this ServicePoint.  # noqa: E501

        Name of the service point  # noqa: E501

        :return: The service_point_name of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._service_point_name

    @service_point_name.setter
    def service_point_name(self, service_point_name):
        """Sets the service_point_name of this ServicePoint.

        Name of the service point  # noqa: E501

        :param service_point_name: The service_point_name of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._service_point_name = service_point_name

    @property
    def service_point_name_formatted(self):
        """Gets the service_point_name_formatted of this ServicePoint.  # noqa: E501

        Formatted name of the service point  # noqa: E501

        :return: The service_point_name_formatted of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._service_point_name_formatted

    @service_point_name_formatted.setter
    def service_point_name_formatted(self, service_point_name_formatted):
        """Sets the service_point_name_formatted of this ServicePoint.

        Formatted name of the service point  # noqa: E501

        :param service_point_name_formatted: The service_point_name_formatted of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._service_point_name_formatted = service_point_name_formatted

    @property
    def local_name(self):
        """Gets the local_name of this ServicePoint.  # noqa: E501

        The local trading name of the Service Point  # noqa: E501

        :return: The local_name of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._local_name

    @local_name.setter
    def local_name(self, local_name):
        """Sets the local_name of this ServicePoint.

        The local trading name of the Service Point  # noqa: E501

        :param local_name: The local_name of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._local_name = local_name

    @property
    def service_point_type(self):
        """Gets the service_point_type of this ServicePoint.  # noqa: E501

        The type of the Service Point. CITY, STATION, PARTNER or TWENTYFOURSEVEN.  # noqa: E501

        :return: The service_point_type of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._service_point_type

    @service_point_type.setter
    def service_point_type(self, service_point_type):
        """Sets the service_point_type of this ServicePoint.

        The type of the Service Point. CITY, STATION, PARTNER or TWENTYFOURSEVEN.  # noqa: E501

        :param service_point_type: The service_point_type of this ServicePoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["CITY", "STATION", "PARTNER", "TWENTYFOURSEVEN"]  # noqa: E501
        if service_point_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_point_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_point_type, allowed_values)
            )

        self._service_point_type = service_point_type

    @property
    def address(self):
        """Gets the address of this ServicePoint.  # noqa: E501


        :return: The address of this ServicePoint.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ServicePoint.


        :param address: The address of this ServicePoint.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def geo_location(self):
        """Gets the geo_location of this ServicePoint.  # noqa: E501


        :return: The geo_location of this ServicePoint.  # noqa: E501
        :rtype: GeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this ServicePoint.


        :param geo_location: The geo_location of this ServicePoint.  # noqa: E501
        :type: GeoLocation
        """

        self._geo_location = geo_location

    @property
    def distance(self):
        """Gets the distance of this ServicePoint.  # noqa: E501

        The distance from the search address to this Service Point (beeline).   # noqa: E501

        :return: The distance of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ServicePoint.

        The distance from the search address to this Service Point (beeline).   # noqa: E501

        :param distance: The distance of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._distance = distance

    @property
    def shipping_cut_off_time(self):
        """Gets the shipping_cut_off_time of this ServicePoint.  # noqa: E501

        Time until which a shipment can be handed in at the Service Point, and is still shipped on the same day  # noqa: E501

        :return: The shipping_cut_off_time of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._shipping_cut_off_time

    @shipping_cut_off_time.setter
    def shipping_cut_off_time(self, shipping_cut_off_time):
        """Sets the shipping_cut_off_time of this ServicePoint.

        Time until which a shipment can be handed in at the Service Point, and is still shipped on the same day  # noqa: E501

        :param shipping_cut_off_time: The shipping_cut_off_time of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._shipping_cut_off_time = shipping_cut_off_time

    @property
    def opening_hours(self):
        """Gets the opening_hours of this ServicePoint.  # noqa: E501


        :return: The opening_hours of this ServicePoint.  # noqa: E501
        :rtype: OpeningHours
        """
        return self._opening_hours

    @opening_hours.setter
    def opening_hours(self, opening_hours):
        """Sets the opening_hours of this ServicePoint.


        :param opening_hours: The opening_hours of this ServicePoint.  # noqa: E501
        :type: OpeningHours
        """

        self._opening_hours = opening_hours

    @property
    def service_point_capabilities(self):
        """Gets the service_point_capabilities of this ServicePoint.  # noqa: E501


        :return: The service_point_capabilities of this ServicePoint.  # noqa: E501
        :rtype: ServicePointCapabilities
        """
        return self._service_point_capabilities

    @service_point_capabilities.setter
    def service_point_capabilities(self, service_point_capabilities):
        """Sets the service_point_capabilities of this ServicePoint.


        :param service_point_capabilities: The service_point_capabilities of this ServicePoint.  # noqa: E501
        :type: ServicePointCapabilities
        """

        self._service_point_capabilities = service_point_capabilities

    @property
    def contact_details(self):
        """Gets the contact_details of this ServicePoint.  # noqa: E501


        :return: The contact_details of this ServicePoint.  # noqa: E501
        :rtype: ContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this ServicePoint.


        :param contact_details: The contact_details of this ServicePoint.  # noqa: E501
        :type: ContactDetails
        """

        self._contact_details = contact_details

    @property
    def shipping_cut_off_time_html(self):
        """Gets the shipping_cut_off_time_html of this ServicePoint.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The shipping_cut_off_time_html of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._shipping_cut_off_time_html

    @shipping_cut_off_time_html.setter
    def shipping_cut_off_time_html(self, shipping_cut_off_time_html):
        """Sets the shipping_cut_off_time_html of this ServicePoint.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param shipping_cut_off_time_html: The shipping_cut_off_time_html of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._shipping_cut_off_time_html = shipping_cut_off_time_html

    @property
    def distance_value(self):
        """Gets the distance_value of this ServicePoint.  # noqa: E501

        Distance of SVP from searched location  # noqa: E501

        :return: The distance_value of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._distance_value

    @distance_value.setter
    def distance_value(self, distance_value):
        """Sets the distance_value of this ServicePoint.

        Distance of SVP from searched location  # noqa: E501

        :param distance_value: The distance_value of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._distance_value = distance_value

    @property
    def distance_metric(self):
        """Gets the distance_metric of this ServicePoint.  # noqa: E501

        Metric of distance  # noqa: E501

        :return: The distance_metric of this ServicePoint.  # noqa: E501
        :rtype: float
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this ServicePoint.

        Metric of distance  # noqa: E501

        :param distance_metric: The distance_metric of this ServicePoint.  # noqa: E501
        :type: float
        """

        self._distance_metric = distance_metric

    @property
    def language(self):
        """Gets the language of this ServicePoint.  # noqa: E501


        :return: The language of this ServicePoint.  # noqa: E501
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ServicePoint.


        :param language: The language of this ServicePoint.  # noqa: E501
        :type: Language
        """

        self._language = language

    @property
    def shipment_limitations(self):
        """Gets the shipment_limitations of this ServicePoint.  # noqa: E501


        :return: The shipment_limitations of this ServicePoint.  # noqa: E501
        :rtype: ShipmentLimitations
        """
        return self._shipment_limitations

    @shipment_limitations.setter
    def shipment_limitations(self, shipment_limitations):
        """Sets the shipment_limitations of this ServicePoint.


        :param shipment_limitations: The shipment_limitations of this ServicePoint.  # noqa: E501
        :type: ShipmentLimitations
        """

        self._shipment_limitations = shipment_limitations

    @property
    def shipment_limitations_by_piece(self):
        """Gets the shipment_limitations_by_piece of this ServicePoint.  # noqa: E501


        :return: The shipment_limitations_by_piece of this ServicePoint.  # noqa: E501
        :rtype: ShipmentLimitationsByPiece
        """
        return self._shipment_limitations_by_piece

    @shipment_limitations_by_piece.setter
    def shipment_limitations_by_piece(self, shipment_limitations_by_piece):
        """Sets the shipment_limitations_by_piece of this ServicePoint.


        :param shipment_limitations_by_piece: The shipment_limitations_by_piece of this ServicePoint.  # noqa: E501
        :type: ShipmentLimitationsByPiece
        """

        self._shipment_limitations_by_piece = shipment_limitations_by_piece

    @property
    def charge_code(self):
        """Gets the charge_code of this ServicePoint.  # noqa: E501

        Charge code, e.g. XX  # noqa: E501

        :return: The charge_code of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._charge_code

    @charge_code.setter
    def charge_code(self, charge_code):
        """Sets the charge_code of this ServicePoint.

        Charge code, e.g. XX  # noqa: E501

        :param charge_code: The charge_code of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._charge_code = charge_code

    @property
    def partner(self):
        """Gets the partner of this ServicePoint.  # noqa: E501


        :return: The partner of this ServicePoint.  # noqa: E501
        :rtype: Partner
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this ServicePoint.


        :param partner: The partner of this ServicePoint.  # noqa: E501
        :type: Partner
        """

        self._partner = partner

    @property
    def promotion(self):
        """Gets the promotion of this ServicePoint.  # noqa: E501


        :return: The promotion of this ServicePoint.  # noqa: E501
        :rtype: Promotion
        """
        return self._promotion

    @promotion.setter
    def promotion(self, promotion):
        """Sets the promotion of this ServicePoint.


        :param promotion: The promotion of this ServicePoint.  # noqa: E501
        :type: Promotion
        """

        self._promotion = promotion

    @property
    def capacity_status(self):
        """Gets the capacity_status of this ServicePoint.  # noqa: E501


        :return: The capacity_status of this ServicePoint.  # noqa: E501
        :rtype: CapacityStatus
        """
        return self._capacity_status

    @capacity_status.setter
    def capacity_status(self, capacity_status):
        """Sets the capacity_status of this ServicePoint.


        :param capacity_status: The capacity_status of this ServicePoint.  # noqa: E501
        :type: CapacityStatus
        """

        self._capacity_status = capacity_status

    @property
    def svp_status(self):
        """Gets the svp_status of this ServicePoint.  # noqa: E501

        Status of the service point(Active or Inactive)  # noqa: E501

        :return: The svp_status of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._svp_status

    @svp_status.setter
    def svp_status(self, svp_status):
        """Sets the svp_status of this ServicePoint.

        Status of the service point(Active or Inactive)  # noqa: E501

        :param svp_status: The svp_status of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._svp_status = svp_status

    @property
    def work_week_start(self):
        """Gets the work_week_start of this ServicePoint.  # noqa: E501

        Number of day when the work week starts. It starts from 0 to 6(Sunday to Saturday)  # noqa: E501

        :return: The work_week_start of this ServicePoint.  # noqa: E501
        :rtype: int
        """
        return self._work_week_start

    @work_week_start.setter
    def work_week_start(self, work_week_start):
        """Sets the work_week_start of this ServicePoint.

        Number of day when the work week starts. It starts from 0 to 6(Sunday to Saturday)  # noqa: E501

        :param work_week_start: The work_week_start of this ServicePoint.  # noqa: E501
        :type: int
        """

        self._work_week_start = work_week_start

    @property
    def located_at(self):
        """Gets the located_at of this ServicePoint.  # noqa: E501


        :return: The located_at of this ServicePoint.  # noqa: E501
        :rtype: str
        """
        return self._located_at

    @located_at.setter
    def located_at(self, located_at):
        """Sets the located_at of this ServicePoint.


        :param located_at: The located_at of this ServicePoint.  # noqa: E501
        :type: str
        """

        self._located_at = located_at

    @property
    def time_zone(self):
        """Gets the time_zone of this ServicePoint.  # noqa: E501


        :return: The time_zone of this ServicePoint.  # noqa: E501
        :rtype: DateTimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ServicePoint.


        :param time_zone: The time_zone of this ServicePoint.  # noqa: E501
        :type: DateTimeZone
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
