# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenDatesTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        '_from': 'str',
        'to': 'str'
    }

    attribute_map = {
        '_date': 'date',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, _date=None, _from=None, to=None):  # noqa: E501
        """OpenDatesTime - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self.__from = None
        self._to = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to

    @property
    def _date(self):
        """Gets the _date of this OpenDatesTime.  # noqa: E501

        Date – when is open during holidays  # noqa: E501

        :return: The _date of this OpenDatesTime.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OpenDatesTime.

        Date – when is open during holidays  # noqa: E501

        :param _date: The _date of this OpenDatesTime.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def _from(self):
        """Gets the _from of this OpenDatesTime.  # noqa: E501

        Time – beginning of open hours  # noqa: E501

        :return: The _from of this OpenDatesTime.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this OpenDatesTime.

        Time – beginning of open hours  # noqa: E501

        :param _from: The _from of this OpenDatesTime.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this OpenDatesTime.  # noqa: E501

        Time – end of open hours  # noqa: E501

        :return: The to of this OpenDatesTime.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this OpenDatesTime.

        Time – end of open hours  # noqa: E501

        :param to: The to of this OpenDatesTime.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenDatesTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenDatesTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
