# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicePointCapabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parking_available': 'bool',
        'disabled_access': 'bool',
        'shipment_drop_off': 'bool',
        'shipment_collection': 'bool',
        'international_shipping': 'bool',
        'domestic_shipping': 'bool',
        'account_shippers': 'bool',
        'label_printing': 'bool',
        'insurance': 'bool',
        'import_charges': 'bool',
        'packaging': 'bool',
        'receiver_paid': 'bool',
        'visa_program': 'bool',
        'pay_with_cash': 'bool',
        'pay_with_credit_card': 'bool',
        'pay_with_cheque': 'bool',
        'pay_with_mobile': 'bool',
        'pay_with_pay_pal': 'bool',
        'parking_title': 'str',
        'disabled_access_title': 'str',
        'piece_weight_limit': 'float',
        'piece_weight_limit_unit': 'str',
        'piece_dimensions_limit': 'Dimensions',
        'piece_dimensions_limit_unit': 'str',
        'piece_count_limit': 'float',
        'account_prepaid_shippers': 'bool',
        'prepaid_shippers': 'bool',
        'pre_print_return_label': 'bool',
        'label_free': 'bool',
        'ppc_list': 'list[str]',
        'html': 'str',
        'capability_codes': 'str'
    }

    attribute_map = {
        'parking_available': 'parkingAvailable',
        'disabled_access': 'disabledAccess',
        'shipment_drop_off': 'shipmentDropOff',
        'shipment_collection': 'shipmentCollection',
        'international_shipping': 'internationalShipping',
        'domestic_shipping': 'domesticShipping',
        'account_shippers': 'accountShippers',
        'label_printing': 'labelPrinting',
        'insurance': 'insurance',
        'import_charges': 'importCharges',
        'packaging': 'packaging',
        'receiver_paid': 'receiverPaid',
        'visa_program': 'visaProgram',
        'pay_with_cash': 'payWithCash',
        'pay_with_credit_card': 'payWithCreditCard',
        'pay_with_cheque': 'payWithCheque',
        'pay_with_mobile': 'payWithMobile',
        'pay_with_pay_pal': 'payWithPayPal',
        'parking_title': 'parkingTitle',
        'disabled_access_title': 'disabledAccessTitle',
        'piece_weight_limit': 'pieceWeightLimit',
        'piece_weight_limit_unit': 'pieceWeightLimitUnit',
        'piece_dimensions_limit': 'pieceDimensionsLimit',
        'piece_dimensions_limit_unit': 'pieceDimensionsLimitUnit',
        'piece_count_limit': 'pieceCountLimit',
        'account_prepaid_shippers': 'accountPrepaidShippers',
        'prepaid_shippers': 'prepaidShippers',
        'pre_print_return_label': 'prePrintReturnLabel',
        'label_free': 'labelFree',
        'ppc_list': 'ppcList',
        'html': 'html',
        'capability_codes': 'capabilityCodes'
    }

    def __init__(self, parking_available=None, disabled_access=None, shipment_drop_off=None, shipment_collection=None, international_shipping=None, domestic_shipping=None, account_shippers=None, label_printing=None, insurance=None, import_charges=None, packaging=None, receiver_paid=None, visa_program=None, pay_with_cash=None, pay_with_credit_card=None, pay_with_cheque=None, pay_with_mobile=None, pay_with_pay_pal=None, parking_title=None, disabled_access_title=None, piece_weight_limit=None, piece_weight_limit_unit=None, piece_dimensions_limit=None, piece_dimensions_limit_unit=None, piece_count_limit=None, account_prepaid_shippers=None, prepaid_shippers=None, pre_print_return_label=None, label_free=None, ppc_list=None, html=None, capability_codes=None):  # noqa: E501
        """ServicePointCapabilities - a model defined in Swagger"""  # noqa: E501
        self._parking_available = None
        self._disabled_access = None
        self._shipment_drop_off = None
        self._shipment_collection = None
        self._international_shipping = None
        self._domestic_shipping = None
        self._account_shippers = None
        self._label_printing = None
        self._insurance = None
        self._import_charges = None
        self._packaging = None
        self._receiver_paid = None
        self._visa_program = None
        self._pay_with_cash = None
        self._pay_with_credit_card = None
        self._pay_with_cheque = None
        self._pay_with_mobile = None
        self._pay_with_pay_pal = None
        self._parking_title = None
        self._disabled_access_title = None
        self._piece_weight_limit = None
        self._piece_weight_limit_unit = None
        self._piece_dimensions_limit = None
        self._piece_dimensions_limit_unit = None
        self._piece_count_limit = None
        self._account_prepaid_shippers = None
        self._prepaid_shippers = None
        self._pre_print_return_label = None
        self._label_free = None
        self._ppc_list = None
        self._html = None
        self._capability_codes = None
        self.discriminator = None
        if parking_available is not None:
            self.parking_available = parking_available
        if disabled_access is not None:
            self.disabled_access = disabled_access
        if shipment_drop_off is not None:
            self.shipment_drop_off = shipment_drop_off
        if shipment_collection is not None:
            self.shipment_collection = shipment_collection
        if international_shipping is not None:
            self.international_shipping = international_shipping
        if domestic_shipping is not None:
            self.domestic_shipping = domestic_shipping
        if account_shippers is not None:
            self.account_shippers = account_shippers
        if label_printing is not None:
            self.label_printing = label_printing
        if insurance is not None:
            self.insurance = insurance
        if import_charges is not None:
            self.import_charges = import_charges
        if packaging is not None:
            self.packaging = packaging
        if receiver_paid is not None:
            self.receiver_paid = receiver_paid
        if visa_program is not None:
            self.visa_program = visa_program
        if pay_with_cash is not None:
            self.pay_with_cash = pay_with_cash
        if pay_with_credit_card is not None:
            self.pay_with_credit_card = pay_with_credit_card
        if pay_with_cheque is not None:
            self.pay_with_cheque = pay_with_cheque
        if pay_with_mobile is not None:
            self.pay_with_mobile = pay_with_mobile
        if pay_with_pay_pal is not None:
            self.pay_with_pay_pal = pay_with_pay_pal
        if parking_title is not None:
            self.parking_title = parking_title
        if disabled_access_title is not None:
            self.disabled_access_title = disabled_access_title
        if piece_weight_limit is not None:
            self.piece_weight_limit = piece_weight_limit
        if piece_weight_limit_unit is not None:
            self.piece_weight_limit_unit = piece_weight_limit_unit
        if piece_dimensions_limit is not None:
            self.piece_dimensions_limit = piece_dimensions_limit
        if piece_dimensions_limit_unit is not None:
            self.piece_dimensions_limit_unit = piece_dimensions_limit_unit
        if piece_count_limit is not None:
            self.piece_count_limit = piece_count_limit
        if account_prepaid_shippers is not None:
            self.account_prepaid_shippers = account_prepaid_shippers
        if prepaid_shippers is not None:
            self.prepaid_shippers = prepaid_shippers
        if pre_print_return_label is not None:
            self.pre_print_return_label = pre_print_return_label
        if label_free is not None:
            self.label_free = label_free
        if ppc_list is not None:
            self.ppc_list = ppc_list
        if html is not None:
            self.html = html
        if capability_codes is not None:
            self.capability_codes = capability_codes

    @property
    def parking_available(self):
        """Gets the parking_available of this ServicePointCapabilities.  # noqa: E501

        Indicates whether parking facility is available in the service point or not  # noqa: E501

        :return: The parking_available of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._parking_available

    @parking_available.setter
    def parking_available(self, parking_available):
        """Sets the parking_available of this ServicePointCapabilities.

        Indicates whether parking facility is available in the service point or not  # noqa: E501

        :param parking_available: The parking_available of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._parking_available = parking_available

    @property
    def disabled_access(self):
        """Gets the disabled_access of this ServicePointCapabilities.  # noqa: E501

        Indicates whether disabled access is available in the service point or not  # noqa: E501

        :return: The disabled_access of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._disabled_access

    @disabled_access.setter
    def disabled_access(self, disabled_access):
        """Sets the disabled_access of this ServicePointCapabilities.

        Indicates whether disabled access is available in the service point or not  # noqa: E501

        :param disabled_access: The disabled_access of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._disabled_access = disabled_access

    @property
    def shipment_drop_off(self):
        """Gets the shipment_drop_off of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Shipment Drop Off is available in the service point or not  # noqa: E501

        :return: The shipment_drop_off of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._shipment_drop_off

    @shipment_drop_off.setter
    def shipment_drop_off(self, shipment_drop_off):
        """Sets the shipment_drop_off of this ServicePointCapabilities.

        Indicates whether Shipment Drop Off is available in the service point or not  # noqa: E501

        :param shipment_drop_off: The shipment_drop_off of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._shipment_drop_off = shipment_drop_off

    @property
    def shipment_collection(self):
        """Gets the shipment_collection of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Shipment Collection is available in the service point or not  # noqa: E501

        :return: The shipment_collection of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._shipment_collection

    @shipment_collection.setter
    def shipment_collection(self, shipment_collection):
        """Sets the shipment_collection of this ServicePointCapabilities.

        Indicates whether Shipment Collection is available in the service point or not  # noqa: E501

        :param shipment_collection: The shipment_collection of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._shipment_collection = shipment_collection

    @property
    def international_shipping(self):
        """Gets the international_shipping of this ServicePointCapabilities.  # noqa: E501

        Indicates whether International Shipping is available in the service point or not  # noqa: E501

        :return: The international_shipping of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._international_shipping

    @international_shipping.setter
    def international_shipping(self, international_shipping):
        """Sets the international_shipping of this ServicePointCapabilities.

        Indicates whether International Shipping is available in the service point or not  # noqa: E501

        :param international_shipping: The international_shipping of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._international_shipping = international_shipping

    @property
    def domestic_shipping(self):
        """Gets the domestic_shipping of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Domestic Shipping is available in the service point or not  # noqa: E501

        :return: The domestic_shipping of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._domestic_shipping

    @domestic_shipping.setter
    def domestic_shipping(self, domestic_shipping):
        """Sets the domestic_shipping of this ServicePointCapabilities.

        Indicates whether Domestic Shipping is available in the service point or not  # noqa: E501

        :param domestic_shipping: The domestic_shipping of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._domestic_shipping = domestic_shipping

    @property
    def account_shippers(self):
        """Gets the account_shippers of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Account Shipping is available in the service point or not  # noqa: E501

        :return: The account_shippers of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._account_shippers

    @account_shippers.setter
    def account_shippers(self, account_shippers):
        """Sets the account_shippers of this ServicePointCapabilities.

        Indicates whether Account Shipping is available in the service point or not  # noqa: E501

        :param account_shippers: The account_shippers of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._account_shippers = account_shippers

    @property
    def label_printing(self):
        """Gets the label_printing of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Label Printing is available in the service point or not  # noqa: E501

        :return: The label_printing of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._label_printing

    @label_printing.setter
    def label_printing(self, label_printing):
        """Sets the label_printing of this ServicePointCapabilities.

        Indicates whether Label Printing is available in the service point or not  # noqa: E501

        :param label_printing: The label_printing of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._label_printing = label_printing

    @property
    def insurance(self):
        """Gets the insurance of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Insurance facility is available in the service point or not  # noqa: E501

        :return: The insurance of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this ServicePointCapabilities.

        Indicates whether Insurance facility is available in the service point or not  # noqa: E501

        :param insurance: The insurance of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._insurance = insurance

    @property
    def import_charges(self):
        """Gets the import_charges of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Import Charges is applicable in the service point or not  # noqa: E501

        :return: The import_charges of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._import_charges

    @import_charges.setter
    def import_charges(self, import_charges):
        """Sets the import_charges of this ServicePointCapabilities.

        Indicates whether Import Charges is applicable in the service point or not  # noqa: E501

        :param import_charges: The import_charges of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._import_charges = import_charges

    @property
    def packaging(self):
        """Gets the packaging of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Packaging facility is available in the service point or not  # noqa: E501

        :return: The packaging of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this ServicePointCapabilities.

        Indicates whether Packaging facility is available in the service point or not  # noqa: E501

        :param packaging: The packaging of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._packaging = packaging

    @property
    def receiver_paid(self):
        """Gets the receiver_paid of this ServicePointCapabilities.  # noqa: E501

        Indicates whether Receiver Paying option is available in the service point or not  # noqa: E501

        :return: The receiver_paid of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._receiver_paid

    @receiver_paid.setter
    def receiver_paid(self, receiver_paid):
        """Sets the receiver_paid of this ServicePointCapabilities.

        Indicates whether Receiver Paying option is available in the service point or not  # noqa: E501

        :param receiver_paid: The receiver_paid of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._receiver_paid = receiver_paid

    @property
    def visa_program(self):
        """Gets the visa_program of this ServicePointCapabilities.  # noqa: E501

        Indicates whether VISA program is applicable in the service point or not  # noqa: E501

        :return: The visa_program of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._visa_program

    @visa_program.setter
    def visa_program(self, visa_program):
        """Sets the visa_program of this ServicePointCapabilities.

        Indicates whether VISA program is applicable in the service point or not  # noqa: E501

        :param visa_program: The visa_program of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._visa_program = visa_program

    @property
    def pay_with_cash(self):
        """Gets the pay_with_cash of this ServicePointCapabilities.  # noqa: E501

        Indicates whether pay by cash option is available in the service point or not  # noqa: E501

        :return: The pay_with_cash of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._pay_with_cash

    @pay_with_cash.setter
    def pay_with_cash(self, pay_with_cash):
        """Sets the pay_with_cash of this ServicePointCapabilities.

        Indicates whether pay by cash option is available in the service point or not  # noqa: E501

        :param pay_with_cash: The pay_with_cash of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._pay_with_cash = pay_with_cash

    @property
    def pay_with_credit_card(self):
        """Gets the pay_with_credit_card of this ServicePointCapabilities.  # noqa: E501

        Indicates whether pay with credit card option is available in the service point or not  # noqa: E501

        :return: The pay_with_credit_card of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._pay_with_credit_card

    @pay_with_credit_card.setter
    def pay_with_credit_card(self, pay_with_credit_card):
        """Sets the pay_with_credit_card of this ServicePointCapabilities.

        Indicates whether pay with credit card option is available in the service point or not  # noqa: E501

        :param pay_with_credit_card: The pay_with_credit_card of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._pay_with_credit_card = pay_with_credit_card

    @property
    def pay_with_cheque(self):
        """Gets the pay_with_cheque of this ServicePointCapabilities.  # noqa: E501

        Indicates whether pay with cheque option is available in the service point or not  # noqa: E501

        :return: The pay_with_cheque of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._pay_with_cheque

    @pay_with_cheque.setter
    def pay_with_cheque(self, pay_with_cheque):
        """Sets the pay_with_cheque of this ServicePointCapabilities.

        Indicates whether pay with cheque option is available in the service point or not  # noqa: E501

        :param pay_with_cheque: The pay_with_cheque of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._pay_with_cheque = pay_with_cheque

    @property
    def pay_with_mobile(self):
        """Gets the pay_with_mobile of this ServicePointCapabilities.  # noqa: E501

        Indicates whether pay with mobile option is available in the service point or not  # noqa: E501

        :return: The pay_with_mobile of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._pay_with_mobile

    @pay_with_mobile.setter
    def pay_with_mobile(self, pay_with_mobile):
        """Sets the pay_with_mobile of this ServicePointCapabilities.

        Indicates whether pay with mobile option is available in the service point or not  # noqa: E501

        :param pay_with_mobile: The pay_with_mobile of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._pay_with_mobile = pay_with_mobile

    @property
    def pay_with_pay_pal(self):
        """Gets the pay_with_pay_pal of this ServicePointCapabilities.  # noqa: E501

        Indicates whether pay with paypal option is available in the service point or not  # noqa: E501

        :return: The pay_with_pay_pal of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._pay_with_pay_pal

    @pay_with_pay_pal.setter
    def pay_with_pay_pal(self, pay_with_pay_pal):
        """Sets the pay_with_pay_pal of this ServicePointCapabilities.

        Indicates whether pay with paypal option is available in the service point or not  # noqa: E501

        :param pay_with_pay_pal: The pay_with_pay_pal of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._pay_with_pay_pal = pay_with_pay_pal

    @property
    def parking_title(self):
        """Gets the parking_title of this ServicePointCapabilities.  # noqa: E501

        Title for the parking icon  # noqa: E501

        :return: The parking_title of this ServicePointCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._parking_title

    @parking_title.setter
    def parking_title(self, parking_title):
        """Sets the parking_title of this ServicePointCapabilities.

        Title for the parking icon  # noqa: E501

        :param parking_title: The parking_title of this ServicePointCapabilities.  # noqa: E501
        :type: str
        """

        self._parking_title = parking_title

    @property
    def disabled_access_title(self):
        """Gets the disabled_access_title of this ServicePointCapabilities.  # noqa: E501

        Title for the disable wheel chair icon  # noqa: E501

        :return: The disabled_access_title of this ServicePointCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._disabled_access_title

    @disabled_access_title.setter
    def disabled_access_title(self, disabled_access_title):
        """Sets the disabled_access_title of this ServicePointCapabilities.

        Title for the disable wheel chair icon  # noqa: E501

        :param disabled_access_title: The disabled_access_title of this ServicePointCapabilities.  # noqa: E501
        :type: str
        """

        self._disabled_access_title = disabled_access_title

    @property
    def piece_weight_limit(self):
        """Gets the piece_weight_limit of this ServicePointCapabilities.  # noqa: E501

        Piece Weight Limit  # noqa: E501

        :return: The piece_weight_limit of this ServicePointCapabilities.  # noqa: E501
        :rtype: float
        """
        return self._piece_weight_limit

    @piece_weight_limit.setter
    def piece_weight_limit(self, piece_weight_limit):
        """Sets the piece_weight_limit of this ServicePointCapabilities.

        Piece Weight Limit  # noqa: E501

        :param piece_weight_limit: The piece_weight_limit of this ServicePointCapabilities.  # noqa: E501
        :type: float
        """

        self._piece_weight_limit = piece_weight_limit

    @property
    def piece_weight_limit_unit(self):
        """Gets the piece_weight_limit_unit of this ServicePointCapabilities.  # noqa: E501

        Enumeration (KG or LB)  # noqa: E501

        :return: The piece_weight_limit_unit of this ServicePointCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._piece_weight_limit_unit

    @piece_weight_limit_unit.setter
    def piece_weight_limit_unit(self, piece_weight_limit_unit):
        """Sets the piece_weight_limit_unit of this ServicePointCapabilities.

        Enumeration (KG or LB)  # noqa: E501

        :param piece_weight_limit_unit: The piece_weight_limit_unit of this ServicePointCapabilities.  # noqa: E501
        :type: str
        """

        self._piece_weight_limit_unit = piece_weight_limit_unit

    @property
    def piece_dimensions_limit(self):
        """Gets the piece_dimensions_limit of this ServicePointCapabilities.  # noqa: E501


        :return: The piece_dimensions_limit of this ServicePointCapabilities.  # noqa: E501
        :rtype: Dimensions
        """
        return self._piece_dimensions_limit

    @piece_dimensions_limit.setter
    def piece_dimensions_limit(self, piece_dimensions_limit):
        """Sets the piece_dimensions_limit of this ServicePointCapabilities.


        :param piece_dimensions_limit: The piece_dimensions_limit of this ServicePointCapabilities.  # noqa: E501
        :type: Dimensions
        """

        self._piece_dimensions_limit = piece_dimensions_limit

    @property
    def piece_dimensions_limit_unit(self):
        """Gets the piece_dimensions_limit_unit of this ServicePointCapabilities.  # noqa: E501

        Enumeration (CM or IN)  # noqa: E501

        :return: The piece_dimensions_limit_unit of this ServicePointCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._piece_dimensions_limit_unit

    @piece_dimensions_limit_unit.setter
    def piece_dimensions_limit_unit(self, piece_dimensions_limit_unit):
        """Sets the piece_dimensions_limit_unit of this ServicePointCapabilities.

        Enumeration (CM or IN)  # noqa: E501

        :param piece_dimensions_limit_unit: The piece_dimensions_limit_unit of this ServicePointCapabilities.  # noqa: E501
        :type: str
        """

        self._piece_dimensions_limit_unit = piece_dimensions_limit_unit

    @property
    def piece_count_limit(self):
        """Gets the piece_count_limit of this ServicePointCapabilities.  # noqa: E501

        Number (integer)  # noqa: E501

        :return: The piece_count_limit of this ServicePointCapabilities.  # noqa: E501
        :rtype: float
        """
        return self._piece_count_limit

    @piece_count_limit.setter
    def piece_count_limit(self, piece_count_limit):
        """Sets the piece_count_limit of this ServicePointCapabilities.

        Number (integer)  # noqa: E501

        :param piece_count_limit: The piece_count_limit of this ServicePointCapabilities.  # noqa: E501
        :type: float
        """

        self._piece_count_limit = piece_count_limit

    @property
    def account_prepaid_shippers(self):
        """Gets the account_prepaid_shippers of this ServicePointCapabilities.  # noqa: E501

        Account prepaid shippers  # noqa: E501

        :return: The account_prepaid_shippers of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._account_prepaid_shippers

    @account_prepaid_shippers.setter
    def account_prepaid_shippers(self, account_prepaid_shippers):
        """Sets the account_prepaid_shippers of this ServicePointCapabilities.

        Account prepaid shippers  # noqa: E501

        :param account_prepaid_shippers: The account_prepaid_shippers of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._account_prepaid_shippers = account_prepaid_shippers

    @property
    def prepaid_shippers(self):
        """Gets the prepaid_shippers of this ServicePointCapabilities.  # noqa: E501

        Prepaid shippers  # noqa: E501

        :return: The prepaid_shippers of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._prepaid_shippers

    @prepaid_shippers.setter
    def prepaid_shippers(self, prepaid_shippers):
        """Sets the prepaid_shippers of this ServicePointCapabilities.

        Prepaid shippers  # noqa: E501

        :param prepaid_shippers: The prepaid_shippers of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._prepaid_shippers = prepaid_shippers

    @property
    def pre_print_return_label(self):
        """Gets the pre_print_return_label of this ServicePointCapabilities.  # noqa: E501

        Pre-printed return label  # noqa: E501

        :return: The pre_print_return_label of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._pre_print_return_label

    @pre_print_return_label.setter
    def pre_print_return_label(self, pre_print_return_label):
        """Sets the pre_print_return_label of this ServicePointCapabilities.

        Pre-printed return label  # noqa: E501

        :param pre_print_return_label: The pre_print_return_label of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._pre_print_return_label = pre_print_return_label

    @property
    def label_free(self):
        """Gets the label_free of this ServicePointCapabilities.  # noqa: E501

        Indicates whether this particular service point can handle label free shipments or not  # noqa: E501

        :return: The label_free of this ServicePointCapabilities.  # noqa: E501
        :rtype: bool
        """
        return self._label_free

    @label_free.setter
    def label_free(self, label_free):
        """Sets the label_free of this ServicePointCapabilities.

        Indicates whether this particular service point can handle label free shipments or not  # noqa: E501

        :param label_free: The label_free of this ServicePointCapabilities.  # noqa: E501
        :type: bool
        """

        self._label_free = label_free

    @property
    def ppc_list(self):
        """Gets the ppc_list of this ServicePointCapabilities.  # noqa: E501

        PPC list.  # noqa: E501

        :return: The ppc_list of this ServicePointCapabilities.  # noqa: E501
        :rtype: list[str]
        """
        return self._ppc_list

    @ppc_list.setter
    def ppc_list(self, ppc_list):
        """Sets the ppc_list of this ServicePointCapabilities.

        PPC list.  # noqa: E501

        :param ppc_list: The ppc_list of this ServicePointCapabilities.  # noqa: E501
        :type: list[str]
        """

        self._ppc_list = ppc_list

    @property
    def html(self):
        """Gets the html of this ServicePointCapabilities.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The html of this ServicePointCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ServicePointCapabilities.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param html: The html of this ServicePointCapabilities.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def capability_codes(self):
        """Gets the capability_codes of this ServicePointCapabilities.  # noqa: E501

        PPC codes available for this service point  # noqa: E501

        :return: The capability_codes of this ServicePointCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._capability_codes

    @capability_codes.setter
    def capability_codes(self, capability_codes):
        """Sets the capability_codes of this ServicePointCapabilities.

        PPC codes available for this service point  # noqa: E501

        :param capability_codes: The capability_codes of this ServicePointCapabilities.  # noqa: E501
        :type: str
        """

        self._capability_codes = capability_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePointCapabilities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePointCapabilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
