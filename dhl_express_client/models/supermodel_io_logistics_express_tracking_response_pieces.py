# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressTrackingResponsePieces(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'float',
        'type_code': 'str',
        'shipment_tracking_number': 'str',
        'tracking_number': 'str',
        'description': 'str',
        'weight': 'float',
        'dimensional_weight': 'float',
        'actual_weight': 'float',
        'dimensions': 'Dimensions2',
        'actual_dimensions': 'Dimensions3',
        'unit_of_measurements': 'str',
        'shipper_references': 'list[SupermodelIoLogisticsExpressReference]',
        'events': 'list[SupermodelIoLogisticsExpressTrackingResponseEvents1]'
    }

    attribute_map = {
        'number': 'number',
        'type_code': 'typeCode',
        'shipment_tracking_number': 'shipmentTrackingNumber',
        'tracking_number': 'trackingNumber',
        'description': 'description',
        'weight': 'weight',
        'dimensional_weight': 'dimensionalWeight',
        'actual_weight': 'actualWeight',
        'dimensions': 'dimensions',
        'actual_dimensions': 'actualDimensions',
        'unit_of_measurements': 'unitOfMeasurements',
        'shipper_references': 'shipperReferences',
        'events': 'events'
    }

    def __init__(self, number=None, type_code=None, shipment_tracking_number=None, tracking_number=None, description=None, weight=None, dimensional_weight=None, actual_weight=None, dimensions=None, actual_dimensions=None, unit_of_measurements=None, shipper_references=None, events=None):  # noqa: E501
        """SupermodelIoLogisticsExpressTrackingResponsePieces - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._type_code = None
        self._shipment_tracking_number = None
        self._tracking_number = None
        self._description = None
        self._weight = None
        self._dimensional_weight = None
        self._actual_weight = None
        self._dimensions = None
        self._actual_dimensions = None
        self._unit_of_measurements = None
        self._shipper_references = None
        self._events = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if type_code is not None:
            self.type_code = type_code
        if shipment_tracking_number is not None:
            self.shipment_tracking_number = shipment_tracking_number
        if tracking_number is not None:
            self.tracking_number = tracking_number
        if description is not None:
            self.description = description
        if weight is not None:
            self.weight = weight
        if dimensional_weight is not None:
            self.dimensional_weight = dimensional_weight
        if actual_weight is not None:
            self.actual_weight = actual_weight
        if dimensions is not None:
            self.dimensions = dimensions
        if actual_dimensions is not None:
            self.actual_dimensions = actual_dimensions
        if unit_of_measurements is not None:
            self.unit_of_measurements = unit_of_measurements
        if shipper_references is not None:
            self.shipper_references = shipper_references
        self.events = events

    @property
    def number(self):
        """Gets the number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param number: The number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: float
        """

        self._number = number

    @property
    def type_code(self):
        """Gets the type_code of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The type_code of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param type_code: The type_code of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: str
        """

        self._type_code = type_code

    @property
    def shipment_tracking_number(self):
        """Gets the shipment_tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The shipment_tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: str
        """
        return self._shipment_tracking_number

    @shipment_tracking_number.setter
    def shipment_tracking_number(self, shipment_tracking_number):
        """Sets the shipment_tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param shipment_tracking_number: The shipment_tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: str
        """

        self._shipment_tracking_number = shipment_tracking_number

    @property
    def tracking_number(self):
        """Gets the tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param tracking_number: The tracking_number of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: str
        """

        self._tracking_number = tracking_number

    @property
    def description(self):
        """Gets the description of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The description of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param description: The description of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def weight(self):
        """Gets the weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501

        The weight of the package.  # noqa: E501

        :return: The weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.

        The weight of the package.  # noqa: E501

        :param weight: The weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def dimensional_weight(self):
        """Gets the dimensional_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501

        The weight of the package.  # noqa: E501

        :return: The dimensional_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: float
        """
        return self._dimensional_weight

    @dimensional_weight.setter
    def dimensional_weight(self, dimensional_weight):
        """Sets the dimensional_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.

        The weight of the package.  # noqa: E501

        :param dimensional_weight: The dimensional_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: float
        """

        self._dimensional_weight = dimensional_weight

    @property
    def actual_weight(self):
        """Gets the actual_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501

        The weight of the package.  # noqa: E501

        :return: The actual_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: float
        """
        return self._actual_weight

    @actual_weight.setter
    def actual_weight(self, actual_weight):
        """Sets the actual_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.

        The weight of the package.  # noqa: E501

        :param actual_weight: The actual_weight of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: float
        """

        self._actual_weight = actual_weight

    @property
    def dimensions(self):
        """Gets the dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: Dimensions2
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param dimensions: The dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: Dimensions2
        """

        self._dimensions = dimensions

    @property
    def actual_dimensions(self):
        """Gets the actual_dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The actual_dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: Dimensions3
        """
        return self._actual_dimensions

    @actual_dimensions.setter
    def actual_dimensions(self, actual_dimensions):
        """Sets the actual_dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param actual_dimensions: The actual_dimensions of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: Dimensions3
        """

        self._actual_dimensions = actual_dimensions

    @property
    def unit_of_measurements(self):
        """Gets the unit_of_measurements of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The unit_of_measurements of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measurements

    @unit_of_measurements.setter
    def unit_of_measurements(self, unit_of_measurements):
        """Sets the unit_of_measurements of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param unit_of_measurements: The unit_of_measurements of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: str
        """

        self._unit_of_measurements = unit_of_measurements

    @property
    def shipper_references(self):
        """Gets the shipper_references of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The shipper_references of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressReference]
        """
        return self._shipper_references

    @shipper_references.setter
    def shipper_references(self, shipper_references):
        """Sets the shipper_references of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param shipper_references: The shipper_references of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressReference]
        """

        self._shipper_references = shipper_references

    @property
    def events(self):
        """Gets the events of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501


        :return: The events of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressTrackingResponseEvents1]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this SupermodelIoLogisticsExpressTrackingResponsePieces.


        :param events: The events of this SupermodelIoLogisticsExpressTrackingResponsePieces.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressTrackingResponseEvents1]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressTrackingResponsePieces, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressTrackingResponsePieces):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
