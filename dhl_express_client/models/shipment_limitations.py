# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentLimitations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_number_of_pieces': 'ValueUnit',
        'max_shipment_weight': 'ValueUnit',
        'html': 'str'
    }

    attribute_map = {
        'max_number_of_pieces': 'maxNumberOfPieces',
        'max_shipment_weight': 'maxShipmentWeight',
        'html': 'html'
    }

    def __init__(self, max_number_of_pieces=None, max_shipment_weight=None, html=None):  # noqa: E501
        """ShipmentLimitations - a model defined in Swagger"""  # noqa: E501
        self._max_number_of_pieces = None
        self._max_shipment_weight = None
        self._html = None
        self.discriminator = None
        if max_number_of_pieces is not None:
            self.max_number_of_pieces = max_number_of_pieces
        if max_shipment_weight is not None:
            self.max_shipment_weight = max_shipment_weight
        if html is not None:
            self.html = html

    @property
    def max_number_of_pieces(self):
        """Gets the max_number_of_pieces of this ShipmentLimitations.  # noqa: E501


        :return: The max_number_of_pieces of this ShipmentLimitations.  # noqa: E501
        :rtype: ValueUnit
        """
        return self._max_number_of_pieces

    @max_number_of_pieces.setter
    def max_number_of_pieces(self, max_number_of_pieces):
        """Sets the max_number_of_pieces of this ShipmentLimitations.


        :param max_number_of_pieces: The max_number_of_pieces of this ShipmentLimitations.  # noqa: E501
        :type: ValueUnit
        """

        self._max_number_of_pieces = max_number_of_pieces

    @property
    def max_shipment_weight(self):
        """Gets the max_shipment_weight of this ShipmentLimitations.  # noqa: E501


        :return: The max_shipment_weight of this ShipmentLimitations.  # noqa: E501
        :rtype: ValueUnit
        """
        return self._max_shipment_weight

    @max_shipment_weight.setter
    def max_shipment_weight(self, max_shipment_weight):
        """Sets the max_shipment_weight of this ShipmentLimitations.


        :param max_shipment_weight: The max_shipment_weight of this ShipmentLimitations.  # noqa: E501
        :type: ValueUnit
        """

        self._max_shipment_weight = max_shipment_weight

    @property
    def html(self):
        """Gets the html of this ShipmentLimitations.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The html of this ShipmentLimitations.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ShipmentLimitations.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param html: The html of this ShipmentLimitations.  # noqa: E501
        :type: str
        """

        self._html = html

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentLimitations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentLimitations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
