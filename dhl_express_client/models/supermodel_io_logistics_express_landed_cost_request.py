# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressLandedCostRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_details': 'SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails',
        'accounts': 'list[SupermodelIoLogisticsExpressAccount]',
        'product_code': 'str',
        'local_product_code': 'str',
        'unit_of_measurement': 'str',
        'currency_code': 'str',
        'is_customs_declarable': 'bool',
        'is_dtp_requested': 'bool',
        'is_insurance_requested': 'bool',
        'get_cost_breakdown': 'bool',
        'charges': 'list[SupermodelIoLogisticsExpressLandedCostRequestCharges]',
        'shipment_purpose': 'str',
        'transportation_mode': 'str',
        'merchant_selected_carrier_name': 'str',
        'packages': 'list[SupermodelIoLogisticsExpressPackageRR]',
        'items': 'list[SupermodelIoLogisticsExpressLandedCostRequestItems]',
        'get_tariff_formula': 'bool',
        'get_quotation_id': 'bool'
    }

    attribute_map = {
        'customer_details': 'customerDetails',
        'accounts': 'accounts',
        'product_code': 'productCode',
        'local_product_code': 'localProductCode',
        'unit_of_measurement': 'unitOfMeasurement',
        'currency_code': 'currencyCode',
        'is_customs_declarable': 'isCustomsDeclarable',
        'is_dtp_requested': 'isDTPRequested',
        'is_insurance_requested': 'isInsuranceRequested',
        'get_cost_breakdown': 'getCostBreakdown',
        'charges': 'charges',
        'shipment_purpose': 'shipmentPurpose',
        'transportation_mode': 'transportationMode',
        'merchant_selected_carrier_name': 'merchantSelectedCarrierName',
        'packages': 'packages',
        'items': 'items',
        'get_tariff_formula': 'getTariffFormula',
        'get_quotation_id': 'getQuotationID'
    }

    def __init__(self, customer_details=None, accounts=None, product_code=None, local_product_code=None, unit_of_measurement=None, currency_code=None, is_customs_declarable=None, is_dtp_requested=None, is_insurance_requested=None, get_cost_breakdown=None, charges=None, shipment_purpose=None, transportation_mode=None, merchant_selected_carrier_name=None, packages=None, items=None, get_tariff_formula=None, get_quotation_id=None):  # noqa: E501
        """SupermodelIoLogisticsExpressLandedCostRequest - a model defined in Swagger"""  # noqa: E501
        self._customer_details = None
        self._accounts = None
        self._product_code = None
        self._local_product_code = None
        self._unit_of_measurement = None
        self._currency_code = None
        self._is_customs_declarable = None
        self._is_dtp_requested = None
        self._is_insurance_requested = None
        self._get_cost_breakdown = None
        self._charges = None
        self._shipment_purpose = None
        self._transportation_mode = None
        self._merchant_selected_carrier_name = None
        self._packages = None
        self._items = None
        self._get_tariff_formula = None
        self._get_quotation_id = None
        self.discriminator = None
        self.customer_details = customer_details
        self.accounts = accounts
        if product_code is not None:
            self.product_code = product_code
        if local_product_code is not None:
            self.local_product_code = local_product_code
        self.unit_of_measurement = unit_of_measurement
        self.currency_code = currency_code
        self.is_customs_declarable = is_customs_declarable
        if is_dtp_requested is not None:
            self.is_dtp_requested = is_dtp_requested
        if is_insurance_requested is not None:
            self.is_insurance_requested = is_insurance_requested
        self.get_cost_breakdown = get_cost_breakdown
        if charges is not None:
            self.charges = charges
        if shipment_purpose is not None:
            self.shipment_purpose = shipment_purpose
        if transportation_mode is not None:
            self.transportation_mode = transportation_mode
        if merchant_selected_carrier_name is not None:
            self.merchant_selected_carrier_name = merchant_selected_carrier_name
        self.packages = packages
        self.items = items
        if get_tariff_formula is not None:
            self.get_tariff_formula = get_tariff_formula
        if get_quotation_id is not None:
            self.get_quotation_id = get_quotation_id

    @property
    def customer_details(self):
        """Gets the customer_details of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501


        :return: The customer_details of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this SupermodelIoLogisticsExpressLandedCostRequest.


        :param customer_details: The customer_details of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: SupermodelIoLogisticsExpressLandedCostRequestCustomerDetails
        """
        if customer_details is None:
            raise ValueError("Invalid value for `customer_details`, must not be `None`")  # noqa: E501

        self._customer_details = customer_details

    @property
    def accounts(self):
        """Gets the accounts of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Please enter all the DHL Express accounts and types to be used for this shipment  # noqa: E501

        :return: The accounts of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressAccount]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SupermodelIoLogisticsExpressLandedCostRequest.

        Please enter all the DHL Express accounts and types to be used for this shipment  # noqa: E501

        :param accounts: The accounts of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressAccount]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def product_code(self):
        """Gets the product_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Please enter DHL Express Global Product code  # noqa: E501

        :return: The product_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this SupermodelIoLogisticsExpressLandedCostRequest.

        Please enter DHL Express Global Product code  # noqa: E501

        :param product_code: The product_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def local_product_code(self):
        """Gets the local_product_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Please enter DHL Express Local Product code  # noqa: E501

        :return: The local_product_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._local_product_code

    @local_product_code.setter
    def local_product_code(self, local_product_code):
        """Sets the local_product_code of this SupermodelIoLogisticsExpressLandedCostRequest.

        Please enter DHL Express Local Product code  # noqa: E501

        :param local_product_code: The local_product_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """

        self._local_product_code = local_product_code

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Please enter Unit of measurement - metric,imperial  # noqa: E501

        :return: The unit_of_measurement of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this SupermodelIoLogisticsExpressLandedCostRequest.

        Please enter Unit of measurement - metric,imperial  # noqa: E501

        :param unit_of_measurement: The unit_of_measurement of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """
        if unit_of_measurement is None:
            raise ValueError("Invalid value for `unit_of_measurement`, must not be `None`")  # noqa: E501
        allowed_values = ["metric", "imperial"]  # noqa: E501
        if unit_of_measurement not in allowed_values:
            raise ValueError(
                "Invalid value for `unit_of_measurement` ({0}), must be one of {1}"  # noqa: E501
                .format(unit_of_measurement, allowed_values)
            )

        self._unit_of_measurement = unit_of_measurement

    @property
    def currency_code(self):
        """Gets the currency_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Currency code for the item price (the product being sold) and freight charge. The Landed Cost calculation result will be returned in this defined currency  # noqa: E501

        :return: The currency_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SupermodelIoLogisticsExpressLandedCostRequest.

        Currency code for the item price (the product being sold) and freight charge. The Landed Cost calculation result will be returned in this defined currency  # noqa: E501

        :param currency_code: The currency_code of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def is_customs_declarable(self):
        """Gets the is_customs_declarable of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Set this to true is shipment contains declarable content  # noqa: E501

        :return: The is_customs_declarable of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_customs_declarable

    @is_customs_declarable.setter
    def is_customs_declarable(self, is_customs_declarable):
        """Sets the is_customs_declarable of this SupermodelIoLogisticsExpressLandedCostRequest.

        Set this to true is shipment contains declarable content  # noqa: E501

        :param is_customs_declarable: The is_customs_declarable of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: bool
        """
        if is_customs_declarable is None:
            raise ValueError("Invalid value for `is_customs_declarable`, must not be `None`")  # noqa: E501

        self._is_customs_declarable = is_customs_declarable

    @property
    def is_dtp_requested(self):
        """Gets the is_dtp_requested of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Set this to true if you want DHL EXpress product Duties and Taxes Paid outside shipment destination  # noqa: E501

        :return: The is_dtp_requested of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_dtp_requested

    @is_dtp_requested.setter
    def is_dtp_requested(self, is_dtp_requested):
        """Sets the is_dtp_requested of this SupermodelIoLogisticsExpressLandedCostRequest.

        Set this to true if you want DHL EXpress product Duties and Taxes Paid outside shipment destination  # noqa: E501

        :param is_dtp_requested: The is_dtp_requested of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: bool
        """

        self._is_dtp_requested = is_dtp_requested

    @property
    def is_insurance_requested(self):
        """Gets the is_insurance_requested of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Set this true if you ask for DHL Express insurance service  # noqa: E501

        :return: The is_insurance_requested of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_insurance_requested

    @is_insurance_requested.setter
    def is_insurance_requested(self, is_insurance_requested):
        """Sets the is_insurance_requested of this SupermodelIoLogisticsExpressLandedCostRequest.

        Set this true if you ask for DHL Express insurance service  # noqa: E501

        :param is_insurance_requested: The is_insurance_requested of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: bool
        """

        self._is_insurance_requested = is_insurance_requested

    @property
    def get_cost_breakdown(self):
        """Gets the get_cost_breakdown of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Allowed values 'true' - item cost breakdown will be returned, 'false' - item cost breakdown will not be returned  # noqa: E501

        :return: The get_cost_breakdown of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._get_cost_breakdown

    @get_cost_breakdown.setter
    def get_cost_breakdown(self, get_cost_breakdown):
        """Sets the get_cost_breakdown of this SupermodelIoLogisticsExpressLandedCostRequest.

        Allowed values 'true' - item cost breakdown will be returned, 'false' - item cost breakdown will not be returned  # noqa: E501

        :param get_cost_breakdown: The get_cost_breakdown of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: bool
        """
        if get_cost_breakdown is None:
            raise ValueError("Invalid value for `get_cost_breakdown`, must not be `None`")  # noqa: E501

        self._get_cost_breakdown = get_cost_breakdown

    @property
    def charges(self):
        """Gets the charges of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Please provide any additional charges you would like to include in total cost calculation  # noqa: E501

        :return: The charges of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressLandedCostRequestCharges]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this SupermodelIoLogisticsExpressLandedCostRequest.

        Please provide any additional charges you would like to include in total cost calculation  # noqa: E501

        :param charges: The charges of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressLandedCostRequestCharges]
        """

        self._charges = charges

    @property
    def shipment_purpose(self):
        """Gets the shipment_purpose of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Possible values:<BR>      commercial: B2B<BR>      personal: B2C<BR>      commercia': B2B<BR>      personal: B2C  # noqa: E501

        :return: The shipment_purpose of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipment_purpose

    @shipment_purpose.setter
    def shipment_purpose(self, shipment_purpose):
        """Sets the shipment_purpose of this SupermodelIoLogisticsExpressLandedCostRequest.

        Possible values:<BR>      commercial: B2B<BR>      personal: B2C<BR>      commercia': B2B<BR>      personal: B2C  # noqa: E501

        :param shipment_purpose: The shipment_purpose of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["commercial", "personal"]  # noqa: E501
        if shipment_purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `shipment_purpose` ({0}), must be one of {1}"  # noqa: E501
                .format(shipment_purpose, allowed_values)
            )

        self._shipment_purpose = shipment_purpose

    @property
    def transportation_mode(self):
        """Gets the transportation_mode of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501


        :return: The transportation_mode of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._transportation_mode

    @transportation_mode.setter
    def transportation_mode(self, transportation_mode):
        """Sets the transportation_mode of this SupermodelIoLogisticsExpressLandedCostRequest.


        :param transportation_mode: The transportation_mode of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["air", "ocean", "ground"]  # noqa: E501
        if transportation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `transportation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(transportation_mode, allowed_values)
            )

        self._transportation_mode = transportation_mode

    @property
    def merchant_selected_carrier_name(self):
        """Gets the merchant_selected_carrier_name of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Carrier being used to ship with. Allowed values are:<BR>      'DHL','UPS','FEDEX','TNT','POST',<BR>      'OTHERS'  # noqa: E501

        :return: The merchant_selected_carrier_name of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_selected_carrier_name

    @merchant_selected_carrier_name.setter
    def merchant_selected_carrier_name(self, merchant_selected_carrier_name):
        """Sets the merchant_selected_carrier_name of this SupermodelIoLogisticsExpressLandedCostRequest.

        Carrier being used to ship with. Allowed values are:<BR>      'DHL','UPS','FEDEX','TNT','POST',<BR>      'OTHERS'  # noqa: E501

        :param merchant_selected_carrier_name: The merchant_selected_carrier_name of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["DHL", "UPS", "FEDEX", "TNT", "POST", "OTHERS"]  # noqa: E501
        if merchant_selected_carrier_name not in allowed_values:
            raise ValueError(
                "Invalid value for `merchant_selected_carrier_name` ({0}), must be one of {1}"  # noqa: E501
                .format(merchant_selected_carrier_name, allowed_values)
            )

        self._merchant_selected_carrier_name = merchant_selected_carrier_name

    @property
    def packages(self):
        """Gets the packages of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Here you can define properties per package  # noqa: E501

        :return: The packages of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressPackageRR]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this SupermodelIoLogisticsExpressLandedCostRequest.

        Here you can define properties per package  # noqa: E501

        :param packages: The packages of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressPackageRR]
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")  # noqa: E501

        self._packages = packages

    @property
    def items(self):
        """Gets the items of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501


        :return: The items of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressLandedCostRequestItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SupermodelIoLogisticsExpressLandedCostRequest.


        :param items: The items of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressLandedCostRequestItems]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def get_tariff_formula(self):
        """Gets the get_tariff_formula of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Allowed values 'true' - tariff formula on item and shipment level will be returned, 'false' - tariff formula on item and shipment level will not be returned  # noqa: E501

        :return: The get_tariff_formula of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._get_tariff_formula

    @get_tariff_formula.setter
    def get_tariff_formula(self, get_tariff_formula):
        """Sets the get_tariff_formula of this SupermodelIoLogisticsExpressLandedCostRequest.

        Allowed values 'true' - tariff formula on item and shipment level will be returned, 'false' - tariff formula on item and shipment level will not be returned  # noqa: E501

        :param get_tariff_formula: The get_tariff_formula of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: bool
        """

        self._get_tariff_formula = get_tariff_formula

    @property
    def get_quotation_id(self):
        """Gets the get_quotation_id of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501

        Allowed values 'true' - quotation ID on shipment level will be returned, 'false' - quotation ID on shipment level will not be returned  # noqa: E501

        :return: The get_quotation_id of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :rtype: bool
        """
        return self._get_quotation_id

    @get_quotation_id.setter
    def get_quotation_id(self, get_quotation_id):
        """Sets the get_quotation_id of this SupermodelIoLogisticsExpressLandedCostRequest.

        Allowed values 'true' - quotation ID on shipment level will be returned, 'false' - quotation ID on shipment level will not be returned  # noqa: E501

        :param get_quotation_id: The get_quotation_id of this SupermodelIoLogisticsExpressLandedCostRequest.  # noqa: E501
        :type: bool
        """

        self._get_quotation_id = get_quotation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressLandedCostRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressLandedCostRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
