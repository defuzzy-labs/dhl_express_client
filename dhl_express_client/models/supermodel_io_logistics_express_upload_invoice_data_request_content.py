# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services    In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.7.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_declaration': 'list[SupermodelIoLogisticsExpressExportDeclaration]',
        'currency': 'str',
        'unit_of_measurement': 'str'
    }

    attribute_map = {
        'export_declaration': 'exportDeclaration',
        'currency': 'currency',
        'unit_of_measurement': 'unitOfMeasurement'
    }

    def __init__(self, export_declaration=None, currency=None, unit_of_measurement=None):  # noqa: E501
        """SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent - a model defined in Swagger"""  # noqa: E501
        self._export_declaration = None
        self._currency = None
        self._unit_of_measurement = None
        self.discriminator = None
        self.export_declaration = export_declaration
        self.currency = currency
        self.unit_of_measurement = unit_of_measurement

    @property
    def export_declaration(self):
        """Gets the export_declaration of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501

        Here you can find all details related to export declaration  # noqa: E501

        :return: The export_declaration of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressExportDeclaration]
        """
        return self._export_declaration

    @export_declaration.setter
    def export_declaration(self, export_declaration):
        """Sets the export_declaration of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.

        Here you can find all details related to export declaration  # noqa: E501

        :param export_declaration: The export_declaration of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressExportDeclaration]
        """
        if export_declaration is None:
            raise ValueError("Invalid value for `export_declaration`, must not be `None`")  # noqa: E501

        self._export_declaration = export_declaration

    @property
    def currency(self):
        """Gets the currency of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501

        For customs purposes please advise on currency code of the indicated amount in invoice.  # noqa: E501

        :return: The currency of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.

        For customs purposes please advise on currency code of the indicated amount in invoice.  # noqa: E501

        :param currency: The currency of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def unit_of_measurement(self):
        """Gets the unit_of_measurement of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501

        Please enter Unit of measurement - metric,imperial  # noqa: E501

        :return: The unit_of_measurement of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measurement

    @unit_of_measurement.setter
    def unit_of_measurement(self, unit_of_measurement):
        """Sets the unit_of_measurement of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.

        Please enter Unit of measurement - metric,imperial  # noqa: E501

        :param unit_of_measurement: The unit_of_measurement of this SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent.  # noqa: E501
        :type: str
        """
        if unit_of_measurement is None:
            raise ValueError("Invalid value for `unit_of_measurement`, must not be `None`")  # noqa: E501
        allowed_values = ["metric", "imperial"]  # noqa: E501
        if unit_of_measurement not in allowed_values:
            raise ValueError(
                "Invalid value for `unit_of_measurement` ({0}), must be one of {1}"  # noqa: E501
                .format(unit_of_measurement, allowed_values)
            )

        self._unit_of_measurement = unit_of_measurement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressUploadInvoiceDataRequestContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
