# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Promotion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'country_code': 'str',
        'partner_type_code': 'str',
        'service_point_id': 'str',
        'client_id': 'str',
        'capability': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'day_of_week': 'str',
        'text': 'str',
        'button_text': 'str',
        'language_code1': 'str',
        'text1': 'str',
        'button_text1': 'str',
        'language_code2': 'str',
        'text2': 'str',
        'button_text2': 'str',
        'language_code3': 'str',
        'text3': 'str',
        'button_text3': 'str',
        'hyperlink': 'str',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'country_code': 'countryCode',
        'partner_type_code': 'partnerTypeCode',
        'service_point_id': 'servicePointId',
        'client_id': 'clientId',
        'capability': 'capability',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'day_of_week': 'dayOfWeek',
        'text': 'text',
        'button_text': 'buttonText',
        'language_code1': 'languageCode1',
        'text1': 'text1',
        'button_text1': 'buttonText1',
        'language_code2': 'languageCode2',
        'text2': 'text2',
        'button_text2': 'buttonText2',
        'language_code3': 'languageCode3',
        'text3': 'text3',
        'button_text3': 'buttonText3',
        'hyperlink': 'hyperlink',
        'created': 'created'
    }

    def __init__(self, id=None, country_code=None, partner_type_code=None, service_point_id=None, client_id=None, capability=None, start_date=None, end_date=None, day_of_week=None, text=None, button_text=None, language_code1=None, text1=None, button_text1=None, language_code2=None, text2=None, button_text2=None, language_code3=None, text3=None, button_text3=None, hyperlink=None, created=None):  # noqa: E501
        """Promotion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._country_code = None
        self._partner_type_code = None
        self._service_point_id = None
        self._client_id = None
        self._capability = None
        self._start_date = None
        self._end_date = None
        self._day_of_week = None
        self._text = None
        self._button_text = None
        self._language_code1 = None
        self._text1 = None
        self._button_text1 = None
        self._language_code2 = None
        self._text2 = None
        self._button_text2 = None
        self._language_code3 = None
        self._text3 = None
        self._button_text3 = None
        self._hyperlink = None
        self._created = None
        self.discriminator = None
        self.id = id
        if country_code is not None:
            self.country_code = country_code
        if partner_type_code is not None:
            self.partner_type_code = partner_type_code
        if service_point_id is not None:
            self.service_point_id = service_point_id
        self.client_id = client_id
        self.capability = capability
        self.start_date = start_date
        self.end_date = end_date
        if day_of_week is not None:
            self.day_of_week = day_of_week
        self.text = text
        if button_text is not None:
            self.button_text = button_text
        if language_code1 is not None:
            self.language_code1 = language_code1
        if text1 is not None:
            self.text1 = text1
        if button_text1 is not None:
            self.button_text1 = button_text1
        if language_code2 is not None:
            self.language_code2 = language_code2
        if text2 is not None:
            self.text2 = text2
        if button_text2 is not None:
            self.button_text2 = button_text2
        if language_code3 is not None:
            self.language_code3 = language_code3
        if text3 is not None:
            self.text3 = text3
        if button_text3 is not None:
            self.button_text3 = button_text3
        if hyperlink is not None:
            self.hyperlink = hyperlink
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this Promotion.  # noqa: E501

        Unique identifier for promotion  # noqa: E501

        :return: The id of this Promotion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Promotion.

        Unique identifier for promotion  # noqa: E501

        :param id: The id of this Promotion.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def country_code(self):
        """Gets the country_code of this Promotion.  # noqa: E501

        Country Code  # noqa: E501

        :return: The country_code of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Promotion.

        Country Code  # noqa: E501

        :param country_code: The country_code of this Promotion.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def partner_type_code(self):
        """Gets the partner_type_code of this Promotion.  # noqa: E501

        Partner Type code  # noqa: E501

        :return: The partner_type_code of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._partner_type_code

    @partner_type_code.setter
    def partner_type_code(self, partner_type_code):
        """Sets the partner_type_code of this Promotion.

        Partner Type code  # noqa: E501

        :param partner_type_code: The partner_type_code of this Promotion.  # noqa: E501
        :type: str
        """

        self._partner_type_code = partner_type_code

    @property
    def service_point_id(self):
        """Gets the service_point_id of this Promotion.  # noqa: E501

        Service Point ID  # noqa: E501

        :return: The service_point_id of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._service_point_id

    @service_point_id.setter
    def service_point_id(self, service_point_id):
        """Sets the service_point_id of this Promotion.

        Service Point ID  # noqa: E501

        :param service_point_id: The service_point_id of this Promotion.  # noqa: E501
        :type: str
        """

        self._service_point_id = service_point_id

    @property
    def client_id(self):
        """Gets the client_id of this Promotion.  # noqa: E501

        Client ID  # noqa: E501

        :return: The client_id of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Promotion.

        Client ID  # noqa: E501

        :param client_id: The client_id of this Promotion.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def capability(self):
        """Gets the capability of this Promotion.  # noqa: E501

        Capability(PPC)  # noqa: E501

        :return: The capability of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this Promotion.

        Capability(PPC)  # noqa: E501

        :param capability: The capability of this Promotion.  # noqa: E501
        :type: str
        """
        if capability is None:
            raise ValueError("Invalid value for `capability`, must not be `None`")  # noqa: E501

        self._capability = capability

    @property
    def start_date(self):
        """Gets the start_date of this Promotion.  # noqa: E501

        Promotion Start date  # noqa: E501

        :return: The start_date of this Promotion.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Promotion.

        Promotion Start date  # noqa: E501

        :param start_date: The start_date of this Promotion.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Promotion.  # noqa: E501

        Promotion End date  # noqa: E501

        :return: The end_date of this Promotion.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Promotion.

        Promotion End date  # noqa: E501

        :param end_date: The end_date of this Promotion.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def day_of_week(self):
        """Gets the day_of_week of this Promotion.  # noqa: E501

        Promotion on specific day of the week  # noqa: E501

        :return: The day_of_week of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this Promotion.

        Promotion on specific day of the week  # noqa: E501

        :param day_of_week: The day_of_week of this Promotion.  # noqa: E501
        :type: str
        """

        self._day_of_week = day_of_week

    @property
    def text(self):
        """Gets the text of this Promotion.  # noqa: E501

        Promotion message  # noqa: E501

        :return: The text of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Promotion.

        Promotion message  # noqa: E501

        :param text: The text of this Promotion.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def button_text(self):
        """Gets the button_text of this Promotion.  # noqa: E501

        Promotion button text  # noqa: E501

        :return: The button_text of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._button_text

    @button_text.setter
    def button_text(self, button_text):
        """Sets the button_text of this Promotion.

        Promotion button text  # noqa: E501

        :param button_text: The button_text of this Promotion.  # noqa: E501
        :type: str
        """

        self._button_text = button_text

    @property
    def language_code1(self):
        """Gets the language_code1 of this Promotion.  # noqa: E501

        Promotion Language Code  # noqa: E501

        :return: The language_code1 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._language_code1

    @language_code1.setter
    def language_code1(self, language_code1):
        """Sets the language_code1 of this Promotion.

        Promotion Language Code  # noqa: E501

        :param language_code1: The language_code1 of this Promotion.  # noqa: E501
        :type: str
        """

        self._language_code1 = language_code1

    @property
    def text1(self):
        """Gets the text1 of this Promotion.  # noqa: E501

        Promotion message  # noqa: E501

        :return: The text1 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._text1

    @text1.setter
    def text1(self, text1):
        """Sets the text1 of this Promotion.

        Promotion message  # noqa: E501

        :param text1: The text1 of this Promotion.  # noqa: E501
        :type: str
        """

        self._text1 = text1

    @property
    def button_text1(self):
        """Gets the button_text1 of this Promotion.  # noqa: E501

        Promotion button text  # noqa: E501

        :return: The button_text1 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._button_text1

    @button_text1.setter
    def button_text1(self, button_text1):
        """Sets the button_text1 of this Promotion.

        Promotion button text  # noqa: E501

        :param button_text1: The button_text1 of this Promotion.  # noqa: E501
        :type: str
        """

        self._button_text1 = button_text1

    @property
    def language_code2(self):
        """Gets the language_code2 of this Promotion.  # noqa: E501

        Promotion Language Code  # noqa: E501

        :return: The language_code2 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._language_code2

    @language_code2.setter
    def language_code2(self, language_code2):
        """Sets the language_code2 of this Promotion.

        Promotion Language Code  # noqa: E501

        :param language_code2: The language_code2 of this Promotion.  # noqa: E501
        :type: str
        """

        self._language_code2 = language_code2

    @property
    def text2(self):
        """Gets the text2 of this Promotion.  # noqa: E501

        Promotion message  # noqa: E501

        :return: The text2 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._text2

    @text2.setter
    def text2(self, text2):
        """Sets the text2 of this Promotion.

        Promotion message  # noqa: E501

        :param text2: The text2 of this Promotion.  # noqa: E501
        :type: str
        """

        self._text2 = text2

    @property
    def button_text2(self):
        """Gets the button_text2 of this Promotion.  # noqa: E501

        Promotion button text  # noqa: E501

        :return: The button_text2 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._button_text2

    @button_text2.setter
    def button_text2(self, button_text2):
        """Sets the button_text2 of this Promotion.

        Promotion button text  # noqa: E501

        :param button_text2: The button_text2 of this Promotion.  # noqa: E501
        :type: str
        """

        self._button_text2 = button_text2

    @property
    def language_code3(self):
        """Gets the language_code3 of this Promotion.  # noqa: E501

        Promotion Language Code  # noqa: E501

        :return: The language_code3 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._language_code3

    @language_code3.setter
    def language_code3(self, language_code3):
        """Sets the language_code3 of this Promotion.

        Promotion Language Code  # noqa: E501

        :param language_code3: The language_code3 of this Promotion.  # noqa: E501
        :type: str
        """

        self._language_code3 = language_code3

    @property
    def text3(self):
        """Gets the text3 of this Promotion.  # noqa: E501

        Promotion message  # noqa: E501

        :return: The text3 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._text3

    @text3.setter
    def text3(self, text3):
        """Sets the text3 of this Promotion.

        Promotion message  # noqa: E501

        :param text3: The text3 of this Promotion.  # noqa: E501
        :type: str
        """

        self._text3 = text3

    @property
    def button_text3(self):
        """Gets the button_text3 of this Promotion.  # noqa: E501

        Promotion button text  # noqa: E501

        :return: The button_text3 of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._button_text3

    @button_text3.setter
    def button_text3(self, button_text3):
        """Sets the button_text3 of this Promotion.

        Promotion button text  # noqa: E501

        :param button_text3: The button_text3 of this Promotion.  # noqa: E501
        :type: str
        """

        self._button_text3 = button_text3

    @property
    def hyperlink(self):
        """Gets the hyperlink of this Promotion.  # noqa: E501

        Promotion Web link  # noqa: E501

        :return: The hyperlink of this Promotion.  # noqa: E501
        :rtype: str
        """
        return self._hyperlink

    @hyperlink.setter
    def hyperlink(self, hyperlink):
        """Sets the hyperlink of this Promotion.

        Promotion Web link  # noqa: E501

        :param hyperlink: The hyperlink of this Promotion.  # noqa: E501
        :type: str
        """

        self._hyperlink = hyperlink

    @property
    def created(self):
        """Gets the created of this Promotion.  # noqa: E501

        Promotion created date  # noqa: E501

        :return: The created of this Promotion.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Promotion.

        Promotion created date  # noqa: E501

        :param created: The created of this Promotion.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Promotion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Promotion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
