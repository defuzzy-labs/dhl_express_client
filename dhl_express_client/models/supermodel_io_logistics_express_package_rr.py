# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressPackageRR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type_code': 'str',
        'weight': 'float',
        'dimensions': 'Dimensions1'
    }

    attribute_map = {
        'type_code': 'typeCode',
        'weight': 'weight',
        'dimensions': 'dimensions'
    }

    def __init__(self, type_code=None, weight=None, dimensions=None):  # noqa: E501
        """SupermodelIoLogisticsExpressPackageRR - a model defined in Swagger"""  # noqa: E501
        self._type_code = None
        self._weight = None
        self._dimensions = None
        self.discriminator = None
        if type_code is not None:
            self.type_code = type_code
        self.weight = weight
        self.dimensions = dimensions

    @property
    def type_code(self):
        """Gets the type_code of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501

        Please contact your DHL Express representative if you wish to use a DHL specific package otherwise ignore this element.  # noqa: E501

        :return: The type_code of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this SupermodelIoLogisticsExpressPackageRR.

        Please contact your DHL Express representative if you wish to use a DHL specific package otherwise ignore this element.  # noqa: E501

        :param type_code: The type_code of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501
        :type: str
        """
        allowed_values = ["3BX", "2BC", "2BP", "CE1", "7BX", "6BX", "4BX", "2BX", "1CE", "WB1", "WB3", "XPD", "8BX", "5BX", "WB6", "TBL", "TBS", "WB2"]  # noqa: E501
        if type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(type_code, allowed_values)
            )

        self._type_code = type_code

    @property
    def weight(self):
        """Gets the weight of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501

        The weight of the package.  # noqa: E501

        :return: The weight of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SupermodelIoLogisticsExpressPackageRR.

        The weight of the package.  # noqa: E501

        :param weight: The weight of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501
        :type: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def dimensions(self):
        """Gets the dimensions of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501


        :return: The dimensions of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501
        :rtype: Dimensions1
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SupermodelIoLogisticsExpressPackageRR.


        :param dimensions: The dimensions of this SupermodelIoLogisticsExpressPackageRR.  # noqa: E501
        :type: Dimensions1
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressPackageRR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressPackageRR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
