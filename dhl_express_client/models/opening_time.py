# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpeningTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_week': 'str',
        'opening_time': 'str',
        'closing_time': 'str'
    }

    attribute_map = {
        'day_of_week': 'dayOfWeek',
        'opening_time': 'openingTime',
        'closing_time': 'closingTime'
    }

    def __init__(self, day_of_week=None, opening_time=None, closing_time=None):  # noqa: E501
        """OpeningTime - a model defined in Swagger"""  # noqa: E501
        self._day_of_week = None
        self._opening_time = None
        self._closing_time = None
        self.discriminator = None
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if opening_time is not None:
            self.opening_time = opening_time
        if closing_time is not None:
            self.closing_time = closing_time

    @property
    def day_of_week(self):
        """Gets the day_of_week of this OpeningTime.  # noqa: E501

        Weekday for which this opening hours entity is valid. Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY, HOLIDAY  # noqa: E501

        :return: The day_of_week of this OpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this OpeningTime.

        Weekday for which this opening hours entity is valid. Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY, HOLIDAY  # noqa: E501

        :param day_of_week: The day_of_week of this OpeningTime.  # noqa: E501
        :type: str
        """
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "HOLIDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"  # noqa: E501
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def opening_time(self):
        """Gets the opening_time of this OpeningTime.  # noqa: E501

        The opening time of this entity  # noqa: E501

        :return: The opening_time of this OpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._opening_time

    @opening_time.setter
    def opening_time(self, opening_time):
        """Sets the opening_time of this OpeningTime.

        The opening time of this entity  # noqa: E501

        :param opening_time: The opening_time of this OpeningTime.  # noqa: E501
        :type: str
        """

        self._opening_time = opening_time

    @property
    def closing_time(self):
        """Gets the closing_time of this OpeningTime.  # noqa: E501

        The closing time of this entity  # noqa: E501

        :return: The closing_time of this OpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._closing_time

    @closing_time.setter
    def closing_time(self, closing_time):
        """Sets the closing_time of this OpeningTime.

        The closing time of this entity  # noqa: E501

        :param closing_time: The closing_time of this OpeningTime.  # noqa: E501
        :type: str
        """

        self._closing_time = closing_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpeningTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpeningTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
