# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressValueAddedServicesRates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_code': 'str',
        'local_service_code': 'str',
        'value': 'float',
        'currency': 'str',
        'method': 'str'
    }

    attribute_map = {
        'service_code': 'serviceCode',
        'local_service_code': 'localServiceCode',
        'value': 'value',
        'currency': 'currency',
        'method': 'method'
    }

    def __init__(self, service_code=None, local_service_code=None, value=None, currency=None, method=None):  # noqa: E501
        """SupermodelIoLogisticsExpressValueAddedServicesRates - a model defined in Swagger"""  # noqa: E501
        self._service_code = None
        self._local_service_code = None
        self._value = None
        self._currency = None
        self._method = None
        self.discriminator = None
        self.service_code = service_code
        if local_service_code is not None:
            self.local_service_code = local_service_code
        if value is not None:
            self.value = value
        if currency is not None:
            self.currency = currency
        if method is not None:
            self.method = method

    @property
    def service_code(self):
        """Gets the service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501

        Please enter DHL Express value added global service code. For detailed list of all available service codes for your prospect shipment please invoke /products or /rates  # noqa: E501

        :return: The service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.

        Please enter DHL Express value added global service code. For detailed list of all available service codes for your prospect shipment please invoke /products or /rates  # noqa: E501

        :param service_code: The service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :type: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")  # noqa: E501

        self._service_code = service_code

    @property
    def local_service_code(self):
        """Gets the local_service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501

        Please enter DHL Express value added local service code. For detailed list of all available service codes for your prospect shipment please invoke /products or /rates  # noqa: E501

        :return: The local_service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :rtype: str
        """
        return self._local_service_code

    @local_service_code.setter
    def local_service_code(self, local_service_code):
        """Sets the local_service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.

        Please enter DHL Express value added local service code. For detailed list of all available service codes for your prospect shipment please invoke /products or /rates  # noqa: E501

        :param local_service_code: The local_service_code of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :type: str
        """

        self._local_service_code = local_service_code

    @property
    def value(self):
        """Gets the value of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501

        Please enter monetary value of service (e.g. Insured Value)  # noqa: E501

        :return: The value of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SupermodelIoLogisticsExpressValueAddedServicesRates.

        Please enter monetary value of service (e.g. Insured Value)  # noqa: E501

        :param value: The value of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def currency(self):
        """Gets the currency of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501

        Please enter currency code (e.g. Insured Value currency code)  # noqa: E501

        :return: The currency of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SupermodelIoLogisticsExpressValueAddedServicesRates.

        Please enter currency code (e.g. Insured Value currency code)  # noqa: E501

        :param currency: The currency of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def method(self):
        """Gets the method of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501

        For future use  # noqa: E501

        :return: The method of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SupermodelIoLogisticsExpressValueAddedServicesRates.

        For future use  # noqa: E501

        :param method: The method of this SupermodelIoLogisticsExpressValueAddedServicesRates.  # noqa: E501
        :type: str
        """
        allowed_values = ["cash"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressValueAddedServicesRates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressValueAddedServicesRates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
