# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressProductsDependencyRuleGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependency_rule_name': 'str',
        'dependency_description': 'str',
        'dependency_condition': 'str',
        'required_service_codes': 'list[SupermodelIoLogisticsExpressProductsRequiredServiceCodes]'
    }

    attribute_map = {
        'dependency_rule_name': 'dependencyRuleName',
        'dependency_description': 'dependencyDescription',
        'dependency_condition': 'dependencyCondition',
        'required_service_codes': 'requiredServiceCodes'
    }

    def __init__(self, dependency_rule_name=None, dependency_description=None, dependency_condition=None, required_service_codes=None):  # noqa: E501
        """SupermodelIoLogisticsExpressProductsDependencyRuleGroup - a model defined in Swagger"""  # noqa: E501
        self._dependency_rule_name = None
        self._dependency_description = None
        self._dependency_condition = None
        self._required_service_codes = None
        self.discriminator = None
        if dependency_rule_name is not None:
            self.dependency_rule_name = dependency_rule_name
        if dependency_description is not None:
            self.dependency_description = dependency_description
        if dependency_condition is not None:
            self.dependency_condition = dependency_condition
        if required_service_codes is not None:
            self.required_service_codes = required_service_codes

    @property
    def dependency_rule_name(self):
        """Gets the dependency_rule_name of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501

        Dependency rule group name  # noqa: E501

        :return: The dependency_rule_name of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._dependency_rule_name

    @dependency_rule_name.setter
    def dependency_rule_name(self, dependency_rule_name):
        """Sets the dependency_rule_name of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.

        Dependency rule group name  # noqa: E501

        :param dependency_rule_name: The dependency_rule_name of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :type: str
        """

        self._dependency_rule_name = dependency_rule_name

    @property
    def dependency_description(self):
        """Gets the dependency_description of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501

        Dependency rule group description  # noqa: E501

        :return: The dependency_description of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._dependency_description

    @dependency_description.setter
    def dependency_description(self, dependency_description):
        """Sets the dependency_description of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.

        Dependency rule group description  # noqa: E501

        :param dependency_description: The dependency_description of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :type: str
        """

        self._dependency_description = dependency_description

    @property
    def dependency_condition(self):
        """Gets the dependency_condition of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501

        Dependency rule group condition statement  # noqa: E501

        :return: The dependency_condition of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :rtype: str
        """
        return self._dependency_condition

    @dependency_condition.setter
    def dependency_condition(self, dependency_condition):
        """Sets the dependency_condition of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.

        Dependency rule group condition statement  # noqa: E501

        :param dependency_condition: The dependency_condition of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :type: str
        """

        self._dependency_condition = dependency_condition

    @property
    def required_service_codes(self):
        """Gets the required_service_codes of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501


        :return: The required_service_codes of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressProductsRequiredServiceCodes]
        """
        return self._required_service_codes

    @required_service_codes.setter
    def required_service_codes(self, required_service_codes):
        """Sets the required_service_codes of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.


        :param required_service_codes: The required_service_codes of this SupermodelIoLogisticsExpressProductsDependencyRuleGroup.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressProductsRequiredServiceCodes]
        """

        self._required_service_codes = required_service_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressProductsDependencyRuleGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressProductsDependencyRuleGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
