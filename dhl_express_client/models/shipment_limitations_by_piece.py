# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentLimitationsByPiece(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'piece_size_limit1': 'ValueUnit',
        'piece_size_limit2': 'ValueUnit',
        'piece_size_limit3': 'ValueUnit',
        'max_piece_weight': 'ValueUnit',
        'html': 'str'
    }

    attribute_map = {
        'piece_size_limit1': 'pieceSizeLimit1',
        'piece_size_limit2': 'pieceSizeLimit2',
        'piece_size_limit3': 'pieceSizeLimit3',
        'max_piece_weight': 'maxPieceWeight',
        'html': 'html'
    }

    def __init__(self, piece_size_limit1=None, piece_size_limit2=None, piece_size_limit3=None, max_piece_weight=None, html=None):  # noqa: E501
        """ShipmentLimitationsByPiece - a model defined in Swagger"""  # noqa: E501
        self._piece_size_limit1 = None
        self._piece_size_limit2 = None
        self._piece_size_limit3 = None
        self._max_piece_weight = None
        self._html = None
        self.discriminator = None
        if piece_size_limit1 is not None:
            self.piece_size_limit1 = piece_size_limit1
        if piece_size_limit2 is not None:
            self.piece_size_limit2 = piece_size_limit2
        if piece_size_limit3 is not None:
            self.piece_size_limit3 = piece_size_limit3
        if max_piece_weight is not None:
            self.max_piece_weight = max_piece_weight
        if html is not None:
            self.html = html

    @property
    def piece_size_limit1(self):
        """Gets the piece_size_limit1 of this ShipmentLimitationsByPiece.  # noqa: E501


        :return: The piece_size_limit1 of this ShipmentLimitationsByPiece.  # noqa: E501
        :rtype: ValueUnit
        """
        return self._piece_size_limit1

    @piece_size_limit1.setter
    def piece_size_limit1(self, piece_size_limit1):
        """Sets the piece_size_limit1 of this ShipmentLimitationsByPiece.


        :param piece_size_limit1: The piece_size_limit1 of this ShipmentLimitationsByPiece.  # noqa: E501
        :type: ValueUnit
        """

        self._piece_size_limit1 = piece_size_limit1

    @property
    def piece_size_limit2(self):
        """Gets the piece_size_limit2 of this ShipmentLimitationsByPiece.  # noqa: E501


        :return: The piece_size_limit2 of this ShipmentLimitationsByPiece.  # noqa: E501
        :rtype: ValueUnit
        """
        return self._piece_size_limit2

    @piece_size_limit2.setter
    def piece_size_limit2(self, piece_size_limit2):
        """Sets the piece_size_limit2 of this ShipmentLimitationsByPiece.


        :param piece_size_limit2: The piece_size_limit2 of this ShipmentLimitationsByPiece.  # noqa: E501
        :type: ValueUnit
        """

        self._piece_size_limit2 = piece_size_limit2

    @property
    def piece_size_limit3(self):
        """Gets the piece_size_limit3 of this ShipmentLimitationsByPiece.  # noqa: E501


        :return: The piece_size_limit3 of this ShipmentLimitationsByPiece.  # noqa: E501
        :rtype: ValueUnit
        """
        return self._piece_size_limit3

    @piece_size_limit3.setter
    def piece_size_limit3(self, piece_size_limit3):
        """Sets the piece_size_limit3 of this ShipmentLimitationsByPiece.


        :param piece_size_limit3: The piece_size_limit3 of this ShipmentLimitationsByPiece.  # noqa: E501
        :type: ValueUnit
        """

        self._piece_size_limit3 = piece_size_limit3

    @property
    def max_piece_weight(self):
        """Gets the max_piece_weight of this ShipmentLimitationsByPiece.  # noqa: E501


        :return: The max_piece_weight of this ShipmentLimitationsByPiece.  # noqa: E501
        :rtype: ValueUnit
        """
        return self._max_piece_weight

    @max_piece_weight.setter
    def max_piece_weight(self, max_piece_weight):
        """Sets the max_piece_weight of this ShipmentLimitationsByPiece.


        :param max_piece_weight: The max_piece_weight of this ShipmentLimitationsByPiece.  # noqa: E501
        :type: ValueUnit
        """

        self._max_piece_weight = max_piece_weight

    @property
    def html(self):
        """Gets the html of this ShipmentLimitationsByPiece.  # noqa: E501

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :return: The html of this ShipmentLimitationsByPiece.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ShipmentLimitationsByPiece.

        Obsolete. This is planned to be removed in future releases.  # noqa: E501

        :param html: The html of this ShipmentLimitationsByPiece.  # noqa: E501
        :type: str
        """

        self._html = html

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentLimitationsByPiece, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentLimitationsByPiece):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
