# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Language(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language_code': 'str',
        'language_script_code': 'str',
        'language_country_code': 'str',
        'language_ok': 'bool'
    }

    attribute_map = {
        'language_code': 'languageCode',
        'language_script_code': 'languageScriptCode',
        'language_country_code': 'languageCountryCode',
        'language_ok': 'languageOk'
    }

    def __init__(self, language_code=None, language_script_code=None, language_country_code=None, language_ok=None):  # noqa: E501
        """Language - a model defined in Swagger"""  # noqa: E501
        self._language_code = None
        self._language_script_code = None
        self._language_country_code = None
        self._language_ok = None
        self.discriminator = None
        if language_code is not None:
            self.language_code = language_code
        if language_script_code is not None:
            self.language_script_code = language_script_code
        if language_country_code is not None:
            self.language_country_code = language_country_code
        if language_ok is not None:
            self.language_ok = language_ok

    @property
    def language_code(self):
        """Gets the language_code of this Language.  # noqa: E501

        Language Code  # noqa: E501

        :return: The language_code of this Language.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Language.

        Language Code  # noqa: E501

        :param language_code: The language_code of this Language.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def language_script_code(self):
        """Gets the language_script_code of this Language.  # noqa: E501

        Language Script Code  # noqa: E501

        :return: The language_script_code of this Language.  # noqa: E501
        :rtype: str
        """
        return self._language_script_code

    @language_script_code.setter
    def language_script_code(self, language_script_code):
        """Sets the language_script_code of this Language.

        Language Script Code  # noqa: E501

        :param language_script_code: The language_script_code of this Language.  # noqa: E501
        :type: str
        """

        self._language_script_code = language_script_code

    @property
    def language_country_code(self):
        """Gets the language_country_code of this Language.  # noqa: E501

        Language Country Code  # noqa: E501

        :return: The language_country_code of this Language.  # noqa: E501
        :rtype: str
        """
        return self._language_country_code

    @language_country_code.setter
    def language_country_code(self, language_country_code):
        """Sets the language_country_code of this Language.

        Language Country Code  # noqa: E501

        :param language_country_code: The language_country_code of this Language.  # noqa: E501
        :type: str
        """

        self._language_country_code = language_country_code

    @property
    def language_ok(self):
        """Gets the language_ok of this Language.  # noqa: E501

        Language Valid  # noqa: E501

        :return: The language_ok of this Language.  # noqa: E501
        :rtype: bool
        """
        return self._language_ok

    @language_ok.setter
    def language_ok(self, language_ok):
        """Sets the language_ok of this Language.

        Language Valid  # noqa: E501

        :param language_ok: The language_ok of this Language.  # noqa: E501
        :type: bool
        """

        self._language_ok = language_ok

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Language, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Language):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
