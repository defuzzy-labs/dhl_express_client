# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupermodelIoLogisticsExpressExportDeclarationLineItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'description': 'str',
        'price': 'float',
        'quantity': 'SupermodelIoLogisticsExpressExportDeclarationQuantity',
        'commodity_codes': 'list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCommodityCodes]',
        'export_reason_type': 'str',
        'manufacturer_country': 'str',
        'weight': 'SupermodelIoLogisticsExpressExportDeclarationWeight',
        'is_taxes_paid': 'bool',
        'customer_references': 'list[SupermodelIoLogisticsExpressExportDeclarationCustomerReferences]',
        'customs_documents': 'list[SupermodelIoLogisticsExpressExportDeclarationCustomsDocuments]',
        'pre_calculated_line_item_total_value': 'float'
    }

    attribute_map = {
        'number': 'number',
        'description': 'description',
        'price': 'price',
        'quantity': 'quantity',
        'commodity_codes': 'commodityCodes',
        'export_reason_type': 'exportReasonType',
        'manufacturer_country': 'manufacturerCountry',
        'weight': 'weight',
        'is_taxes_paid': 'isTaxesPaid',
        'customer_references': 'customerReferences',
        'customs_documents': 'customsDocuments',
        'pre_calculated_line_item_total_value': 'preCalculatedLineItemTotalValue'
    }

    def __init__(self, number=None, description=None, price=None, quantity=None, commodity_codes=None, export_reason_type=None, manufacturer_country=None, weight=None, is_taxes_paid=None, customer_references=None, customs_documents=None, pre_calculated_line_item_total_value=None):  # noqa: E501
        """SupermodelIoLogisticsExpressExportDeclarationLineItems - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._description = None
        self._price = None
        self._quantity = None
        self._commodity_codes = None
        self._export_reason_type = None
        self._manufacturer_country = None
        self._weight = None
        self._is_taxes_paid = None
        self._customer_references = None
        self._customs_documents = None
        self._pre_calculated_line_item_total_value = None
        self.discriminator = None
        self.number = number
        self.description = description
        self.price = price
        self.quantity = quantity
        if commodity_codes is not None:
            self.commodity_codes = commodity_codes
        if export_reason_type is not None:
            self.export_reason_type = export_reason_type
        self.manufacturer_country = manufacturer_country
        self.weight = weight
        if is_taxes_paid is not None:
            self.is_taxes_paid = is_taxes_paid
        if customer_references is not None:
            self.customer_references = customer_references
        if customs_documents is not None:
            self.customs_documents = customs_documents
        if pre_calculated_line_item_total_value is not None:
            self.pre_calculated_line_item_total_value = pre_calculated_line_item_total_value

    @property
    def number(self):
        """Gets the number of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide line item number  # noqa: E501

        :return: The number of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide line item number  # noqa: E501

        :param number: The number of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def description(self):
        """Gets the description of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide description of the line item  # noqa: E501

        :return: The description of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide description of the line item  # noqa: E501

        :param description: The description of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def price(self):
        """Gets the price of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide unit or article price line item value  # noqa: E501

        :return: The price of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide unit or article price line item value  # noqa: E501

        :param price: The price of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501


        :return: The quantity of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: SupermodelIoLogisticsExpressExportDeclarationQuantity
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SupermodelIoLogisticsExpressExportDeclarationLineItems.


        :param quantity: The quantity of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: SupermodelIoLogisticsExpressExportDeclarationQuantity
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def commodity_codes(self):
        """Gets the commodity_codes of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide Commodity codes for the shipment at item line level  # noqa: E501

        :return: The commodity_codes of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCommodityCodes]
        """
        return self._commodity_codes

    @commodity_codes.setter
    def commodity_codes(self, commodity_codes):
        """Sets the commodity_codes of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide Commodity codes for the shipment at item line level  # noqa: E501

        :param commodity_codes: The commodity_codes of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressCreateShipmentRequestContentExportDeclarationCommodityCodes]
        """

        self._commodity_codes = commodity_codes

    @property
    def export_reason_type(self):
        """Gets the export_reason_type of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide the reason for export  # noqa: E501

        :return: The export_reason_type of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._export_reason_type

    @export_reason_type.setter
    def export_reason_type(self, export_reason_type):
        """Sets the export_reason_type of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide the reason for export  # noqa: E501

        :param export_reason_type: The export_reason_type of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: str
        """
        allowed_values = ["permanent", "temporary", "return", "used_exhibition_goods_to_origin", "intercompany_use", "commercial_purpose_or_sale", "personal_belongings_or_personal_use", "sample", "gift", "return_to_origin", "warranty_replacement", "diplomatic_goods", "defence_material"]  # noqa: E501
        if export_reason_type not in allowed_values:
            raise ValueError(
                "Invalid value for `export_reason_type` ({0}), must be one of {1}"  # noqa: E501
                .format(export_reason_type, allowed_values)
            )

        self._export_reason_type = export_reason_type

    @property
    def manufacturer_country(self):
        """Gets the manufacturer_country of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please enter two letter ISO manufacturer country code  # noqa: E501

        :return: The manufacturer_country of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_country

    @manufacturer_country.setter
    def manufacturer_country(self, manufacturer_country):
        """Sets the manufacturer_country of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please enter two letter ISO manufacturer country code  # noqa: E501

        :param manufacturer_country: The manufacturer_country of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: str
        """
        if manufacturer_country is None:
            raise ValueError("Invalid value for `manufacturer_country`, must not be `None`")  # noqa: E501

        self._manufacturer_country = manufacturer_country

    @property
    def weight(self):
        """Gets the weight of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501


        :return: The weight of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: SupermodelIoLogisticsExpressExportDeclarationWeight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SupermodelIoLogisticsExpressExportDeclarationLineItems.


        :param weight: The weight of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: SupermodelIoLogisticsExpressExportDeclarationWeight
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def is_taxes_paid(self):
        """Gets the is_taxes_paid of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide if the Taxes is paid for the line item  # noqa: E501

        :return: The is_taxes_paid of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_taxes_paid

    @is_taxes_paid.setter
    def is_taxes_paid(self, is_taxes_paid):
        """Sets the is_taxes_paid of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide if the Taxes is paid for the line item  # noqa: E501

        :param is_taxes_paid: The is_taxes_paid of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: bool
        """

        self._is_taxes_paid = is_taxes_paid

    @property
    def customer_references(self):
        """Gets the customer_references of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide the Customer References for the line item  # noqa: E501

        :return: The customer_references of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressExportDeclarationCustomerReferences]
        """
        return self._customer_references

    @customer_references.setter
    def customer_references(self, customer_references):
        """Sets the customer_references of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide the Customer References for the line item  # noqa: E501

        :param customer_references: The customer_references of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressExportDeclarationCustomerReferences]
        """

        self._customer_references = customer_references

    @property
    def customs_documents(self):
        """Gets the customs_documents of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide the customs documents details  # noqa: E501

        :return: The customs_documents of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: list[SupermodelIoLogisticsExpressExportDeclarationCustomsDocuments]
        """
        return self._customs_documents

    @customs_documents.setter
    def customs_documents(self, customs_documents):
        """Sets the customs_documents of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide the customs documents details  # noqa: E501

        :param customs_documents: The customs_documents of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: list[SupermodelIoLogisticsExpressExportDeclarationCustomsDocuments]
        """

        self._customs_documents = customs_documents

    @property
    def pre_calculated_line_item_total_value(self):
        """Gets the pre_calculated_line_item_total_value of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501

        Please provide monetary value of the line item x quantity  # noqa: E501

        :return: The pre_calculated_line_item_total_value of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :rtype: float
        """
        return self._pre_calculated_line_item_total_value

    @pre_calculated_line_item_total_value.setter
    def pre_calculated_line_item_total_value(self, pre_calculated_line_item_total_value):
        """Sets the pre_calculated_line_item_total_value of this SupermodelIoLogisticsExpressExportDeclarationLineItems.

        Please provide monetary value of the line item x quantity  # noqa: E501

        :param pre_calculated_line_item_total_value: The pre_calculated_line_item_total_value of this SupermodelIoLogisticsExpressExportDeclarationLineItems.  # noqa: E501
        :type: float
        """

        self._pre_calculated_line_item_total_value = pre_calculated_line_item_total_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupermodelIoLogisticsExpressExportDeclarationLineItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupermodelIoLogisticsExpressExportDeclarationLineItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
