# coding: utf-8

"""
    DHL Express APIs (MyDHL API)

    Welcome to the official DHL Express APIs (MyDHL API) below are the published API Documentation to fulfill your shipping needs with DHL Express.       Please follow the process described [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--get-access) to request access to the DHL Express - MyDHL API services   In case you already have DHL Express - MyDHL API Service credentials please ensure to use the endpoints/environments listed  [here](https://developer.dhl.com/api-reference/dhl-express-mydhl-api#get-started-section/user-guide--environments)   # noqa: E501

    OpenAPI spec version: 2.12.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocalTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chronology': 'Chronology',
        'hour_of_day': 'int',
        'minute_of_hour': 'int',
        'second_of_minute': 'int',
        'millis_of_second': 'int',
        'millis_of_day': 'int',
        'fields': 'list[DateTimeField]',
        'values': 'list[int]',
        'field_types': 'list[DateTimeFieldType]'
    }

    attribute_map = {
        'chronology': 'chronology',
        'hour_of_day': 'hourOfDay',
        'minute_of_hour': 'minuteOfHour',
        'second_of_minute': 'secondOfMinute',
        'millis_of_second': 'millisOfSecond',
        'millis_of_day': 'millisOfDay',
        'fields': 'fields',
        'values': 'values',
        'field_types': 'fieldTypes'
    }

    def __init__(self, chronology=None, hour_of_day=None, minute_of_hour=None, second_of_minute=None, millis_of_second=None, millis_of_day=None, fields=None, values=None, field_types=None):  # noqa: E501
        """LocalTime - a model defined in Swagger"""  # noqa: E501
        self._chronology = None
        self._hour_of_day = None
        self._minute_of_hour = None
        self._second_of_minute = None
        self._millis_of_second = None
        self._millis_of_day = None
        self._fields = None
        self._values = None
        self._field_types = None
        self.discriminator = None
        if chronology is not None:
            self.chronology = chronology
        if hour_of_day is not None:
            self.hour_of_day = hour_of_day
        if minute_of_hour is not None:
            self.minute_of_hour = minute_of_hour
        if second_of_minute is not None:
            self.second_of_minute = second_of_minute
        if millis_of_second is not None:
            self.millis_of_second = millis_of_second
        if millis_of_day is not None:
            self.millis_of_day = millis_of_day
        if fields is not None:
            self.fields = fields
        if values is not None:
            self.values = values
        if field_types is not None:
            self.field_types = field_types

    @property
    def chronology(self):
        """Gets the chronology of this LocalTime.  # noqa: E501


        :return: The chronology of this LocalTime.  # noqa: E501
        :rtype: Chronology
        """
        return self._chronology

    @chronology.setter
    def chronology(self, chronology):
        """Sets the chronology of this LocalTime.


        :param chronology: The chronology of this LocalTime.  # noqa: E501
        :type: Chronology
        """

        self._chronology = chronology

    @property
    def hour_of_day(self):
        """Gets the hour_of_day of this LocalTime.  # noqa: E501


        :return: The hour_of_day of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._hour_of_day

    @hour_of_day.setter
    def hour_of_day(self, hour_of_day):
        """Sets the hour_of_day of this LocalTime.


        :param hour_of_day: The hour_of_day of this LocalTime.  # noqa: E501
        :type: int
        """

        self._hour_of_day = hour_of_day

    @property
    def minute_of_hour(self):
        """Gets the minute_of_hour of this LocalTime.  # noqa: E501


        :return: The minute_of_hour of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._minute_of_hour

    @minute_of_hour.setter
    def minute_of_hour(self, minute_of_hour):
        """Sets the minute_of_hour of this LocalTime.


        :param minute_of_hour: The minute_of_hour of this LocalTime.  # noqa: E501
        :type: int
        """

        self._minute_of_hour = minute_of_hour

    @property
    def second_of_minute(self):
        """Gets the second_of_minute of this LocalTime.  # noqa: E501


        :return: The second_of_minute of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._second_of_minute

    @second_of_minute.setter
    def second_of_minute(self, second_of_minute):
        """Sets the second_of_minute of this LocalTime.


        :param second_of_minute: The second_of_minute of this LocalTime.  # noqa: E501
        :type: int
        """

        self._second_of_minute = second_of_minute

    @property
    def millis_of_second(self):
        """Gets the millis_of_second of this LocalTime.  # noqa: E501


        :return: The millis_of_second of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._millis_of_second

    @millis_of_second.setter
    def millis_of_second(self, millis_of_second):
        """Sets the millis_of_second of this LocalTime.


        :param millis_of_second: The millis_of_second of this LocalTime.  # noqa: E501
        :type: int
        """

        self._millis_of_second = millis_of_second

    @property
    def millis_of_day(self):
        """Gets the millis_of_day of this LocalTime.  # noqa: E501


        :return: The millis_of_day of this LocalTime.  # noqa: E501
        :rtype: int
        """
        return self._millis_of_day

    @millis_of_day.setter
    def millis_of_day(self, millis_of_day):
        """Sets the millis_of_day of this LocalTime.


        :param millis_of_day: The millis_of_day of this LocalTime.  # noqa: E501
        :type: int
        """

        self._millis_of_day = millis_of_day

    @property
    def fields(self):
        """Gets the fields of this LocalTime.  # noqa: E501


        :return: The fields of this LocalTime.  # noqa: E501
        :rtype: list[DateTimeField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this LocalTime.


        :param fields: The fields of this LocalTime.  # noqa: E501
        :type: list[DateTimeField]
        """

        self._fields = fields

    @property
    def values(self):
        """Gets the values of this LocalTime.  # noqa: E501


        :return: The values of this LocalTime.  # noqa: E501
        :rtype: list[int]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this LocalTime.


        :param values: The values of this LocalTime.  # noqa: E501
        :type: list[int]
        """

        self._values = values

    @property
    def field_types(self):
        """Gets the field_types of this LocalTime.  # noqa: E501


        :return: The field_types of this LocalTime.  # noqa: E501
        :rtype: list[DateTimeFieldType]
        """
        return self._field_types

    @field_types.setter
    def field_types(self, field_types):
        """Sets the field_types of this LocalTime.


        :param field_types: The field_types of this LocalTime.  # noqa: E501
        :type: list[DateTimeFieldType]
        """

        self._field_types = field_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
